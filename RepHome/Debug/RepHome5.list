
RepHome5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003860  080098e0  080098e0  000198e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d140  0800d140  0001d140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d148  0800d148  0001d148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d14c  0800d14c  0001d14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000069c  20000000  0800d150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001630  200006a0  0800d7ec  000206a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000100  20001cd0  0800d7ec  00021cd0  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005ac85  00000000  00000000  000206c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035ac  00000000  00000000  0007b34a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002240  00000000  00000000  0007e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002078  00000000  00000000  00080b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009417  00000000  00000000  00082bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000fa78  00000000  00000000  0008bfc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009ba3f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a0bc  00000000  00000000  0009babc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200006a0 	.word	0x200006a0
 800012c:	00000000 	.word	0x00000000
 8000130:	080098c4 	.word	0x080098c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200006a4 	.word	0x200006a4
 800014c:	080098c4 	.word	0x080098c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2uiz>:
 8000a80:	004a      	lsls	r2, r1, #1
 8000a82:	d211      	bcs.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a88:	d211      	bcs.n	8000aae <__aeabi_d2uiz+0x2e>
 8000a8a:	d50d      	bpl.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a94:	d40e      	bmi.n	8000ab4 <__aeabi_d2uiz+0x34>
 8000a96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_d2uiz+0x3a>
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_uldivmod>:
 8000ac0:	b953      	cbnz	r3, 8000ad8 <__aeabi_uldivmod+0x18>
 8000ac2:	b94a      	cbnz	r2, 8000ad8 <__aeabi_uldivmod+0x18>
 8000ac4:	2900      	cmp	r1, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	2800      	cmpeq	r0, #0
 8000aca:	bf1c      	itt	ne
 8000acc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad4:	f000 b97a 	b.w	8000dcc <__aeabi_idiv0>
 8000ad8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000adc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae0:	f000 f806 	bl	8000af0 <__udivmoddi4>
 8000ae4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aec:	b004      	add	sp, #16
 8000aee:	4770      	bx	lr

08000af0 <__udivmoddi4>:
 8000af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af4:	468c      	mov	ip, r1
 8000af6:	460e      	mov	r6, r1
 8000af8:	4604      	mov	r4, r0
 8000afa:	9d08      	ldr	r5, [sp, #32]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d150      	bne.n	8000ba2 <__udivmoddi4+0xb2>
 8000b00:	428a      	cmp	r2, r1
 8000b02:	4617      	mov	r7, r2
 8000b04:	d96c      	bls.n	8000be0 <__udivmoddi4+0xf0>
 8000b06:	fab2 fe82 	clz	lr, r2
 8000b0a:	f1be 0f00 	cmp.w	lr, #0
 8000b0e:	d00b      	beq.n	8000b28 <__udivmoddi4+0x38>
 8000b10:	f1ce 0c20 	rsb	ip, lr, #32
 8000b14:	fa01 f60e 	lsl.w	r6, r1, lr
 8000b18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b20:	ea4c 0c06 	orr.w	ip, ip, r6
 8000b24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b28:	0c3a      	lsrs	r2, r7, #16
 8000b2a:	fbbc f9f2 	udiv	r9, ip, r2
 8000b2e:	b2bb      	uxth	r3, r7
 8000b30:	fb02 cc19 	mls	ip, r2, r9, ip
 8000b34:	fb09 fa03 	mul.w	sl, r9, r3
 8000b38:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000b3c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000b40:	45b2      	cmp	sl, r6
 8000b42:	d90a      	bls.n	8000b5a <__udivmoddi4+0x6a>
 8000b44:	19f6      	adds	r6, r6, r7
 8000b46:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b4a:	f080 8125 	bcs.w	8000d98 <__udivmoddi4+0x2a8>
 8000b4e:	45b2      	cmp	sl, r6
 8000b50:	f240 8122 	bls.w	8000d98 <__udivmoddi4+0x2a8>
 8000b54:	f1a9 0902 	sub.w	r9, r9, #2
 8000b58:	443e      	add	r6, r7
 8000b5a:	eba6 060a 	sub.w	r6, r6, sl
 8000b5e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000b62:	fb02 6610 	mls	r6, r2, r0, r6
 8000b66:	fb00 f303 	mul.w	r3, r0, r3
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x98>
 8000b74:	19e4      	adds	r4, r4, r7
 8000b76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7a:	f080 810b 	bcs.w	8000d94 <__udivmoddi4+0x2a4>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	f240 8108 	bls.w	8000d94 <__udivmoddi4+0x2a4>
 8000b84:	3802      	subs	r0, #2
 8000b86:	443c      	add	r4, r7
 8000b88:	2100      	movs	r1, #0
 8000b8a:	1ae4      	subs	r4, r4, r3
 8000b8c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d062      	beq.n	8000c5a <__udivmoddi4+0x16a>
 8000b94:	2300      	movs	r3, #0
 8000b96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b9a:	602c      	str	r4, [r5, #0]
 8000b9c:	606b      	str	r3, [r5, #4]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0xc6>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d055      	beq.n	8000c56 <__udivmoddi4+0x166>
 8000baa:	2100      	movs	r1, #0
 8000bac:	e885 0041 	stmia.w	r5, {r0, r6}
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	f040 808f 	bne.w	8000cde <__udivmoddi4+0x1ee>
 8000bc0:	42b3      	cmp	r3, r6
 8000bc2:	d302      	bcc.n	8000bca <__udivmoddi4+0xda>
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	f200 80fc 	bhi.w	8000dc2 <__udivmoddi4+0x2d2>
 8000bca:	1a84      	subs	r4, r0, r2
 8000bcc:	eb66 0603 	sbc.w	r6, r6, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	46b4      	mov	ip, r6
 8000bd4:	2d00      	cmp	r5, #0
 8000bd6:	d040      	beq.n	8000c5a <__udivmoddi4+0x16a>
 8000bd8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	b912      	cbnz	r2, 8000be8 <__udivmoddi4+0xf8>
 8000be2:	2701      	movs	r7, #1
 8000be4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000be8:	fab7 fe87 	clz	lr, r7
 8000bec:	f1be 0f00 	cmp.w	lr, #0
 8000bf0:	d135      	bne.n	8000c5e <__udivmoddi4+0x16e>
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	1bf6      	subs	r6, r6, r7
 8000bf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000bfa:	fa1f f887 	uxth.w	r8, r7
 8000bfe:	fbb6 f2fc 	udiv	r2, r6, ip
 8000c02:	fb0c 6612 	mls	r6, ip, r2, r6
 8000c06:	fb08 f002 	mul.w	r0, r8, r2
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000c10:	42b0      	cmp	r0, r6
 8000c12:	d907      	bls.n	8000c24 <__udivmoddi4+0x134>
 8000c14:	19f6      	adds	r6, r6, r7
 8000c16:	f102 33ff 	add.w	r3, r2, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x132>
 8000c1c:	42b0      	cmp	r0, r6
 8000c1e:	f200 80d2 	bhi.w	8000dc6 <__udivmoddi4+0x2d6>
 8000c22:	461a      	mov	r2, r3
 8000c24:	1a36      	subs	r6, r6, r0
 8000c26:	fbb6 f0fc 	udiv	r0, r6, ip
 8000c2a:	fb0c 6610 	mls	r6, ip, r0, r6
 8000c2e:	fb08 f800 	mul.w	r8, r8, r0
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0x15c>
 8000c3c:	19e4      	adds	r4, r4, r7
 8000c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x15a>
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	f200 80b9 	bhi.w	8000dbc <__udivmoddi4+0x2cc>
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	eba4 0408 	sub.w	r4, r4, r8
 8000c50:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c54:	e79c      	b.n	8000b90 <__udivmoddi4+0xa0>
 8000c56:	4629      	mov	r1, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c62:	f1ce 0320 	rsb	r3, lr, #32
 8000c66:	fa26 f203 	lsr.w	r2, r6, r3
 8000c6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c6e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000c72:	fa1f f887 	uxth.w	r8, r7
 8000c76:	fb0c 2211 	mls	r2, ip, r1, r2
 8000c7a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c7e:	fa20 f303 	lsr.w	r3, r0, r3
 8000c82:	fb01 f908 	mul.w	r9, r1, r8
 8000c86:	4333      	orrs	r3, r6
 8000c88:	0c1e      	lsrs	r6, r3, #16
 8000c8a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c8e:	45b1      	cmp	r9, r6
 8000c90:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x1ba>
 8000c96:	19f6      	adds	r6, r6, r7
 8000c98:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c9c:	f080 808c 	bcs.w	8000db8 <__udivmoddi4+0x2c8>
 8000ca0:	45b1      	cmp	r9, r6
 8000ca2:	f240 8089 	bls.w	8000db8 <__udivmoddi4+0x2c8>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	443e      	add	r6, r7
 8000caa:	eba6 0609 	sub.w	r6, r6, r9
 8000cae:	fbb6 f0fc 	udiv	r0, r6, ip
 8000cb2:	fb0c 6210 	mls	r2, ip, r0, r6
 8000cb6:	fb00 f908 	mul.w	r9, r0, r8
 8000cba:	b29e      	uxth	r6, r3
 8000cbc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000cc0:	45b1      	cmp	r9, r6
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x1e4>
 8000cc4:	19f6      	adds	r6, r6, r7
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d271      	bcs.n	8000db0 <__udivmoddi4+0x2c0>
 8000ccc:	45b1      	cmp	r9, r6
 8000cce:	d96f      	bls.n	8000db0 <__udivmoddi4+0x2c0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443e      	add	r6, r7
 8000cd4:	eba6 0609 	sub.w	r6, r6, r9
 8000cd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cdc:	e78f      	b.n	8000bfe <__udivmoddi4+0x10e>
 8000cde:	f1c1 0720 	rsb	r7, r1, #32
 8000ce2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ce6:	408b      	lsls	r3, r1
 8000ce8:	ea48 0303 	orr.w	r3, r8, r3
 8000cec:	fa26 f407 	lsr.w	r4, r6, r7
 8000cf0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000cf4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cf8:	fa1f fc83 	uxth.w	ip, r3
 8000cfc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d00:	408e      	lsls	r6, r1
 8000d02:	fa20 f807 	lsr.w	r8, r0, r7
 8000d06:	fb09 fa0c 	mul.w	sl, r9, ip
 8000d0a:	ea48 0806 	orr.w	r8, r8, r6
 8000d0e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000d12:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1c:	fa00 f601 	lsl.w	r6, r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x244>
 8000d22:	18e4      	adds	r4, r4, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	d244      	bcs.n	8000db4 <__udivmoddi4+0x2c4>
 8000d2a:	45a2      	cmp	sl, r4
 8000d2c:	d942      	bls.n	8000db4 <__udivmoddi4+0x2c4>
 8000d2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d32:	441c      	add	r4, r3
 8000d34:	eba4 040a 	sub.w	r4, r4, sl
 8000d38:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d3c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d44:	fa1f f888 	uxth.w	r8, r8
 8000d48:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x270>
 8000d50:	18e4      	adds	r4, r4, r3
 8000d52:	f100 3eff 	add.w	lr, r0, #4294967295
 8000d56:	d229      	bcs.n	8000dac <__udivmoddi4+0x2bc>
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d927      	bls.n	8000dac <__udivmoddi4+0x2bc>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	441c      	add	r4, r3
 8000d60:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d64:	fba0 8902 	umull	r8, r9, r0, r2
 8000d68:	eba4 0c0c 	sub.w	ip, r4, ip
 8000d6c:	45cc      	cmp	ip, r9
 8000d6e:	46c2      	mov	sl, r8
 8000d70:	46ce      	mov	lr, r9
 8000d72:	d315      	bcc.n	8000da0 <__udivmoddi4+0x2b0>
 8000d74:	d012      	beq.n	8000d9c <__udivmoddi4+0x2ac>
 8000d76:	b155      	cbz	r5, 8000d8e <__udivmoddi4+0x29e>
 8000d78:	ebb6 030a 	subs.w	r3, r6, sl
 8000d7c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000d80:	fa06 f707 	lsl.w	r7, r6, r7
 8000d84:	40cb      	lsrs	r3, r1
 8000d86:	431f      	orrs	r7, r3
 8000d88:	40ce      	lsrs	r6, r1
 8000d8a:	602f      	str	r7, [r5, #0]
 8000d8c:	606e      	str	r6, [r5, #4]
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	4610      	mov	r0, r2
 8000d96:	e6f7      	b.n	8000b88 <__udivmoddi4+0x98>
 8000d98:	4689      	mov	r9, r1
 8000d9a:	e6de      	b.n	8000b5a <__udivmoddi4+0x6a>
 8000d9c:	4546      	cmp	r6, r8
 8000d9e:	d2ea      	bcs.n	8000d76 <__udivmoddi4+0x286>
 8000da0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da4:	eb69 0e03 	sbc.w	lr, r9, r3
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7e4      	b.n	8000d76 <__udivmoddi4+0x286>
 8000dac:	4670      	mov	r0, lr
 8000dae:	e7d7      	b.n	8000d60 <__udivmoddi4+0x270>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e78f      	b.n	8000cd4 <__udivmoddi4+0x1e4>
 8000db4:	4681      	mov	r9, r0
 8000db6:	e7bd      	b.n	8000d34 <__udivmoddi4+0x244>
 8000db8:	4611      	mov	r1, r2
 8000dba:	e776      	b.n	8000caa <__udivmoddi4+0x1ba>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	e744      	b.n	8000c4c <__udivmoddi4+0x15c>
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	e706      	b.n	8000bd4 <__udivmoddi4+0xe4>
 8000dc6:	3a02      	subs	r2, #2
 8000dc8:	443e      	add	r6, r7
 8000dca:	e72b      	b.n	8000c24 <__udivmoddi4+0x134>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000dd8:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <NVIC_PriorityGroupConfig+0x20>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60d3      	str	r3, [r2, #12]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	230f      	movs	r3, #15
 8000e06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	78db      	ldrb	r3, [r3, #3]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d03a      	beq.n	8000e86 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <NVIC_Init+0xbc>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f1c3 0304 	rsb	r3, r3, #4
 8000e24:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	461a      	mov	r2, r3
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	789b      	ldrb	r3, [r3, #2]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4013      	ands	r3, r2
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000e54:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <NVIC_Init+0xc0>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	6979      	ldr	r1, [r7, #20]
 8000e5c:	b2c9      	uxtb	r1, r1
 8000e5e:	4413      	add	r3, r2
 8000e60:	460a      	mov	r2, r1
 8000e62:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <NVIC_Init+0xc0>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000e84:	e00f      	b.n	8000ea6 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e86:	490b      	ldr	r1, [pc, #44]	; (8000eb4 <NVIC_Init+0xc0>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	095b      	lsrs	r3, r3, #5
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e9e:	f100 0320 	add.w	r3, r0, #32
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ea6:	bf00      	nop
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000ec4:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <EXTI_Init+0xe0>)
 8000ec6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d04f      	beq.n	8000f70 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ed0:	4931      	ldr	r1, [pc, #196]	; (8000f98 <EXTI_Init+0xe0>)
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <EXTI_Init+0xe0>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4013      	ands	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000ee0:	492d      	ldr	r1, [pc, #180]	; (8000f98 <EXTI_Init+0xe0>)
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <EXTI_Init+0xe0>)
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	791b      	ldrb	r3, [r3, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000f0a:	4923      	ldr	r1, [pc, #140]	; (8000f98 <EXTI_Init+0xe0>)
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <EXTI_Init+0xe0>)
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4013      	ands	r3, r2
 8000f18:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000f1a:	491f      	ldr	r1, [pc, #124]	; (8000f98 <EXTI_Init+0xe0>)
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <EXTI_Init+0xe0>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4013      	ands	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d10e      	bne.n	8000f50 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000f32:	4919      	ldr	r1, [pc, #100]	; (8000f98 <EXTI_Init+0xe0>)
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <EXTI_Init+0xe0>)
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000f40:	4915      	ldr	r1, [pc, #84]	; (8000f98 <EXTI_Init+0xe0>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <EXTI_Init+0xe0>)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000f4e:	e01d      	b.n	8000f8c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <EXTI_Init+0xe0>)
 8000f52:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	795b      	ldrb	r3, [r3, #5]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	6811      	ldr	r1, [r2, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
}
 8000f6e:	e00d      	b.n	8000f8c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	6811      	ldr	r1, [r2, #0]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	43d2      	mvns	r2, r2
 8000f88:	400a      	ands	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40010400 	.word	0x40010400

08000f9c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <EXTI_GetITStatus+0x44>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <EXTI_GetITStatus+0x44>)
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <EXTI_GetITStatus+0x32>
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e001      	b.n	8000fd2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <EXTI_ClearITPendingBit+0x18>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6153      	str	r3, [r2, #20]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	40010400 	.word	0x40010400

08001000 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	78db      	ldrb	r3, [r3, #3]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	78db      	ldrb	r3, [r3, #3]
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	461a      	mov	r2, r3
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	4313      	orrs	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d044      	beq.n	80010d8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	e038      	b.n	80010cc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800105a:	2201      	movs	r2, #1
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d126      	bne.n	80010c6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800107e:	220f      	movs	r2, #15
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	43db      	mvns	r3, r3
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4013      	ands	r3, r2
 8001090:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	78db      	ldrb	r3, [r3, #3]
 80010a4:	2b28      	cmp	r3, #40	; 0x28
 80010a6:	d105      	bne.n	80010b4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80010a8:	2201      	movs	r2, #1
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	409a      	lsls	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	e008      	b.n	80010c6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	78db      	ldrb	r3, [r3, #3]
 80010b8:	2b48      	cmp	r3, #72	; 0x48
 80010ba:	d104      	bne.n	80010c6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80010bc:	2201      	movs	r2, #1
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	409a      	lsls	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b07      	cmp	r3, #7
 80010d0:	d9c3      	bls.n	800105a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d946      	bls.n	800116e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	e03a      	b.n	8001162 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	3308      	adds	r3, #8
 80010f0:	2201      	movs	r2, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d127      	bne.n	800115c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001112:	220f      	movs	r2, #15
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	43db      	mvns	r3, r3
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4013      	ands	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4313      	orrs	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	78db      	ldrb	r3, [r3, #3]
 8001138:	2b28      	cmp	r3, #40	; 0x28
 800113a:	d105      	bne.n	8001148 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	3308      	adds	r3, #8
 8001140:	2201      	movs	r2, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	78db      	ldrb	r3, [r3, #3]
 800114c:	2b48      	cmp	r3, #72	; 0x48
 800114e:	d105      	bne.n	800115c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	3308      	adds	r3, #8
 8001154:	2201      	movs	r2, #1
 8001156:	409a      	lsls	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	3301      	adds	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b07      	cmp	r3, #7
 8001166:	d9c1      	bls.n	80010ec <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	605a      	str	r2, [r3, #4]
  }
}
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8001194:	e002      	b.n	800119c <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	615a      	str	r2, [r3, #20]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
	...

080011a8 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80011a8:	b490      	push	{r4, r7}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80011cc:	4916      	ldr	r1, [pc, #88]	; (8001228 <GPIO_EXTILineConfig+0x80>)
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <GPIO_EXTILineConfig+0x80>)
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3302      	adds	r3, #2
 80011e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	401a      	ands	r2, r3
 80011ea:	1c83      	adds	r3, r0, #2
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <GPIO_EXTILineConfig+0x80>)
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461c      	mov	r4, r3
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <GPIO_EXTILineConfig+0x80>)
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	b2db      	uxtb	r3, r3
 8001202:	3302      	adds	r3, #2
 8001204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001208:	79f9      	ldrb	r1, [r7, #7]
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	431a      	orrs	r2, r3
 8001218:	1ca3      	adds	r3, r4, #2
 800121a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bc90      	pop	{r4, r7}
 8001226:	4770      	bx	lr
 8001228:	40010000 	.word	0x40010000

0800122c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d007      	beq.n	8001264 <RCC_GetClocksFreq+0x38>
 8001254:	2b08      	cmp	r3, #8
 8001256:	d009      	beq.n	800126c <RCC_GetClocksFreq+0x40>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d133      	bne.n	80012c4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a47      	ldr	r2, [pc, #284]	; (800137c <RCC_GetClocksFreq+0x150>)
 8001260:	601a      	str	r2, [r3, #0]
      break;
 8001262:	e033      	b.n	80012cc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a45      	ldr	r2, [pc, #276]	; (800137c <RCC_GetClocksFreq+0x150>)
 8001268:	601a      	str	r2, [r3, #0]
      break;
 800126a:	e02f      	b.n	80012cc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800126c:	4b42      	ldr	r3, [pc, #264]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001274:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001276:	4b40      	ldr	r3, [pc, #256]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	0c9b      	lsrs	r3, r3, #18
 8001284:	3302      	adds	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <RCC_GetClocksFreq+0x154>)
 8001292:	fb02 f203 	mul.w	r2, r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800129a:	e017      	b.n	80012cc <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4a35      	ldr	r2, [pc, #212]	; (8001380 <RCC_GetClocksFreq+0x154>)
 80012ac:	fb02 f203 	mul.w	r2, r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
      break;
 80012b4:	e00a      	b.n	80012cc <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4a30      	ldr	r2, [pc, #192]	; (800137c <RCC_GetClocksFreq+0x150>)
 80012ba:	fb02 f203 	mul.w	r2, r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
      break;
 80012c2:	e003      	b.n	80012cc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a2d      	ldr	r2, [pc, #180]	; (800137c <RCC_GetClocksFreq+0x150>)
 80012c8:	601a      	str	r2, [r3, #0]
      break;
 80012ca:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80012dc:	4a29      	ldr	r2, [pc, #164]	; (8001384 <RCC_GetClocksFreq+0x158>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	40da      	lsrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012fc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <RCC_GetClocksFreq+0x158>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	40da      	lsrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001324:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	0adb      	lsrs	r3, r3, #11
 800132a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800132c:	4a15      	ldr	r2, [pc, #84]	; (8001384 <RCC_GetClocksFreq+0x158>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	40da      	lsrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <RCC_GetClocksFreq+0x14c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800134c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	0b9b      	lsrs	r3, r3, #14
 8001352:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <RCC_GetClocksFreq+0x15c>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	fbb2 f2f3 	udiv	r2, r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	007a1200 	.word	0x007a1200
 8001380:	003d0900 	.word	0x003d0900
 8001384:	20000000 	.word	0x20000000
 8001388:	20000010 	.word	0x20000010

0800138c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800139e:	4909      	ldr	r1, [pc, #36]	; (80013c4 <RCC_APB2PeriphClockCmd+0x38>)
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <RCC_APB2PeriphClockCmd+0x38>)
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80013aa:	e006      	b.n	80013ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013ac:	4905      	ldr	r1, [pc, #20]	; (80013c4 <RCC_APB2PeriphClockCmd+0x38>)
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <RCC_APB2PeriphClockCmd+0x38>)
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4013      	ands	r3, r2
 80013b8:	618b      	str	r3, [r1, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000

080013c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80013da:	4909      	ldr	r1, [pc, #36]	; (8001400 <RCC_APB1PeriphClockCmd+0x38>)
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <RCC_APB1PeriphClockCmd+0x38>)
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80013e6:	e006      	b.n	80013f6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80013e8:	4905      	ldr	r1, [pc, #20]	; (8001400 <RCC_APB1PeriphClockCmd+0x38>)
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <RCC_APB1PeriphClockCmd+0x38>)
 80013ec:	69da      	ldr	r2, [r3, #28]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	61cb      	str	r3, [r1, #28]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000

08001404 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a2e      	ldr	r2, [pc, #184]	; (80014d4 <TIM_TimeBaseInit+0xd0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d013      	beq.n	8001448 <TIM_TimeBaseInit+0x44>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <TIM_TimeBaseInit+0xd4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d00f      	beq.n	8001448 <TIM_TimeBaseInit+0x44>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142e:	d00b      	beq.n	8001448 <TIM_TimeBaseInit+0x44>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <TIM_TimeBaseInit+0xd8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d007      	beq.n	8001448 <TIM_TimeBaseInit+0x44>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <TIM_TimeBaseInit+0xdc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d003      	beq.n	8001448 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <TIM_TimeBaseInit+0xe0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d108      	bne.n	800145a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800144e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	885a      	ldrh	r2, [r3, #2]
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	4313      	orrs	r3, r2
 8001458:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <TIM_TimeBaseInit+0xe4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00c      	beq.n	800147c <TIM_TimeBaseInit+0x78>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <TIM_TimeBaseInit+0xe8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d008      	beq.n	800147c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001470:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	88da      	ldrh	r2, [r3, #6]
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	4313      	orrs	r3, r2
 800147a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	89fa      	ldrh	r2, [r7, #14]
 8001480:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	889a      	ldrh	r2, [r3, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	881a      	ldrh	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <TIM_TimeBaseInit+0xd0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00f      	beq.n	80014ba <TIM_TimeBaseInit+0xb6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <TIM_TimeBaseInit+0xd4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00b      	beq.n	80014ba <TIM_TimeBaseInit+0xb6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <TIM_TimeBaseInit+0xec>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <TIM_TimeBaseInit+0xb6>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <TIM_TimeBaseInit+0xf0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d003      	beq.n	80014ba <TIM_TimeBaseInit+0xb6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <TIM_TimeBaseInit+0xf4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d104      	bne.n	80014c4 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7a1b      	ldrb	r3, [r3, #8]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	829a      	strh	r2, [r3, #20]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40012c00 	.word	0x40012c00
 80014d8:	40013400 	.word	0x40013400
 80014dc:	40000400 	.word	0x40000400
 80014e0:	40000800 	.word	0x40000800
 80014e4:	40000c00 	.word	0x40000c00
 80014e8:	40001000 	.word	0x40001000
 80014ec:	40001400 	.word	0x40001400
 80014f0:	40014000 	.word	0x40014000
 80014f4:	40014400 	.word	0x40014400
 80014f8:	40014800 	.word	0x40014800

080014fc <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150a:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	721a      	strb	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001550:	e007      	b.n	8001562 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	801a      	strh	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	899b      	ldrh	r3, [r3, #12]
 8001586:	b29a      	uxth	r2, r3
 8001588:	887b      	ldrh	r3, [r7, #2]
 800158a:	4313      	orrs	r3, r2
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001592:	e009      	b.n	80015a8 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	899b      	ldrh	r3, [r3, #12]
 8001598:	b29a      	uxth	r2, r3
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	43db      	mvns	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4013      	ands	r3, r2
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	819a      	strh	r2, [r3, #12]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	81bb      	strh	r3, [r7, #12]
 80015c6:	2300      	movs	r3, #0
 80015c8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8a1b      	ldrh	r3, [r3, #16]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4013      	ands	r3, r2
 80015d4:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	899b      	ldrh	r3, [r3, #12]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	4013      	ands	r3, r2
 80015e0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80015e2:	89bb      	ldrh	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <TIM_GetITStatus+0x42>
 80015e8:	897b      	ldrh	r3, [r7, #10]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e001      	b.n	80015f8 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	43db      	mvns	r3, r3
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	821a      	strh	r2, [r3, #16]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	8a1b      	ldrh	r3, [r3, #16]
 800164a:	b29b      	uxth	r3, r3
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800164e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001650:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001654:	4013      	ands	r3, r2
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	88db      	ldrh	r3, [r3, #6]
 800165c:	461a      	mov	r2, r3
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	4313      	orrs	r3, r2
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	899b      	ldrh	r3, [r3, #12]
 8001670:	b29b      	uxth	r3, r3
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001676:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800167a:	4013      	ands	r3, r2
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	889a      	ldrh	r2, [r3, #4]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	891b      	ldrh	r3, [r3, #8]
 8001686:	4313      	orrs	r3, r2
 8001688:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800168e:	4313      	orrs	r3, r2
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	4313      	orrs	r3, r2
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8a9b      	ldrh	r3, [r3, #20]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80016aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ac:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80016b0:	4013      	ands	r3, r2
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	899b      	ldrh	r3, [r3, #12]
 80016b8:	461a      	mov	r2, r3
 80016ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016bc:	4313      	orrs	r3, r2
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80016c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fdad 	bl	800122c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4a2e      	ldr	r2, [pc, #184]	; (8001790 <USART_Init+0x16c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d102      	bne.n	80016e0 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80016de:	e001      	b.n	80016e4 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	899b      	ldrh	r3, [r3, #12]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da0c      	bge.n	800170a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80016f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009a      	lsls	r2, r3, #2
 80016fa:	441a      	add	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
 8001708:	e00b      	b.n	8001722 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800170a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	009a      	lsls	r2, r3, #2
 8001714:	441a      	add	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <USART_Init+0x170>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	2264      	movs	r2, #100	; 0x64
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	899b      	ldrh	r3, [r3, #12]
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21b      	sxth	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	da0c      	bge.n	8001766 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	3332      	adds	r3, #50	; 0x32
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <USART_Init+0x170>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001760:	4313      	orrs	r3, r2
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001764:	e00b      	b.n	800177e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	3332      	adds	r3, #50	; 0x32
 800176c:	4a09      	ldr	r2, [pc, #36]	; (8001794 <USART_Init+0x170>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177a:	4313      	orrs	r3, r2
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	811a      	strh	r2, [r3, #8]
}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40013800 	.word	0x40013800
 8001794:	51eb851f 	.word	0x51eb851f

08001798 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	8a1b      	ldrh	r3, [r3, #16]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	88db      	ldrh	r3, [r3, #6]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	821a      	strh	r2, [r3, #16]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	80da      	strh	r2, [r3, #6]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	899b      	ldrh	r3, [r3, #12]
 800182e:	b29b      	uxth	r3, r3
 8001830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800183a:	e007      	b.n	800184c <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	899b      	ldrh	r3, [r3, #12]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	819a      	strh	r2, [r3, #12]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001856:	b480      	push	{r7}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	807b      	strh	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	b2db      	uxtb	r3, r3
 8001882:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800188c:	2201      	movs	r2, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d103      	bne.n	80018a4 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	330c      	adds	r3, #12
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e009      	b.n	80018b8 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d103      	bne.n	80018b2 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3310      	adds	r3, #16
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e002      	b.n	80018b8 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3314      	adds	r3, #20
 80018b6:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	6811      	ldr	r1, [r2, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80018ca:	e006      	b.n	80018da <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	6811      	ldr	r1, [r2, #0]
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	43d2      	mvns	r2, r2
 80018d6:	400a      	ands	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	809a      	strh	r2, [r3, #4]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	889b      	ldrh	r3, [r3, #4]
 8001912:	b29b      	uxth	r3, r3
 8001914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001918:	b29b      	uxth	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	b2db      	uxtb	r3, r3
 8001948:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001952:	2201      	movs	r2, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	899b      	ldrh	r3, [r3, #12]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	4013      	ands	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e011      	b.n	8001996 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d107      	bne.n	8001988 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	8a1b      	ldrh	r3, [r3, #16]
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	4013      	ands	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e006      	b.n	8001996 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	8a9b      	ldrh	r3, [r3, #20]
 800198c:	b29b      	uxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	4013      	ands	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	b29b      	uxth	r3, r3
 800199c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800199e:	2201      	movs	r2, #1
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <USART_GetITStatus+0xa4>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	74fb      	strb	r3, [r7, #19]
 80019c6:	e001      	b.n	80019cc <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80019cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <BufferInit>:
 */
#include "buffer.h"

//typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
void BufferInit(__IO FIFO_TypeDef *buffer)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	buffer->count = 0;//0 bytes in buffer
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	809a      	strh	r2, [r3, #4]
	buffer->in = 0;//index points to start
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	801a      	strh	r2, [r3, #0]
	buffer->out = 0;//index points to start
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	805a      	strh	r2, [r3, #2]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <BufferPut>:

ErrorStatus BufferPut(__IO FIFO_TypeDef *buffer, uint8_t ch)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	if(buffer->count==USARTBUFFSIZE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	889b      	ldrh	r3, [r3, #4]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a12:	d101      	bne.n	8001a18 <BufferPut+0x1c>
		return ERROR;//buffer full
 8001a14:	2300      	movs	r3, #0
 8001a16:	e01c      	b.n	8001a52 <BufferPut+0x56>
	buffer->buff[buffer->in++]=ch;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	b291      	uxth	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	8011      	strh	r1, [r2, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	719a      	strb	r2, [r3, #6]
	buffer->count++;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	889b      	ldrh	r3, [r3, #4]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	809a      	strh	r2, [r3, #4]
	if(buffer->in==USARTBUFFSIZE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a48:	d102      	bne.n	8001a50 <BufferPut+0x54>
	{
		buffer->in=0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
	}//start from beginning
	return SUCCESS;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <BufferGet>:

ErrorStatus BufferGet(__IO FIFO_TypeDef *buffer, uint8_t *ch)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	if(buffer->count==0)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <BufferGet+0x18>
		return ERROR;//buffer empty
 8001a70:	2300      	movs	r3, #0
 8001a72:	e01e      	b.n	8001ab2 <BufferGet+0x56>
	*ch=buffer->buff[buffer->out++];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	b291      	uxth	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	8051      	strh	r1, [r2, #2]
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	799b      	ldrb	r3, [r3, #6]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
	buffer->count--;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	889b      	ldrh	r3, [r3, #4]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	809a      	strh	r2, [r3, #4]
	if(buffer->out==USARTBUFFSIZE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	885b      	ldrh	r3, [r3, #2]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aa8:	d102      	bne.n	8001ab0 <BufferGet+0x54>
	{
		buffer->out=0;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	805a      	strh	r2, [r3, #2]
	}//start from beginning
	return SUCCESS;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <BufferIsEmpty>:
ErrorStatus BufferIsEmpty(__IO FIFO_TypeDef buffer)
{
 8001abc:	b084      	sub	sp, #16
 8001abe:	b490      	push	{r4, r7}
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	f107 0408 	add.w	r4, r7, #8
 8001ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(buffer.count==0)
 8001aca:	89bb      	ldrh	r3, [r7, #12]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <BufferIsEmpty+0x1a>
		return SUCCESS;//buffer full
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <BufferIsEmpty+0x1c>
	return ERROR;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc90      	pop	{r4, r7}
 8001ade:	b004      	add	sp, #16
 8001ae0:	4770      	bx	lr
	...

08001ae4 <setupButton>:
 */

#include "button.h"

void setupButton()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Structure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001aea:	2101      	movs	r1, #1
 8001aec:	2008      	movs	r0, #8
 8001aee:	f7ff fc4d 	bl	800138c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8001af2:	2101      	movs	r1, #1
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fc49 	bl	800138c <RCC_APB2PeriphClockCmd>
	GPIO_Structure.GPIO_Pin = GPIO_Pin_5;
 8001afa:	2320      	movs	r3, #32
 8001afc:	81bb      	strh	r3, [r7, #12]
	GPIO_Structure.GPIO_Mode = GPIO_Mode_IPD;
 8001afe:	2328      	movs	r3, #40	; 0x28
 8001b00:	73fb      	strb	r3, [r7, #15]
	GPIO_Structure.GPIO_Speed = GPIO_Speed_2MHz;
 8001b02:	2302      	movs	r3, #2
 8001b04:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(GPIOB, &GPIO_Structure);
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4812      	ldr	r0, [pc, #72]	; (8001b58 <setupButton+0x74>)
 8001b0e:	f7ff fa77 	bl	8001000 <GPIO_Init>
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource5);
 8001b12:	2105      	movs	r1, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff fb47 	bl	80011a8 <GPIO_EXTILineConfig>
	EXTI_ClearITPendingBit(EXTI_Line5);
 8001b1a:	2020      	movs	r0, #32
 8001b1c:	f7ff fa62 	bl	8000fe4 <EXTI_ClearITPendingBit>

	//EXTI structure to init EXT
	EXTI_InitTypeDef EXTI_InitStructure;
	//Connect EXTI Line to Button Pin
	//Configure Button EXTI line
	EXTI_InitStructure.EXTI_Line = EXTI_Line5;
 8001b20:	2320      	movs	r3, #32
 8001b22:	607b      	str	r3, [r7, #4]
	//select interrupt mode
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001b24:	2300      	movs	r3, #0
 8001b26:	723b      	strb	r3, [r7, #8]
	//generate interrupt on rising edge
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	727b      	strb	r3, [r7, #9]
	//enable EXTI line
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	72bb      	strb	r3, [r7, #10]
	//send values to registers
	EXTI_Init(&EXTI_InitStructure);
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f9c0 	bl	8000eb8 <EXTI_Init>

	//configure NVIC
	//NVIC structure to set up NVIC controller
	NVIC_InitTypeDef NVIC_InitStructure;
	//select NVIC channel to configure
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8001b38:	2317      	movs	r3, #23
 8001b3a:	703b      	strb	r3, [r7, #0]
	//set priority to lowest
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001b3c:	230f      	movs	r3, #15
 8001b3e:	707b      	strb	r3, [r7, #1]
	//set subpriority to lowest
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001b40:	230f      	movs	r3, #15
 8001b42:	70bb      	strb	r3, [r7, #2]
	//enable IRQ channel
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	70fb      	strb	r3, [r7, #3]
	//update NVIC registers
	NVIC_Init(&NVIC_InitStructure);
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f952 	bl	8000df4 <NVIC_Init>


}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010c00 	.word	0x40010c00

08001b5c <setupNetwork>:
volatile uint8_t publicip[4] = {0,0,0,0};
volatile int updateclock = 1;
volatile int networkcheck = 0;

ErrorStatus setupNetwork()
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0b2      	sub	sp, #200	; 0xc8
 8001b60:	af00      	add	r7, sp, #0
	Usart1Init();
 8001b62:	f001 fd89 	bl	8003678 <Usart1Init>

	char c[100] = "";
 8001b66:	2300      	movs	r3, #0
 8001b68:	667b      	str	r3, [r7, #100]	; 0x64
 8001b6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b6e:	2260      	movs	r2, #96	; 0x60
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 ff8b 	bl	8005a8e <memset>
	sendLine("AT+RST\r\n"); // Reset ESP8266
 8001b78:	481e      	ldr	r0, [pc, #120]	; (8001bf4 <setupNetwork+0x98>)
 8001b7a:	f000 f961 	bl	8001e40 <sendLine>
	delay(6000);
 8001b7e:	f241 7070 	movw	r0, #6000	; 0x1770
 8001b82:	f003 fd63 	bl	800564c <delay>
	char flush[100];
	while(getStream(flush,sizeof(flush))==ERROR);
 8001b86:	bf00      	nop
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2164      	movs	r1, #100	; 0x64
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f995 	bl	8001ebc <getStream>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f7      	beq.n	8001b88 <setupNetwork+0x2c>

	sendLine("ATE0\r\n"); // disable Echo
 8001b98:	4817      	ldr	r0, [pc, #92]	; (8001bf8 <setupNetwork+0x9c>)
 8001b9a:	f000 f951 	bl	8001e40 <sendLine>
	delay(500);
 8001b9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba2:	f003 fd53 	bl	800564c <delay>
	do {
		getUntilch(c,'\n',sizeof(c));
 8001ba6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001baa:	2264      	movs	r2, #100	; 0x64
 8001bac:	210a      	movs	r1, #10
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f9ac 	bl	8001f0c <getUntilch>
		if(startsWith("FAIL",c)>0)
 8001bb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <setupNetwork+0xa0>)
 8001bbc:	f000 f892 	bl	8001ce4 <startsWith>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dd01      	ble.n	8001bca <setupNetwork+0x6e>
		{
			return ERROR;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e010      	b.n	8001bec <setupNetwork+0x90>
		}
	}while(startsWith("OK",c)<=0);
 8001bca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <setupNetwork+0xa4>)
 8001bd2:	f000 f887 	bl	8001ce4 <startsWith>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	dde4      	ble.n	8001ba6 <setupNetwork+0x4a>


	if (startNetwork()==ERROR) return ERROR;
 8001bdc:	f000 f812 	bl	8001c04 <startNetwork>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <setupNetwork+0x8e>
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <setupNetwork+0x90>

	return SUCCESS;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	37c8      	adds	r7, #200	; 0xc8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	080098e0 	.word	0x080098e0
 8001bf8:	080098ec 	.word	0x080098ec
 8001bfc:	080098f4 	.word	0x080098f4
 8001c00:	080098fc 	.word	0x080098fc

08001c04 <startNetwork>:

ErrorStatus startNetwork()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af02      	add	r7, sp, #8
	//if (!send_and_get_response_std("AT+CWJAP=\"FORA TEMER\",\"d1v1d1nha\"\r\n",'\n',"OK","FAIL",6000)) return ERROR;
	if (!send_and_get_response_std("AT+CWJAP=\"Xperia XZs\",\"senha1234\"\r\n",'\n',"OK","FAIL",6000)) return ERROR;
 8001c0a:	f241 7370 	movw	r3, #6000	; 0x1770
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <startNetwork+0x68>)
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <startNetwork+0x6c>)
 8001c14:	210a      	movs	r1, #10
 8001c16:	4817      	ldr	r0, [pc, #92]	; (8001c74 <startNetwork+0x70>)
 8001c18:	f000 f834 	bl	8001c84 <send_and_get_response_std>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <startNetwork+0x22>
 8001c22:	2300      	movs	r3, #0
 8001c24:	e01e      	b.n	8001c64 <startNetwork+0x60>

	if (!send_and_get_response_std("AT+CIPMUX=1\r\n",'\n',"OK","ERROR",500)) return ERROR;
 8001c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <startNetwork+0x74>)
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <startNetwork+0x6c>)
 8001c30:	210a      	movs	r1, #10
 8001c32:	4812      	ldr	r0, [pc, #72]	; (8001c7c <startNetwork+0x78>)
 8001c34:	f000 f826 	bl	8001c84 <send_and_get_response_std>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <startNetwork+0x3e>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e010      	b.n	8001c64 <startNetwork+0x60>

	if (!send_and_get_response_std("AT+CIPSERVER=1,333\r\n",'\n',"OK","ERROR",500)) return ERROR;
 8001c42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <startNetwork+0x74>)
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <startNetwork+0x6c>)
 8001c4c:	210a      	movs	r1, #10
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <startNetwork+0x7c>)
 8001c50:	f000 f818 	bl	8001c84 <send_and_get_response_std>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <startNetwork+0x5a>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e002      	b.n	8001c64 <startNetwork+0x60>

	getIPAddress();
 8001c5e:	f000 fac5 	bl	80021ec <getIPAddress>

	return SUCCESS;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	080098f4 	.word	0x080098f4
 8001c70:	080098fc 	.word	0x080098fc
 8001c74:	08009900 	.word	0x08009900
 8001c78:	08009924 	.word	0x08009924
 8001c7c:	0800992c 	.word	0x0800992c
 8001c80:	0800993c 	.word	0x0800993c

08001c84 <send_and_get_response_std>:

ErrorStatus send_and_get_response_std(char *sendstr, char limiterchar, char *successstr, char *failurestr, uint16_t delaytime)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b09e      	sub	sp, #120	; 0x78
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	460b      	mov	r3, r1
 8001c92:	72fb      	strb	r3, [r7, #11]
	char c[100];

	sendLine(sendstr);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f8d3 	bl	8001e40 <sendLine>
	delay(delaytime);
 8001c9a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fcd4 	bl	800564c <delay>
	do {
		getUntilch(c, limiterchar ,sizeof(c));
 8001ca4:	7af9      	ldrb	r1, [r7, #11]
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2264      	movs	r2, #100	; 0x64
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f92d 	bl	8001f0c <getUntilch>
		if(startsWith(failurestr,c)>0)
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f000 f813 	bl	8001ce4 <startsWith>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dd01      	ble.n	8001cc8 <send_and_get_response_std+0x44>
		{
			return ERROR;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e009      	b.n	8001cdc <send_and_get_response_std+0x58>
		}
	} while(startsWith(successstr,c)==0);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f808 	bl	8001ce4 <startsWith>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0e4      	beq.n	8001ca4 <send_and_get_response_std+0x20>

	return SUCCESS;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3778      	adds	r7, #120	; 0x78
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <startsWith>:


int startsWith(const char *pre, const char *str)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre), lenstr = strlen(str);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fa2e 	bl	8000150 <strlen>
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f7fe fa2a 	bl	8000150 <strlen>
 8001cfc:	60b8      	str	r0, [r7, #8]
	if(lenstr==0)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <startsWith+0x26>
	{
		return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	e010      	b.n	8001d2c <startsWith+0x48>
	}
	if(lenstr < lenpre)
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d201      	bcs.n	8001d16 <startsWith+0x32>
	{
		return 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e00a      	b.n	8001d2c <startsWith+0x48>
	}
	else
	{
		if (strncmp(pre, str, lenpre) == 0)
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	6839      	ldr	r1, [r7, #0]
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f003 fee4 	bl	8005ae8 <strncmp>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <startsWith+0x46>
		{
			return 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <startsWith+0x48>
		}
		else
		{
			return 0;
 8001d2a:	2300      	movs	r3, #0
		}
	}
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <getNTPTime>:


ErrorStatus getNTPTime()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0a8      	sub	sp, #160	; 0xa0
 8001d38:	af02      	add	r7, sp, #8
	char c[100] = "";
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d42:	2260      	movs	r2, #96	; 0x60
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fea1 	bl	8005a8e <memset>
	char packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets

	sendLine("AT+CIPCLOSE=4\r\n");
 8001d4c:	4837      	ldr	r0, [pc, #220]	; (8001e2c <getNTPTime+0xf8>)
 8001d4e:	f000 f877 	bl	8001e40 <sendLine>
	delay(100);
 8001d52:	2064      	movs	r0, #100	; 0x64
 8001d54:	f003 fc7a 	bl	800564c <delay>
	getUntilch(c,'\0',sizeof(c));
 8001d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5c:	2264      	movs	r2, #100	; 0x64
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f8d3 	bl	8001f0c <getUntilch>

	if (!send_and_get_response_std("AT+CIPSTART=4,\"UDP\",\"200.160.7.186\",123\r\n",'\n',"OK","ERROR",500)) return ERROR;
 8001d66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <getNTPTime+0xfc>)
 8001d6e:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <getNTPTime+0x100>)
 8001d70:	210a      	movs	r1, #10
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <getNTPTime+0x104>)
 8001d74:	f7ff ff86 	bl	8001c84 <send_and_get_response_std>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <getNTPTime+0x4e>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e04f      	b.n	8001e22 <getNTPTime+0xee>

	packetBuffer[0] = 0x1B;   // LI, Version, Mode
 8001d82:	231b      	movs	r3, #27
 8001d84:	703b      	strb	r3, [r7, #0]
	packetBuffer[1] = 0;     // Stratum, or type of clock
 8001d86:	2300      	movs	r3, #0
 8001d88:	707b      	strb	r3, [r7, #1]
	packetBuffer[2] = 6;     // Polling Interval
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	70bb      	strb	r3, [r7, #2]
	packetBuffer[3] = 0xE3;  // Peer Clock Precision
 8001d8e:	23e3      	movs	r3, #227	; 0xe3
 8001d90:	70fb      	strb	r3, [r7, #3]

	if (!send_and_get_response_std("AT+CIPSEND=4,48\r\n",'\n',"OK","ERROR",1000)) return ERROR;
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <getNTPTime+0xfc>)
 8001d9a:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <getNTPTime+0x100>)
 8001d9c:	210a      	movs	r1, #10
 8001d9e:	4827      	ldr	r0, [pc, #156]	; (8001e3c <getNTPTime+0x108>)
 8001da0:	f7ff ff70 	bl	8001c84 <send_and_get_response_std>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <getNTPTime+0x7a>
 8001daa:	2300      	movs	r3, #0
 8001dac:	e039      	b.n	8001e22 <getNTPTime+0xee>

	sendData(packetBuffer, sizeof(packetBuffer));
 8001dae:	463b      	mov	r3, r7
 8001db0:	2130      	movs	r1, #48	; 0x30
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f865 	bl	8001e82 <sendData>

	delay(1000);
 8001db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dbc:	f003 fc46 	bl	800564c <delay>
	int i;
	i = getUntilch(c,':',sizeof(c));
 8001dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc4:	2264      	movs	r2, #100	; 0x64
 8001dc6:	213a      	movs	r1, #58	; 0x3a
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f89f 	bl	8001f0c <getUntilch>
 8001dce:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(c[i-1]!=':') return ERROR;
 8001dd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001ddc:	4413      	add	r3, r2
 8001dde:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8001de2:	2b3a      	cmp	r3, #58	; 0x3a
 8001de4:	d001      	beq.n	8001dea <getNTPTime+0xb6>
 8001de6:	2300      	movs	r3, #0
 8001de8:	e01b      	b.n	8001e22 <getNTPTime+0xee>
	delay(500);
 8001dea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dee:	f003 fc2d 	bl	800564c <delay>
	getStream(packetBuffer, sizeof(packetBuffer));
 8001df2:	463b      	mov	r3, r7
 8001df4:	2130      	movs	r1, #48	; 0x30
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f860 	bl	8001ebc <getStream>

	getEpoch(packetBuffer);
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f8b2 	bl	8001f68 <getEpoch>

	if (!send_and_get_response_std("AT+CIPCLOSE=4\r\n",'\n',"OK","ERROR",500)) return ERROR;
 8001e04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <getNTPTime+0xfc>)
 8001e0c:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <getNTPTime+0x100>)
 8001e0e:	210a      	movs	r1, #10
 8001e10:	4806      	ldr	r0, [pc, #24]	; (8001e2c <getNTPTime+0xf8>)
 8001e12:	f7ff ff37 	bl	8001c84 <send_and_get_response_std>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <getNTPTime+0xec>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e000      	b.n	8001e22 <getNTPTime+0xee>

	return SUCCESS;
 8001e20:	2301      	movs	r3, #1


}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3798      	adds	r7, #152	; 0x98
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	08009954 	.word	0x08009954
 8001e30:	08009924 	.word	0x08009924
 8001e34:	080098fc 	.word	0x080098fc
 8001e38:	08009964 	.word	0x08009964
 8001e3c:	08009990 	.word	0x08009990

08001e40 <sendLine>:

void sendLine(char *data)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	int len = strlen(data);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7fe f981 	bl	8000150 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	60bb      	str	r3, [r7, #8]
	for (int n = 0; n < len; n++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e00c      	b.n	8001e72 <sendLine+0x32>
	{
		Usart1Put(*data++ & (uint16_t)0x01FF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fc73 	bl	800374c <Usart1Put>
		delay(1);
 8001e66:	2001      	movs	r0, #1
 8001e68:	f003 fbf0 	bl	800564c <delay>
	for (int n = 0; n < len; n++)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbee      	blt.n	8001e58 <sendLine+0x18>
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <sendData>:

void sendData(char *data, int len)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
	for (int n = 0; n < len; n++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e00c      	b.n	8001eac <sendData+0x2a>
	{
		Usart1Put(*data++ & (uint16_t)0x01FF);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fc56 	bl	800374c <Usart1Put>
		delay(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f003 fbd3 	bl	800564c <delay>
	for (int n = 0; n < len; n++)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbee      	blt.n	8001e92 <sendData+0x10>
	}
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <getStream>:

ErrorStatus getStream(char *data, int end)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
	uint8_t c;
	int n = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
	do {

		if(Usart1Get(&c)==ERROR) break;
 8001eca:	f107 030b 	add.w	r3, r7, #11
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f001 fc54 	bl	800377c <Usart1Get>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <getStream+0x38>

		*data++ = c;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	7afa      	ldrb	r2, [r7, #11]
 8001ee2:	701a      	strb	r2, [r3, #0]
		n++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
	} while (n<end);
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dbeb      	blt.n	8001eca <getStream+0xe>
 8001ef2:	e000      	b.n	8001ef6 <getStream+0x3a>
		if(Usart1Get(&c)==ERROR) break;
 8001ef4:	bf00      	nop

	if (n==end)
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d101      	bne.n	8001f02 <getStream+0x46>
	{
		return ERROR;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <getStream+0x48>
	}
	else
	{
		return SUCCESS;
 8001f02:	2301      	movs	r3, #1
	}
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <getUntilch>:

int getUntilch(char *data, char limiter, int end)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	460b      	mov	r3, r1
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	72fb      	strb	r3, [r7, #11]
	uint8_t c;
	int n = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
	do {

		Usart1Get(&c);
 8001f1e:	f107 0313 	add.w	r3, r7, #19
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 fc2a 	bl	800377c <Usart1Get>

		if(c!='\0')
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <getUntilch+0x44>
		{
			*data++ = (char)c;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	7cfa      	ldrb	r2, [r7, #19]
 8001f36:	701a      	strb	r2, [r3, #0]
			n++;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
		}
		else
		{
			break;
		}
	} while (c!=limiter && n<end);
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]
 8001f40:	7afa      	ldrb	r2, [r7, #11]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d005      	beq.n	8001f52 <getUntilch+0x46>
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dbe7      	blt.n	8001f1e <getUntilch+0x12>
 8001f4e:	e000      	b.n	8001f52 <getUntilch+0x46>
			break;
 8001f50:	bf00      	nop

	*data++ = '\0';
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	60fa      	str	r2, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]

	return n;
 8001f5c:	697b      	ldr	r3, [r7, #20]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <getEpoch>:

void getEpoch(char *packet)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	unsigned long highWord, lowWord;
	highWord = ((*(packet+40) << 8) | *(packet+41));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3328      	adds	r3, #40	; 0x28
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	3229      	adds	r2, #41	; 0x29
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
	lowWord = ((*(packet+42) << 8) | *(packet+43));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	332a      	adds	r3, #42	; 0x2a
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	322b      	adds	r2, #43	; 0x2b
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
	clockepoch = (highWord << 16 | lowWord) - 2208988800 + TIMEZONE_SHIFT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	041a      	lsls	r2, r3, #16
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <getEpoch+0x48>)
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <getEpoch+0x4c>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	7c556560 	.word	0x7c556560
 8001fb4:	200006c8 	.word	0x200006c8

08001fb8 <checkNetwork>:

ErrorStatus checkNetwork()
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b09a      	sub	sp, #104	; 0x68
 8001fbc:	af00      	add	r7, sp, #0
	char c[100];

	sendLine("AT+CWJAP?\r\n");
 8001fbe:	4817      	ldr	r0, [pc, #92]	; (800201c <checkNetwork+0x64>)
 8001fc0:	f7ff ff3e 	bl	8001e40 <sendLine>
	delay(500);
 8001fc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc8:	f003 fb40 	bl	800564c <delay>
	do {
		getUntilch(c,'\n',sizeof(c));
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2264      	movs	r2, #100	; 0x64
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff9a 	bl	8001f0c <getUntilch>
		if(startsWith("No AP",c)>0)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4810      	ldr	r0, [pc, #64]	; (8002020 <checkNetwork+0x68>)
 8001fde:	f7ff fe81 	bl	8001ce4 <startsWith>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	dd01      	ble.n	8001fec <checkNetwork+0x34>
		{
			return ERROR;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e012      	b.n	8002012 <checkNetwork+0x5a>
		}
		else if(startsWith("+CWJAP:",c)>0)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <checkNetwork+0x6c>)
 8001ff2:	f7ff fe77 	bl	8001ce4 <startsWith>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	dd01      	ble.n	8002000 <checkNetwork+0x48>
		{
			return SUCCESS;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e008      	b.n	8002012 <checkNetwork+0x5a>
		}
	}while(startsWith("OK",c)==0);
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <checkNetwork+0x70>)
 8002006:	f7ff fe6d 	bl	8001ce4 <startsWith>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0dd      	beq.n	8001fcc <checkNetwork+0x14>

	return ERROR;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3768      	adds	r7, #104	; 0x68
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	080099a4 	.word	0x080099a4
 8002020:	080099b0 	.word	0x080099b0
 8002024:	080099b8 	.word	0x080099b8
 8002028:	080098fc 	.word	0x080098fc

0800202c <sendWebPage>:

ErrorStatus sendWebPage(char pageno, char conn_number)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	f6ad 3d2c 	subw	sp, sp, #2860	; 0xb2c
 8002032:	af00      	add	r7, sp, #0
 8002034:	4602      	mov	r2, r0
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	460a      	mov	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
	char msg[30];
	char httpheader[300];
	char htmlpage[2500];
	int htmlpage_contentlength;
	if(pageno==1)
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d112      	bne.n	800206e <sendWebPage+0x42>
	{
		sprintf(htmlpage,
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	4a63      	ldr	r2, [pc, #396]	; (80021dc <sendWebPage+0x1b0>)
 800204e:	4618      	mov	r0, r3
 8002050:	4611      	mov	r1, r2
 8002052:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 8002056:	461a      	mov	r2, r3
 8002058:	f003 fd0e 	bl	8005a78 <memcpy>
				"<input type=\"hidden\" name = \"null\" value=\"OK\">"
				"<input type=\"submit\">"
				"</form>"
				"</body>"
				"</html>");
		htmlpage_contentlength = strlen(htmlpage);
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe f875 	bl	8000150 <strlen>
 8002066:	4603      	mov	r3, r0
 8002068:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 800206c:	e015      	b.n	800209a <sendWebPage+0x6e>
	}
	else if(pageno==2)
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d111      	bne.n	800209a <sendWebPage+0x6e>
	{
		sprintf(htmlpage,
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4a59      	ldr	r2, [pc, #356]	; (80021e0 <sendWebPage+0x1b4>)
 800207c:	4618      	mov	r0, r3
 800207e:	4611      	mov	r1, r2
 8002080:	f240 63c2 	movw	r3, #1730	; 0x6c2
 8002084:	461a      	mov	r2, r3
 8002086:	f003 fcf7 	bl	8005a78 <memcpy>
				"<h1>RepHome</h1>"
				"<p>Message sent!</p>"
				"<a href=\".\">Back</a>"
				"</body>"
				"</html>");
		htmlpage_contentlength = strlen(htmlpage);
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f85e 	bl	8000150 <strlen>
 8002094:	4603      	mov	r3, r0
 8002096:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
	}

	sprintf(httpheader,
 800209a:	f607 13cc 	addw	r3, r7, #2508	; 0x9cc
 800209e:	f8d7 2b24 	ldr.w	r2, [r7, #2852]	; 0xb24
 80020a2:	4950      	ldr	r1, [pc, #320]	; (80021e4 <sendWebPage+0x1b8>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fcfb 	bl	8005aa0 <sprintf>
			"Content-Type: text/html\r\n"
			"Content-Length: %d\r\n"
			"Connection: keep-alive\r\n\r\n"
			,htmlpage_contentlength);

	int countcommands = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 3b20 	str.w	r3, [r7, #2848]	; 0xb20
	for(int i=0;i<strlen(httpheader);i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80020b6:	e019      	b.n	80020ec <sendWebPage+0xc0>
	{
		if(*(httpheader+i)=='\r' || *(httpheader+i)=='\n') countcommands++;
 80020b8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80020bc:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 80020c0:	4413      	add	r3, r2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b0d      	cmp	r3, #13
 80020c6:	d007      	beq.n	80020d8 <sendWebPage+0xac>
 80020c8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80020cc:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b0a      	cmp	r3, #10
 80020d6:	d104      	bne.n	80020e2 <sendWebPage+0xb6>
 80020d8:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 80020dc:	3301      	adds	r3, #1
 80020de:	f8c7 3b20 	str.w	r3, [r7, #2848]	; 0xb20
	for(int i=0;i<strlen(httpheader);i++)
 80020e2:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80020e6:	3301      	adds	r3, #1
 80020e8:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80020ec:	f607 13cc 	addw	r3, r7, #2508	; 0x9cc
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f82d 	bl	8000150 <strlen>
 80020f6:	4602      	mov	r2, r0
 80020f8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8db      	bhi.n	80020b8 <sendWebPage+0x8c>
	}

	sprintf(msg,"AT+CIPSEND=%c,%d\r\n",conn_number,strlen(httpheader));
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	781c      	ldrb	r4, [r3, #0]
 8002104:	f607 13cc 	addw	r3, r7, #2508	; 0x9cc
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f821 	bl	8000150 <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	f607 20f8 	addw	r0, r7, #2808	; 0xaf8
 8002114:	4622      	mov	r2, r4
 8002116:	4934      	ldr	r1, [pc, #208]	; (80021e8 <sendWebPage+0x1bc>)
 8002118:	f003 fcc2 	bl	8005aa0 <sprintf>
	sendLine(msg);
 800211c:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe8d 	bl	8001e40 <sendLine>
	delay(200);
 8002126:	20c8      	movs	r0, #200	; 0xc8
 8002128:	f003 fa90 	bl	800564c <delay>
	sendLine(httpheader);
 800212c:	f607 13cc 	addw	r3, r7, #2508	; 0x9cc
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fe85 	bl	8001e40 <sendLine>
	delay(200);
 8002136:	20c8      	movs	r0, #200	; 0xc8
 8002138:	f003 fa88 	bl	800564c <delay>

	countcommands = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3b20 	str.w	r3, [r7, #2848]	; 0xb20
	for(int i=0;i<strlen(htmlpage);i++)
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
 8002148:	e019      	b.n	800217e <sendWebPage+0x152>
	{
		if(*(htmlpage+i)=='\r' || *(htmlpage+i)=='\n') countcommands++;
 800214a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800214e:	f107 0208 	add.w	r2, r7, #8
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b0d      	cmp	r3, #13
 8002158:	d007      	beq.n	800216a <sendWebPage+0x13e>
 800215a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800215e:	f107 0208 	add.w	r2, r7, #8
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b0a      	cmp	r3, #10
 8002168:	d104      	bne.n	8002174 <sendWebPage+0x148>
 800216a:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800216e:	3301      	adds	r3, #1
 8002170:	f8c7 3b20 	str.w	r3, [r7, #2848]	; 0xb20
	for(int i=0;i<strlen(htmlpage);i++)
 8002174:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8002178:	3301      	adds	r3, #1
 800217a:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4618      	mov	r0, r3
 8002184:	f7fd ffe4 	bl	8000150 <strlen>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800218e:	429a      	cmp	r2, r3
 8002190:	d8db      	bhi.n	800214a <sendWebPage+0x11e>
	}

	sprintf(msg,"AT+CIPSEND=%c,%d\r\n",conn_number,strlen(htmlpage));
 8002192:	1dbb      	adds	r3, r7, #6
 8002194:	781c      	ldrb	r4, [r3, #0]
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4618      	mov	r0, r3
 800219c:	f7fd ffd8 	bl	8000150 <strlen>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f607 20f8 	addw	r0, r7, #2808	; 0xaf8
 80021a6:	4622      	mov	r2, r4
 80021a8:	490f      	ldr	r1, [pc, #60]	; (80021e8 <sendWebPage+0x1bc>)
 80021aa:	f003 fc79 	bl	8005aa0 <sprintf>
	sendLine(msg);
 80021ae:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fe44 	bl	8001e40 <sendLine>
	delay(200);
 80021b8:	20c8      	movs	r0, #200	; 0xc8
 80021ba:	f003 fa47 	bl	800564c <delay>
	sendLine(htmlpage);
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fe3c 	bl	8001e40 <sendLine>
	delay(200);
 80021c8:	20c8      	movs	r0, #200	; 0xc8
 80021ca:	f003 fa3f 	bl	800564c <delay>

	//	sprintf(msg,"AT+CIPCLOSE=%c\r\n",conn_number);
	//	sendLine(msg);
	//	delay(200);

	return SUCCESS;
 80021ce:	2301      	movs	r3, #1

}
 80021d0:	4618      	mov	r0, r3
 80021d2:	f607 372c 	addw	r7, r7, #2860	; 0xb2c
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	bf00      	nop
 80021dc:	080099c0 	.word	0x080099c0
 80021e0:	0800a188 	.word	0x0800a188
 80021e4:	0800a84c 	.word	0x0800a84c
 80021e8:	0800a8a8 	.word	0x0800a8a8

080021ec <getIPAddress>:


void getIPAddress()
{
 80021ec:	b5b0      	push	{r4, r5, r7, lr}
 80021ee:	b0f0      	sub	sp, #448	; 0x1c0
 80021f0:	af00      	add	r7, sp, #0
	char c[300] = "";
 80021f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	3304      	adds	r3, #4
 80021fc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fc43 	bl	8005a8e <memset>

	sendLine("AT+CIPSTA?\r\n");
 8002208:	48b3      	ldr	r0, [pc, #716]	; (80024d8 <getIPAddress+0x2ec>)
 800220a:	f7ff fe19 	bl	8001e40 <sendLine>
	delay(100);
 800220e:	2064      	movs	r0, #100	; 0x64
 8002210:	f003 fa1c 	bl	800564c <delay>

	getUntilch(c,'"',sizeof(c));
 8002214:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002218:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800221c:	2122      	movs	r1, #34	; 0x22
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fe74 	bl	8001f0c <getUntilch>
	if(startsWith("+CIPSTA:ip:",c)>0)
 8002224:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002228:	4619      	mov	r1, r3
 800222a:	48ac      	ldr	r0, [pc, #688]	; (80024dc <getIPAddress+0x2f0>)
 800222c:	f7ff fd5a 	bl	8001ce4 <startsWith>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f340 81a7 	ble.w	8002586 <getIPAddress+0x39a>
	{
		int l = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		getUntilch(c,'.',sizeof(c));
 800223e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002242:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002246:	212e      	movs	r1, #46	; 0x2e
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fe5f 	bl	8001f0c <getUntilch>
		int lc = strlen(c);
 800224e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002252:	4618      	mov	r0, r3
 8002254:	f7fd ff7c 	bl	8000150 <strlen>
 8002258:	4603      	mov	r3, r0
 800225a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		for(int i = 0; i < lc-1; i++)
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002264:	e047      	b.n	80022f6 <getIPAddress+0x10a>
		{
			localip[l] += (uint8_t) asciiToint(c[lc-2-i])*pow(10,i);
 8002266:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800226a:	1e9a      	subs	r2, r3, #2
 800226c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fbfb 	bl	8002a74 <asciiToint>
 800227e:	4603      	mov	r3, r0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f8be 	bl	8000404 <__aeabi_i2d>
 8002288:	4604      	mov	r4, r0
 800228a:	460d      	mov	r5, r1
 800228c:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002290:	f7fe f8b8 	bl	8000404 <__aeabi_i2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	4990      	ldr	r1, [pc, #576]	; (80024e0 <getIPAddress+0x2f4>)
 800229e:	f006 fae9 	bl	8008874 <pow>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f7fe f911 	bl	80004d0 <__aeabi_dmul>
 80022ae:	4603      	mov	r3, r0
 80022b0:	460c      	mov	r4, r1
 80022b2:	4625      	mov	r5, r4
 80022b4:	461c      	mov	r4, r3
 80022b6:	4a8b      	ldr	r2, [pc, #556]	; (80024e4 <getIPAddress+0x2f8>)
 80022b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f89e 	bl	8000404 <__aeabi_i2d>
 80022c8:	4622      	mov	r2, r4
 80022ca:	462b      	mov	r3, r5
 80022cc:	f7fd ff4e 	bl	800016c <__adddf3>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	4618      	mov	r0, r3
 80022d6:	4621      	mov	r1, r4
 80022d8:	f7fe fbd2 	bl	8000a80 <__aeabi_d2uiz>
 80022dc:	4603      	mov	r3, r0
 80022de:	b2d9      	uxtb	r1, r3
 80022e0:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <getIPAddress+0x2f8>)
 80022e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80022e6:	4413      	add	r3, r2
 80022e8:	460a      	mov	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < lc-1; i++)
 80022ec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80022f0:	3301      	adds	r3, #1
 80022f2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022f6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002300:	429a      	cmp	r2, r3
 8002302:	dcb0      	bgt.n	8002266 <getIPAddress+0x7a>
		}
		l++;
 8002304:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002308:	3301      	adds	r3, #1
 800230a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		getUntilch(c,'.',sizeof(c));
 800230e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002316:	212e      	movs	r1, #46	; 0x2e
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fdf7 	bl	8001f0c <getUntilch>
		lc = strlen(c);
 800231e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002322:	4618      	mov	r0, r3
 8002324:	f7fd ff14 	bl	8000150 <strlen>
 8002328:	4603      	mov	r3, r0
 800232a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		for(int i = 0; i < lc-1; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002334:	e047      	b.n	80023c6 <getIPAddress+0x1da>
		{
			localip[l] += (uint8_t) asciiToint(c[lc-2-i])*pow(10,i);
 8002336:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800233a:	1e9a      	subs	r2, r3, #2
 800233c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fb93 	bl	8002a74 <asciiToint>
 800234e:	4603      	mov	r3, r0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f856 	bl	8000404 <__aeabi_i2d>
 8002358:	4604      	mov	r4, r0
 800235a:	460d      	mov	r5, r1
 800235c:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8002360:	f7fe f850 	bl	8000404 <__aeabi_i2d>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	495c      	ldr	r1, [pc, #368]	; (80024e0 <getIPAddress+0x2f4>)
 800236e:	f006 fa81 	bl	8008874 <pow>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4620      	mov	r0, r4
 8002378:	4629      	mov	r1, r5
 800237a:	f7fe f8a9 	bl	80004d0 <__aeabi_dmul>
 800237e:	4603      	mov	r3, r0
 8002380:	460c      	mov	r4, r1
 8002382:	4625      	mov	r5, r4
 8002384:	461c      	mov	r4, r3
 8002386:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <getIPAddress+0x2f8>)
 8002388:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800238c:	4413      	add	r3, r2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f836 	bl	8000404 <__aeabi_i2d>
 8002398:	4622      	mov	r2, r4
 800239a:	462b      	mov	r3, r5
 800239c:	f7fd fee6 	bl	800016c <__adddf3>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	4618      	mov	r0, r3
 80023a6:	4621      	mov	r1, r4
 80023a8:	f7fe fb6a 	bl	8000a80 <__aeabi_d2uiz>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b2d9      	uxtb	r1, r3
 80023b0:	4a4c      	ldr	r2, [pc, #304]	; (80024e4 <getIPAddress+0x2f8>)
 80023b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80023b6:	4413      	add	r3, r2
 80023b8:	460a      	mov	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < lc-1; i++)
 80023bc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80023c0:	3301      	adds	r3, #1
 80023c2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80023c6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80023ca:	1e5a      	subs	r2, r3, #1
 80023cc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dcb0      	bgt.n	8002336 <getIPAddress+0x14a>
		}
		l++;
 80023d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80023d8:	3301      	adds	r3, #1
 80023da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		getUntilch(c,'.',sizeof(c));
 80023de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	212e      	movs	r1, #46	; 0x2e
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fd8f 	bl	8001f0c <getUntilch>
		lc = strlen(c);
 80023ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fd feac 	bl	8000150 <strlen>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		for(int i = 0; i < lc-1; i++)
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002404:	e047      	b.n	8002496 <getIPAddress+0x2aa>
		{
			localip[l] += (uint8_t) asciiToint(c[lc-2-i])*pow(10,i);
 8002406:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800240a:	1e9a      	subs	r2, r3, #2
 800240c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fb2b 	bl	8002a74 <asciiToint>
 800241e:	4603      	mov	r3, r0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd ffee 	bl	8000404 <__aeabi_i2d>
 8002428:	4604      	mov	r4, r0
 800242a:	460d      	mov	r5, r1
 800242c:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8002430:	f7fd ffe8 	bl	8000404 <__aeabi_i2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	f04f 0000 	mov.w	r0, #0
 800243c:	4928      	ldr	r1, [pc, #160]	; (80024e0 <getIPAddress+0x2f4>)
 800243e:	f006 fa19 	bl	8008874 <pow>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4620      	mov	r0, r4
 8002448:	4629      	mov	r1, r5
 800244a:	f7fe f841 	bl	80004d0 <__aeabi_dmul>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	4625      	mov	r5, r4
 8002454:	461c      	mov	r4, r3
 8002456:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <getIPAddress+0x2f8>)
 8002458:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd ffce 	bl	8000404 <__aeabi_i2d>
 8002468:	4622      	mov	r2, r4
 800246a:	462b      	mov	r3, r5
 800246c:	f7fd fe7e 	bl	800016c <__adddf3>
 8002470:	4603      	mov	r3, r0
 8002472:	460c      	mov	r4, r1
 8002474:	4618      	mov	r0, r3
 8002476:	4621      	mov	r1, r4
 8002478:	f7fe fb02 	bl	8000a80 <__aeabi_d2uiz>
 800247c:	4603      	mov	r3, r0
 800247e:	b2d9      	uxtb	r1, r3
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <getIPAddress+0x2f8>)
 8002482:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002486:	4413      	add	r3, r2
 8002488:	460a      	mov	r2, r1
 800248a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < lc-1; i++)
 800248c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002490:	3301      	adds	r3, #1
 8002492:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002496:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dcb0      	bgt.n	8002406 <getIPAddress+0x21a>
		}
		l++;
 80024a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80024a8:	3301      	adds	r3, #1
 80024aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		getUntilch(c,'"',sizeof(c));
 80024ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024b6:	2122      	movs	r1, #34	; 0x22
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fd27 	bl	8001f0c <getUntilch>
		lc = strlen(c);
 80024be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fd fe44 	bl	8000150 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		for(int i = 0; i < lc-1; i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80024d4:	e050      	b.n	8002578 <getIPAddress+0x38c>
 80024d6:	bf00      	nop
 80024d8:	0800a8bc 	.word	0x0800a8bc
 80024dc:	0800a8cc 	.word	0x0800a8cc
 80024e0:	40240000 	.word	0x40240000
 80024e4:	200006bc 	.word	0x200006bc
		{
			localip[l] += (uint8_t) asciiToint(c[lc-2-i])*pow(10,i);
 80024e8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80024ec:	1e9a      	subs	r2, r3, #2
 80024ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 faba 	bl	8002a74 <asciiToint>
 8002500:	4603      	mov	r3, r0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ff7d 	bl	8000404 <__aeabi_i2d>
 800250a:	4604      	mov	r4, r0
 800250c:	460d      	mov	r5, r1
 800250e:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8002512:	f7fd ff77 	bl	8000404 <__aeabi_i2d>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	f04f 0000 	mov.w	r0, #0
 800251e:	49e9      	ldr	r1, [pc, #932]	; (80028c4 <getIPAddress+0x6d8>)
 8002520:	f006 f9a8 	bl	8008874 <pow>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fd ffd0 	bl	80004d0 <__aeabi_dmul>
 8002530:	4603      	mov	r3, r0
 8002532:	460c      	mov	r4, r1
 8002534:	4625      	mov	r5, r4
 8002536:	461c      	mov	r4, r3
 8002538:	4ae3      	ldr	r2, [pc, #908]	; (80028c8 <getIPAddress+0x6dc>)
 800253a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ff5d 	bl	8000404 <__aeabi_i2d>
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f7fd fe0d 	bl	800016c <__adddf3>
 8002552:	4603      	mov	r3, r0
 8002554:	460c      	mov	r4, r1
 8002556:	4618      	mov	r0, r3
 8002558:	4621      	mov	r1, r4
 800255a:	f7fe fa91 	bl	8000a80 <__aeabi_d2uiz>
 800255e:	4603      	mov	r3, r0
 8002560:	b2d9      	uxtb	r1, r3
 8002562:	4ad9      	ldr	r2, [pc, #868]	; (80028c8 <getIPAddress+0x6dc>)
 8002564:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002568:	4413      	add	r3, r2
 800256a:	460a      	mov	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < lc-1; i++)
 800256e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002572:	3301      	adds	r3, #1
 8002574:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002578:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800257c:	1e5a      	subs	r2, r3, #1
 800257e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002582:	429a      	cmp	r2, r3
 8002584:	dcb0      	bgt.n	80024e8 <getIPAddress+0x2fc>
		}
	}

	sendLine("AT+CIPSTART=4,\"TCP\",\"api.ipify.org\",80\r\n");
 8002586:	48d1      	ldr	r0, [pc, #836]	; (80028cc <getIPAddress+0x6e0>)
 8002588:	f7ff fc5a 	bl	8001e40 <sendLine>
	delay(500);
 800258c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002590:	f003 f85c 	bl	800564c <delay>
	do {
		getUntilch(c,'\n',sizeof(c));
 8002594:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002598:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800259c:	210a      	movs	r1, #10
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fcb4 	bl	8001f0c <getUntilch>
		if(startsWith("ERROR",c)>0)
 80025a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025a8:	4619      	mov	r1, r3
 80025aa:	48c9      	ldr	r0, [pc, #804]	; (80028d0 <getIPAddress+0x6e4>)
 80025ac:	f7ff fb9a 	bl	8001ce4 <startsWith>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f300 8252 	bgt.w	8002a5c <getIPAddress+0x870>
		{
			return;
		}
	} while(startsWith("OK",c)==0);
 80025b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025bc:	4619      	mov	r1, r3
 80025be:	48c5      	ldr	r0, [pc, #788]	; (80028d4 <getIPAddress+0x6e8>)
 80025c0:	f7ff fb90 	bl	8001ce4 <startsWith>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0e4      	beq.n	8002594 <getIPAddress+0x3a8>

	char get_publicip_cmd[] = "GET / HTTP/1.0\r\nHost: api.ipify.org\r\n\r\n";
 80025ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025ce:	4ac2      	ldr	r2, [pc, #776]	; (80028d8 <getIPAddress+0x6ec>)
 80025d0:	461c      	mov	r4, r3
 80025d2:	4615      	mov	r5, r2
 80025d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025e0:	e884 0003 	stmia.w	r4, {r0, r1}

	char cmd[50];
	sprintf(cmd,"AT+CIPSEND=4,%d\r\n",strlen(get_publicip_cmd));
 80025e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd fdb1 	bl	8000150 <strlen>
 80025ee:	4602      	mov	r2, r0
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	49ba      	ldr	r1, [pc, #744]	; (80028dc <getIPAddress+0x6f0>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fa53 	bl	8005aa0 <sprintf>

	sendLine(cmd);
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fc1f 	bl	8001e40 <sendLine>
	delay(200);
 8002602:	20c8      	movs	r0, #200	; 0xc8
 8002604:	f003 f822 	bl	800564c <delay>
	do {
		getUntilch(c,'\n',sizeof(c));
 8002608:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800260c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002610:	210a      	movs	r1, #10
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fc7a 	bl	8001f0c <getUntilch>
		if(startsWith("ERROR",c)>0)
 8002618:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800261c:	4619      	mov	r1, r3
 800261e:	48ac      	ldr	r0, [pc, #688]	; (80028d0 <getIPAddress+0x6e4>)
 8002620:	f7ff fb60 	bl	8001ce4 <startsWith>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f300 821a 	bgt.w	8002a60 <getIPAddress+0x874>
		{
			return;
		}
	}while(startsWith("OK",c)==0);
 800262c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002630:	4619      	mov	r1, r3
 8002632:	48a8      	ldr	r0, [pc, #672]	; (80028d4 <getIPAddress+0x6e8>)
 8002634:	f7ff fb56 	bl	8001ce4 <startsWith>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0e4      	beq.n	8002608 <getIPAddress+0x41c>

	sendLine(get_publicip_cmd);
 800263e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fbfc 	bl	8001e40 <sendLine>

	delay(1000);
 8002648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264c:	f002 fffe 	bl	800564c <delay>

	do
	{
		getUntilch(c,'\n',sizeof(c));
 8002650:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002658:	210a      	movs	r1, #10
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fc56 	bl	8001f0c <getUntilch>
	}while(startsWith("Content-Length",c)==0);
 8002660:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002664:	4619      	mov	r1, r3
 8002666:	489e      	ldr	r0, [pc, #632]	; (80028e0 <getIPAddress+0x6f4>)
 8002668:	f7ff fb3c 	bl	8001ce4 <startsWith>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ee      	beq.n	8002650 <getIPAddress+0x464>

	int contentlength = asciiToint(c[strlen(c)-3]) + asciiToint(c[strlen(c)-4])*10;
 8002672:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fd6a 	bl	8000150 <strlen>
 800267c:	4603      	mov	r3, r0
 800267e:	3b03      	subs	r3, #3
 8002680:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f9f4 	bl	8002a74 <asciiToint>
 800268c:	4604      	mov	r4, r0
 800268e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fd5c 	bl	8000150 <strlen>
 8002698:	4603      	mov	r3, r0
 800269a:	3b04      	subs	r3, #4
 800269c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f9e6 	bl	8002a74 <asciiToint>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4423      	add	r3, r4
 80026b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

	getUntilch(c,'\n',sizeof(c));
 80026b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026c0:	210a      	movs	r1, #10
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fc22 	bl	8001f0c <getUntilch>
	getUntilch(c,'\n',sizeof(c));
 80026c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d0:	210a      	movs	r1, #10
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fc1a 	bl	8001f0c <getUntilch>
	getUntilch(c,'.',sizeof(c));
 80026d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026dc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026e0:	212e      	movs	r1, #46	; 0x2e
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fc12 	bl	8001f0c <getUntilch>

	int lc = strlen(c);
 80026e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fd2f 	bl	8000150 <strlen>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	int l = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	for(int i = 0; i < lc-1; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002704:	e047      	b.n	8002796 <getIPAddress+0x5aa>
	{
		publicip[l] += (uint8_t) asciiToint(c[lc-2-i])*pow(10,i);
 8002706:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800270a:	1e9a      	subs	r2, r3, #2
 800270c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f9ab 	bl	8002a74 <asciiToint>
 800271e:	4603      	mov	r3, r0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd fe6e 	bl	8000404 <__aeabi_i2d>
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
 800272c:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8002730:	f7fd fe68 	bl	8000404 <__aeabi_i2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	4961      	ldr	r1, [pc, #388]	; (80028c4 <getIPAddress+0x6d8>)
 800273e:	f006 f899 	bl	8008874 <pow>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4620      	mov	r0, r4
 8002748:	4629      	mov	r1, r5
 800274a:	f7fd fec1 	bl	80004d0 <__aeabi_dmul>
 800274e:	4603      	mov	r3, r0
 8002750:	460c      	mov	r4, r1
 8002752:	4625      	mov	r5, r4
 8002754:	461c      	mov	r4, r3
 8002756:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <getIPAddress+0x6f8>)
 8002758:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fe4e 	bl	8000404 <__aeabi_i2d>
 8002768:	4622      	mov	r2, r4
 800276a:	462b      	mov	r3, r5
 800276c:	f7fd fcfe 	bl	800016c <__adddf3>
 8002770:	4603      	mov	r3, r0
 8002772:	460c      	mov	r4, r1
 8002774:	4618      	mov	r0, r3
 8002776:	4621      	mov	r1, r4
 8002778:	f7fe f982 	bl	8000a80 <__aeabi_d2uiz>
 800277c:	4603      	mov	r3, r0
 800277e:	b2d9      	uxtb	r1, r3
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <getIPAddress+0x6f8>)
 8002782:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002786:	4413      	add	r3, r2
 8002788:	460a      	mov	r2, r1
 800278a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < lc-1; i++)
 800278c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002790:	3301      	adds	r3, #1
 8002792:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002796:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dcb0      	bgt.n	8002706 <getIPAddress+0x51a>
	}
	l++;
 80027a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80027a8:	3301      	adds	r3, #1
 80027aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	contentlength -= lc;
 80027ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80027b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	getUntilch(c,'.',sizeof(c));
 80027bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027c4:	212e      	movs	r1, #46	; 0x2e
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fba0 	bl	8001f0c <getUntilch>
	lc = strlen(c);
 80027cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fcbd 	bl	8000150 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	for(int i = 0; i < lc-1; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80027e2:	e047      	b.n	8002874 <getIPAddress+0x688>
	{
		publicip[l] += (uint8_t) asciiToint(c[lc-2-i])*pow(10,i);
 80027e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80027e8:	1e9a      	subs	r2, r3, #2
 80027ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f93c 	bl	8002a74 <asciiToint>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fdff 	bl	8000404 <__aeabi_i2d>
 8002806:	4604      	mov	r4, r0
 8002808:	460d      	mov	r5, r1
 800280a:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 800280e:	f7fd fdf9 	bl	8000404 <__aeabi_i2d>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	492a      	ldr	r1, [pc, #168]	; (80028c4 <getIPAddress+0x6d8>)
 800281c:	f006 f82a 	bl	8008874 <pow>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	f7fd fe52 	bl	80004d0 <__aeabi_dmul>
 800282c:	4603      	mov	r3, r0
 800282e:	460c      	mov	r4, r1
 8002830:	4625      	mov	r5, r4
 8002832:	461c      	mov	r4, r3
 8002834:	4a2b      	ldr	r2, [pc, #172]	; (80028e4 <getIPAddress+0x6f8>)
 8002836:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fddf 	bl	8000404 <__aeabi_i2d>
 8002846:	4622      	mov	r2, r4
 8002848:	462b      	mov	r3, r5
 800284a:	f7fd fc8f 	bl	800016c <__adddf3>
 800284e:	4603      	mov	r3, r0
 8002850:	460c      	mov	r4, r1
 8002852:	4618      	mov	r0, r3
 8002854:	4621      	mov	r1, r4
 8002856:	f7fe f913 	bl	8000a80 <__aeabi_d2uiz>
 800285a:	4603      	mov	r3, r0
 800285c:	b2d9      	uxtb	r1, r3
 800285e:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <getIPAddress+0x6f8>)
 8002860:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002864:	4413      	add	r3, r2
 8002866:	460a      	mov	r2, r1
 8002868:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < lc-1; i++)
 800286a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800286e:	3301      	adds	r3, #1
 8002870:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002874:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800287e:	429a      	cmp	r2, r3
 8002880:	dcb0      	bgt.n	80027e4 <getIPAddress+0x5f8>
	}
	l++;
 8002882:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002886:	3301      	adds	r3, #1
 8002888:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	contentlength -= lc;
 800288c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002890:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	getUntilch(c,'.',sizeof(c));
 800289a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800289e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028a2:	212e      	movs	r1, #46	; 0x2e
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fb31 	bl	8001f0c <getUntilch>
	lc = strlen(c);
 80028aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fc4e 	bl	8000150 <strlen>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	for(int i = 0; i < lc-1; i++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028c0:	e05a      	b.n	8002978 <getIPAddress+0x78c>
 80028c2:	bf00      	nop
 80028c4:	40240000 	.word	0x40240000
 80028c8:	200006bc 	.word	0x200006bc
 80028cc:	0800a8d8 	.word	0x0800a8d8
 80028d0:	08009924 	.word	0x08009924
 80028d4:	080098fc 	.word	0x080098fc
 80028d8:	0800a928 	.word	0x0800a928
 80028dc:	0800a904 	.word	0x0800a904
 80028e0:	0800a918 	.word	0x0800a918
 80028e4:	200006c0 	.word	0x200006c0
	{
		publicip[l] += (uint8_t) asciiToint(c[lc-2-i])*pow(10,i);
 80028e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028ec:	1e9a      	subs	r2, r3, #2
 80028ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028f8:	5cd3      	ldrb	r3, [r2, r3]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f8ba 	bl	8002a74 <asciiToint>
 8002900:	4603      	mov	r3, r0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fd7d 	bl	8000404 <__aeabi_i2d>
 800290a:	4604      	mov	r4, r0
 800290c:	460d      	mov	r5, r1
 800290e:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8002912:	f7fd fd77 	bl	8000404 <__aeabi_i2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	f04f 0000 	mov.w	r0, #0
 800291e:	4953      	ldr	r1, [pc, #332]	; (8002a6c <getIPAddress+0x880>)
 8002920:	f005 ffa8 	bl	8008874 <pow>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fdd0 	bl	80004d0 <__aeabi_dmul>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	4625      	mov	r5, r4
 8002936:	461c      	mov	r4, r3
 8002938:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <getIPAddress+0x884>)
 800293a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fd5d 	bl	8000404 <__aeabi_i2d>
 800294a:	4622      	mov	r2, r4
 800294c:	462b      	mov	r3, r5
 800294e:	f7fd fc0d 	bl	800016c <__adddf3>
 8002952:	4603      	mov	r3, r0
 8002954:	460c      	mov	r4, r1
 8002956:	4618      	mov	r0, r3
 8002958:	4621      	mov	r1, r4
 800295a:	f7fe f891 	bl	8000a80 <__aeabi_d2uiz>
 800295e:	4603      	mov	r3, r0
 8002960:	b2d9      	uxtb	r1, r3
 8002962:	4a43      	ldr	r2, [pc, #268]	; (8002a70 <getIPAddress+0x884>)
 8002964:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002968:	4413      	add	r3, r2
 800296a:	460a      	mov	r2, r1
 800296c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < lc-1; i++)
 800296e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002972:	3301      	adds	r3, #1
 8002974:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002978:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002982:	429a      	cmp	r2, r3
 8002984:	dcb0      	bgt.n	80028e8 <getIPAddress+0x6fc>
	}
	l++;
 8002986:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800298a:	3301      	adds	r3, #1
 800298c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	contentlength -= lc;
 8002990:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002994:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	getUntilch(c,'\n',sizeof(c));
 800299e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029a6:	210a      	movs	r1, #10
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff faaf 	bl	8001f0c <getUntilch>
	lc = contentlength;
 80029ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80029b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	for(int i = 0; i < lc; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029bc:	e047      	b.n	8002a4e <getIPAddress+0x862>
	{
		publicip[l] += (uint8_t) asciiToint(c[lc-1-i])*pow(10,i);
 80029be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029c2:	1e5a      	subs	r2, r3, #1
 80029c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f84f 	bl	8002a74 <asciiToint>
 80029d6:	4603      	mov	r3, r0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fd12 	bl	8000404 <__aeabi_i2d>
 80029e0:	4604      	mov	r4, r0
 80029e2:	460d      	mov	r5, r1
 80029e4:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80029e8:	f7fd fd0c 	bl	8000404 <__aeabi_i2d>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	f04f 0000 	mov.w	r0, #0
 80029f4:	491d      	ldr	r1, [pc, #116]	; (8002a6c <getIPAddress+0x880>)
 80029f6:	f005 ff3d 	bl	8008874 <pow>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4620      	mov	r0, r4
 8002a00:	4629      	mov	r1, r5
 8002a02:	f7fd fd65 	bl	80004d0 <__aeabi_dmul>
 8002a06:	4603      	mov	r3, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	4625      	mov	r5, r4
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <getIPAddress+0x884>)
 8002a10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fcf2 	bl	8000404 <__aeabi_i2d>
 8002a20:	4622      	mov	r2, r4
 8002a22:	462b      	mov	r3, r5
 8002a24:	f7fd fba2 	bl	800016c <__adddf3>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	4621      	mov	r1, r4
 8002a30:	f7fe f826 	bl	8000a80 <__aeabi_d2uiz>
 8002a34:	4603      	mov	r3, r0
 8002a36:	b2d9      	uxtb	r1, r3
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <getIPAddress+0x884>)
 8002a3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002a3e:	4413      	add	r3, r2
 8002a40:	460a      	mov	r2, r1
 8002a42:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < lc; i++)
 8002a44:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a4e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002a52:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a56:	429a      	cmp	r2, r3
 8002a58:	dbb1      	blt.n	80029be <getIPAddress+0x7d2>
 8002a5a:	e002      	b.n	8002a62 <getIPAddress+0x876>
			return;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <getIPAddress+0x876>
			return;
 8002a60:	bf00      	nop
	}
}
 8002a62:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40240000 	.word	0x40240000
 8002a70:	200006c0 	.word	0x200006c0

08002a74 <asciiToint>:


int asciiToint(char asciichar)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
	return (int)((asciichar)-48);
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	3b30      	subs	r3, #48	; 0x30
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <monitorNetwork>:


void monitorNetwork()
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0e0      	sub	sp, #384	; 0x180
 8002a90:	af00      	add	r7, sp, #0
	char c[300] = ""; 	// char buffer for WebServer handling
 8002a92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f002 fff3 	bl	8005a8e <memset>
	char connection_number;		// connection number for incoming request to WebServer

	if(updateclock) if (getNTPTime()==SUCCESS) updateclock = 0;
 8002aa8:	4b87      	ldr	r3, [pc, #540]	; (8002cc8 <monitorNetwork+0x23c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <monitorNetwork+0x34>
 8002ab0:	f7ff f940 	bl	8001d34 <getNTPTime>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <monitorNetwork+0x34>
 8002aba:	4b83      	ldr	r3, [pc, #524]	; (8002cc8 <monitorNetwork+0x23c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

	if(networkcheck)
 8002ac0:	4b82      	ldr	r3, [pc, #520]	; (8002ccc <monitorNetwork+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <monitorNetwork+0x5e>
	{
		if (checkNetwork()==ERROR)
 8002ac8:	f7ff fa76 	bl	8001fb8 <checkNetwork>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d108      	bne.n	8002ae4 <monitorNetwork+0x58>
		{
			if(startNetwork()==SUCCESS) networkcheck = 0;
 8002ad2:	f7ff f897 	bl	8001c04 <startNetwork>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <monitorNetwork+0x5e>
 8002adc:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <monitorNetwork+0x240>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e002      	b.n	8002aea <monitorNetwork+0x5e>
		}
		else
		{
			networkcheck = 0;
 8002ae4:	4b79      	ldr	r3, [pc, #484]	; (8002ccc <monitorNetwork+0x240>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
		}
	}

	delay(100);
 8002aea:	2064      	movs	r0, #100	; 0x64
 8002aec:	f002 fdae 	bl	800564c <delay>
	getUntilch(c,'\n',sizeof(c));
 8002af0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002af4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002af8:	210a      	movs	r1, #10
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fa06 	bl	8001f0c <getUntilch>

	if(startsWith("WIFI DISCONNECT",c)>0) while(startNetwork()==ERROR);
 8002b00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b04:	4619      	mov	r1, r3
 8002b06:	4872      	ldr	r0, [pc, #456]	; (8002cd0 <monitorNetwork+0x244>)
 8002b08:	f7ff f8ec 	bl	8001ce4 <startsWith>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	dd05      	ble.n	8002b1e <monitorNetwork+0x92>
 8002b12:	bf00      	nop
 8002b14:	f7ff f876 	bl	8001c04 <startNetwork>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0fa      	beq.n	8002b14 <monitorNetwork+0x88>

	if(startsWith("+IPD",(c))>0)
 8002b1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b22:	4619      	mov	r1, r3
 8002b24:	486b      	ldr	r0, [pc, #428]	; (8002cd4 <monitorNetwork+0x248>)
 8002b26:	f7ff f8dd 	bl	8001ce4 <startsWith>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f340 80c5 	ble.w	8002cbc <monitorNetwork+0x230>
	{
		connection_number = *(c+5);
 8002b32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b36:	795b      	ldrb	r3, [r3, #5]
 8002b38:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		delay(200);
 8002b3c:	20c8      	movs	r0, #200	; 0xc8
 8002b3e:	f002 fd85 	bl	800564c <delay>
		int findframestart = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		while(c[findframestart]!=':')
 8002b48:	e004      	b.n	8002b54 <monitorNetwork+0xc8>
		{
			findframestart++;
 8002b4a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		while(c[findframestart]!=':')
 8002b54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b58:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b3a      	cmp	r3, #58	; 0x3a
 8002b62:	d1f2      	bne.n	8002b4a <monitorNetwork+0xbe>
		}
		findframestart++;
 8002b64:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		if(startsWith("GET",c+findframestart)>0)
 8002b6e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b76:	4413      	add	r3, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4857      	ldr	r0, [pc, #348]	; (8002cd8 <monitorNetwork+0x24c>)
 8002b7c:	f7ff f8b2 	bl	8001ce4 <startsWith>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	dd06      	ble.n	8002b94 <monitorNetwork+0x108>
		{
			sendWebPage(1,connection_number);
 8002b86:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7ff fa4d 	bl	800202c <sendWebPage>

			sendWebPage(2,connection_number);
		}
	}

}
 8002b92:	e093      	b.n	8002cbc <monitorNetwork+0x230>
		else if(startsWith("POST",c+findframestart)>0)
 8002b94:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	484e      	ldr	r0, [pc, #312]	; (8002cdc <monitorNetwork+0x250>)
 8002ba2:	f7ff f89f 	bl	8001ce4 <startsWith>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f340 8087 	ble.w	8002cbc <monitorNetwork+0x230>
				getUntilch(c,'\n',sizeof(c));
 8002bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bb6:	210a      	movs	r1, #10
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f9a7 	bl	8001f0c <getUntilch>
			} while(startsWith("nameid=",c)==0);
 8002bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4846      	ldr	r0, [pc, #280]	; (8002ce0 <monitorNetwork+0x254>)
 8002bc6:	f7ff f88d 	bl	8001ce4 <startsWith>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ee      	beq.n	8002bae <monitorNetwork+0x122>
			int i = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			while (c[i+7]!='&')
 8002bd6:	e010      	b.n	8002bfa <monitorNetwork+0x16e>
				urimessage[i] = c[i+7];
 8002bd8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002bdc:	3307      	adds	r3, #7
 8002bde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002be2:	5cd1      	ldrb	r1, [r2, r3]
 8002be4:	1d3a      	adds	r2, r7, #4
 8002be6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002bea:	4413      	add	r3, r2
 8002bec:	460a      	mov	r2, r1
 8002bee:	701a      	strb	r2, [r3, #0]
				i++;
 8002bf0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			while (c[i+7]!='&')
 8002bfa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002bfe:	3307      	adds	r3, #7
 8002c00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	2b26      	cmp	r3, #38	; 0x26
 8002c08:	d1e6      	bne.n	8002bd8 <monitorNetwork+0x14c>
			urimessage[i++] = ':';
 8002c0a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c14:	1d3a      	adds	r2, r7, #4
 8002c16:	213a      	movs	r1, #58	; 0x3a
 8002c18:	54d1      	strb	r1, [r2, r3]
			urimessage[i++] = ' ';
 8002c1a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c24:	1d3a      	adds	r2, r7, #4
 8002c26:	2120      	movs	r1, #32
 8002c28:	54d1      	strb	r1, [r2, r3]
			while (c[i+14]!='&')
 8002c2a:	e010      	b.n	8002c4e <monitorNetwork+0x1c2>
				urimessage[i] = c[i+14];
 8002c2c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c30:	330e      	adds	r3, #14
 8002c32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c36:	5cd1      	ldrb	r1, [r2, r3]
 8002c38:	1d3a      	adds	r2, r7, #4
 8002c3a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c3e:	4413      	add	r3, r2
 8002c40:	460a      	mov	r2, r1
 8002c42:	701a      	strb	r2, [r3, #0]
				i++;
 8002c44:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			while (c[i+14]!='&')
 8002c4e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c52:	330e      	adds	r3, #14
 8002c54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	2b26      	cmp	r3, #38	; 0x26
 8002c5c:	d1e6      	bne.n	8002c2c <monitorNetwork+0x1a0>
			urimessage[i++] = '\0';
 8002c5e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c68:	1d3a      	adds	r2, r7, #4
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	54d1      	strb	r1, [r2, r3]
			urldecode2(messages[currentmessage],urimessage);
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <monitorNetwork+0x258>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	4413      	add	r3, r2
 8002c78:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <monitorNetwork+0x25c>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	1d3a      	adds	r2, r7, #4
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f837 	bl	8002cf4 <urldecode2>
			currentscreen = currentmessage+1;
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <monitorNetwork+0x258>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <monitorNetwork+0x260>)
 8002c8e:	6013      	str	r3, [r2, #0]
			if(currentmessage==(MESSAGE_SCREENS-1))
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <monitorNetwork+0x258>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d103      	bne.n	8002ca0 <monitorNetwork+0x214>
				currentmessage = 0;
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <monitorNetwork+0x258>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e004      	b.n	8002caa <monitorNetwork+0x21e>
				currentmessage++;
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <monitorNetwork+0x258>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a0f      	ldr	r2, [pc, #60]	; (8002ce4 <monitorNetwork+0x258>)
 8002ca8:	6013      	str	r3, [r2, #0]
			switchscreen = 0;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <monitorNetwork+0x264>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
			sendWebPage(2,connection_number);
 8002cb0:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f7ff f9b8 	bl	800202c <sendWebPage>
}
 8002cbc:	bf00      	nop
 8002cbe:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000014 	.word	0x20000014
 8002ccc:	200006c4 	.word	0x200006c4
 8002cd0:	0800a950 	.word	0x0800a950
 8002cd4:	0800a960 	.word	0x0800a960
 8002cd8:	0800a968 	.word	0x0800a968
 8002cdc:	0800a96c 	.word	0x0800a96c
 8002ce0:	0800a974 	.word	0x0800a974
 8002ce4:	200006e0 	.word	0x200006e0
 8002ce8:	20000b30 	.word	0x20000b30
 8002cec:	200006dc 	.word	0x200006dc
 8002cf0:	200006d8 	.word	0x200006d8

08002cf4 <urldecode2>:

void urldecode2(volatile char *dst, const char *src)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
	char a, b;
	while (*src)
 8002cfe:	e068      	b.n	8002dd2 <urldecode2+0xde>
	{
		if ((*src == '%') &&
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b25      	cmp	r3, #37	; 0x25
 8002d06:	d14f      	bne.n	8002da8 <urldecode2+0xb4>
				((a = src[1]) && (b = src[2])) &&
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	73fb      	strb	r3, [r7, #15]
		if ((*src == '%') &&
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d049      	beq.n	8002da8 <urldecode2+0xb4>
				((a = src[1]) && (b = src[2])) &&
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	73bb      	strb	r3, [r7, #14]
 8002d1a:	7bbb      	ldrb	r3, [r7, #14]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d043      	beq.n	8002da8 <urldecode2+0xb4>
				(isxdigit(a) && isxdigit(b)))
 8002d20:	f002 fe8a 	bl	8005a38 <__locale_ctype_ptr>
 8002d24:	4602      	mov	r2, r0
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	f003 0344 	and.w	r3, r3, #68	; 0x44
				((a = src[1]) && (b = src[2])) &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d038      	beq.n	8002da8 <urldecode2+0xb4>
				(isxdigit(a) && isxdigit(b)))
 8002d36:	f002 fe7f 	bl	8005a38 <__locale_ctype_ptr>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d02d      	beq.n	8002da8 <urldecode2+0xb4>
		{
			if (a >= 'a')
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b60      	cmp	r3, #96	; 0x60
 8002d50:	d902      	bls.n	8002d58 <urldecode2+0x64>
				a -= 'a'-'A';
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	3b20      	subs	r3, #32
 8002d56:	73fb      	strb	r3, [r7, #15]
			if (a >= 'A')
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d903      	bls.n	8002d66 <urldecode2+0x72>
				a -= ('A' - 10);
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	3b37      	subs	r3, #55	; 0x37
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e002      	b.n	8002d6c <urldecode2+0x78>
			else
				a -= '0';
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	3b30      	subs	r3, #48	; 0x30
 8002d6a:	73fb      	strb	r3, [r7, #15]
			if (b >= 'a')
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	2b60      	cmp	r3, #96	; 0x60
 8002d70:	d902      	bls.n	8002d78 <urldecode2+0x84>
				b -= 'a'-'A';
 8002d72:	7bbb      	ldrb	r3, [r7, #14]
 8002d74:	3b20      	subs	r3, #32
 8002d76:	73bb      	strb	r3, [r7, #14]
			if (b >= 'A')
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d903      	bls.n	8002d86 <urldecode2+0x92>
				b -= ('A' - 10);
 8002d7e:	7bbb      	ldrb	r3, [r7, #14]
 8002d80:	3b37      	subs	r3, #55	; 0x37
 8002d82:	73bb      	strb	r3, [r7, #14]
 8002d84:	e002      	b.n	8002d8c <urldecode2+0x98>
			else
				b -= '0';
 8002d86:	7bbb      	ldrb	r3, [r7, #14]
 8002d88:	3b30      	subs	r3, #48	; 0x30
 8002d8a:	73bb      	strb	r3, [r7, #14]
			*dst++ = 16*a+b;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d1      	uxtb	r1, r2
 8002d98:	7bba      	ldrb	r2, [r7, #14]
 8002d9a:	440a      	add	r2, r1
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]
			src+=3;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	3303      	adds	r3, #3
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	e014      	b.n	8002dd2 <urldecode2+0xde>
		}
		else if (*src == '+')
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b2b      	cmp	r3, #43	; 0x2b
 8002dae:	d108      	bne.n	8002dc2 <urldecode2+0xce>
		{
			*dst++ = ' ';
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	701a      	strb	r2, [r3, #0]
			src++;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	e007      	b.n	8002dd2 <urldecode2+0xde>
		}
		else
		{
			*dst++ = *src++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	1c51      	adds	r1, r2, #1
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	701a      	strb	r2, [r3, #0]
	while (*src)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d192      	bne.n	8002d00 <urldecode2+0xc>
		}
	}
	*dst++ = '\0';
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <setupDisplay>:
volatile int currentmessage = 0;
// Messages
volatile char messages[MESSAGE_SCREENS][MESSAGE_LENGTH];

void setupDisplay()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, u8g2_gpio_and_delay_stm32);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <setupDisplay+0x30>)
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <setupDisplay+0x34>)
 8002df4:	490b      	ldr	r1, [pc, #44]	; (8002e24 <setupDisplay+0x38>)
 8002df6:	480c      	ldr	r0, [pc, #48]	; (8002e28 <setupDisplay+0x3c>)
 8002df8:	f000 fd86 	bl	8003908 <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this
 8002dfc:	480a      	ldr	r0, [pc, #40]	; (8002e28 <setupDisplay+0x3c>)
 8002dfe:	f002 fae7 	bl	80053d0 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8002e02:	2100      	movs	r1, #0
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <setupDisplay+0x3c>)
 8002e06:	f002 faf2 	bl	80053ee <u8x8_SetPowerSave>
	u8g2_ClearBuffer(&u8g2);
 8002e0a:	4807      	ldr	r0, [pc, #28]	; (8002e28 <setupDisplay+0x3c>)
 8002e0c:	f000 fcea 	bl	80037e4 <u8g2_ClearBuffer>
	u8g2_SetContrast(&u8g2, 250);
 8002e10:	21fa      	movs	r1, #250	; 0xfa
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <setupDisplay+0x3c>)
 8002e14:	f002 fafc 	bl	8005410 <u8x8_SetContrast>
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08004dc9 	.word	0x08004dc9
 8002e24:	0800ce1c 	.word	0x0800ce1c
 8002e28:	20000c34 	.word	0x20000c34

08002e2c <u8g2_gpio_and_delay_stm32>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	72fb      	strb	r3, [r7, #11]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct;

	switch(msg){
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	3b28      	subs	r3, #40	; 0x28
 8002e42:	2b23      	cmp	r3, #35	; 0x23
 8002e44:	f200 80d1 	bhi.w	8002fea <u8g2_gpio_and_delay_stm32+0x1be>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <u8g2_gpio_and_delay_stm32+0x24>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002ee1 	.word	0x08002ee1
 8002e54:	08002f4b 	.word	0x08002f4b
 8002e58:	08002fef 	.word	0x08002fef
 8002e5c:	08002fef 	.word	0x08002fef
 8002e60:	08002feb 	.word	0x08002feb
 8002e64:	08002feb 	.word	0x08002feb
 8002e68:	08002feb 	.word	0x08002feb
 8002e6c:	08002feb 	.word	0x08002feb
 8002e70:	08002feb 	.word	0x08002feb
 8002e74:	08002feb 	.word	0x08002feb
 8002e78:	08002feb 	.word	0x08002feb
 8002e7c:	08002feb 	.word	0x08002feb
 8002e80:	08002feb 	.word	0x08002feb
 8002e84:	08002feb 	.word	0x08002feb
 8002e88:	08002feb 	.word	0x08002feb
 8002e8c:	08002feb 	.word	0x08002feb
 8002e90:	08002feb 	.word	0x08002feb
 8002e94:	08002feb 	.word	0x08002feb
 8002e98:	08002feb 	.word	0x08002feb
 8002e9c:	08002feb 	.word	0x08002feb
 8002ea0:	08002feb 	.word	0x08002feb
 8002ea4:	08002feb 	.word	0x08002feb
 8002ea8:	08002feb 	.word	0x08002feb
 8002eac:	08002feb 	.word	0x08002feb
 8002eb0:	08002f55 	.word	0x08002f55
 8002eb4:	08002f73 	.word	0x08002f73
 8002eb8:	08002feb 	.word	0x08002feb
 8002ebc:	08002feb 	.word	0x08002feb
 8002ec0:	08002feb 	.word	0x08002feb
 8002ec4:	08002feb 	.word	0x08002feb
 8002ec8:	08002feb 	.word	0x08002feb
 8002ecc:	08002feb 	.word	0x08002feb
 8002ed0:	08002feb 	.word	0x08002feb
 8002ed4:	08002f91 	.word	0x08002f91
 8002ed8:	08002faf 	.word	0x08002faf
 8002edc:	08002fcd 	.word	0x08002fcd
	//Initialize SPI peripheral
	case U8X8_MSG_GPIO_AND_DELAY_INIT:

		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	2004      	movs	r0, #4
 8002ee4:	f7fe fa52 	bl	800138c <RCC_APB2PeriphClockCmd>
		/* SPI SCK, MOSI GPIO pin configuration  */
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_7;
 8002ee8:	23a0      	movs	r3, #160	; 0xa0
 8002eea:	82bb      	strh	r3, [r7, #20]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002eec:	2310      	movs	r3, #16
 8002eee:	75fb      	strb	r3, [r7, #23]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	75bb      	strb	r3, [r7, #22]
		GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4840      	ldr	r0, [pc, #256]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002efc:	f7fe f880 	bl	8001000 <GPIO_Init>

		//RES Pin
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8002f00:	2301      	movs	r3, #1
 8002f02:	82bb      	strh	r3, [r7, #20]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002f04:	2310      	movs	r3, #16
 8002f06:	75fb      	strb	r3, [r7, #23]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	75bb      	strb	r3, [r7, #22]
		GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	483a      	ldr	r0, [pc, #232]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f14:	f7fe f874 	bl	8001000 <GPIO_Init>

		//DC Pin
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	82bb      	strh	r3, [r7, #20]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002f1c:	2310      	movs	r3, #16
 8002f1e:	75fb      	strb	r3, [r7, #23]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002f20:	2303      	movs	r3, #3
 8002f22:	75bb      	strb	r3, [r7, #22]
		GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4834      	ldr	r0, [pc, #208]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f2c:	f7fe f868 	bl	8001000 <GPIO_Init>

		//CS Pin
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
 8002f30:	2304      	movs	r3, #4
 8002f32:	82bb      	strh	r3, [r7, #20]
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002f34:	2310      	movs	r3, #16
 8002f36:	75fb      	strb	r3, [r7, #23]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	75bb      	strb	r3, [r7, #22]
		GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4619      	mov	r1, r3
 8002f42:	482e      	ldr	r0, [pc, #184]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f44:	f7fe f85c 	bl	8001000 <GPIO_Init>

		break;
 8002f48:	e052      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>

		//Function which implements a delay, arg_int contains the amount of ms
	case U8X8_MSG_DELAY_MILLI:
		//delay_system_ticks((uint32_t)arg_int);
		delay((uint32_t)arg_int);
 8002f4a:	7abb      	ldrb	r3, [r7, #10]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f002 fb7d 	bl	800564c <delay>
		break;
 8002f52:	e04d      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
	case U8X8_MSG_DELAY_100NANO:

		break;
		//Function to define the logic level of the clockline
	case U8X8_MSG_GPIO_SPI_CLOCK:
		if (arg_int) GPIO_WriteBit(GPIOA, GPIO_Pin_7, SET);
 8002f54:	7abb      	ldrb	r3, [r7, #10]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <u8g2_gpio_and_delay_stm32+0x13a>
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	4827      	ldr	r0, [pc, #156]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f60:	f7fe f90a 	bl	8001178 <GPIO_WriteBit>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_7, RESET);

		break;
 8002f64:	e044      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_7, RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	4824      	ldr	r0, [pc, #144]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f6c:	f7fe f904 	bl	8001178 <GPIO_WriteBit>
		break;
 8002f70:	e03e      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		//Function to define the logic level of the data line to the display
	case U8X8_MSG_GPIO_SPI_DATA:
		if (arg_int) GPIO_WriteBit(GPIOA, GPIO_Pin_5, SET);
 8002f72:	7abb      	ldrb	r3, [r7, #10]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <u8g2_gpio_and_delay_stm32+0x158>
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	481f      	ldr	r0, [pc, #124]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f7e:	f7fe f8fb 	bl	8001178 <GPIO_WriteBit>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_5, RESET);

		break;
 8002f82:	e035      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_5, RESET);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2120      	movs	r1, #32
 8002f88:	481c      	ldr	r0, [pc, #112]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f8a:	f7fe f8f5 	bl	8001178 <GPIO_WriteBit>
		break;
 8002f8e:	e02f      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		// Function to define the logic level of the CS line
	case U8X8_MSG_GPIO_CS:
		if (arg_int) GPIO_WriteBit(GPIOA, GPIO_Pin_2, SET);
 8002f90:	7abb      	ldrb	r3, [r7, #10]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <u8g2_gpio_and_delay_stm32+0x176>
 8002f96:	2201      	movs	r2, #1
 8002f98:	2104      	movs	r1, #4
 8002f9a:	4818      	ldr	r0, [pc, #96]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002f9c:	f7fe f8ec 	bl	8001178 <GPIO_WriteBit>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_2, RESET);

		break;
 8002fa0:	e026      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_2, RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	4815      	ldr	r0, [pc, #84]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002fa8:	f7fe f8e6 	bl	8001178 <GPIO_WriteBit>
		break;
 8002fac:	e020      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		//Function to define the logic level of the Data/ Command line
	case U8X8_MSG_GPIO_DC:
		if (arg_int) GPIO_WriteBit(GPIOA, GPIO_Pin_1, SET);
 8002fae:	7abb      	ldrb	r3, [r7, #10]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <u8g2_gpio_and_delay_stm32+0x194>
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4810      	ldr	r0, [pc, #64]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002fba:	f7fe f8dd 	bl	8001178 <GPIO_WriteBit>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_1, RESET);

		break;
 8002fbe:	e017      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_1, RESET);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	480d      	ldr	r0, [pc, #52]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002fc6:	f7fe f8d7 	bl	8001178 <GPIO_WriteBit>
		break;
 8002fca:	e011      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		//Function to define the logic level of the RESET line
	case U8X8_MSG_GPIO_RESET:
		if (arg_int) GPIO_WriteBit(GPIOA, GPIO_Pin_0, SET);
 8002fcc:	7abb      	ldrb	r3, [r7, #10]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <u8g2_gpio_and_delay_stm32+0x1b2>
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4809      	ldr	r0, [pc, #36]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002fd8:	f7fe f8ce 	bl	8001178 <GPIO_WriteBit>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_0, RESET);

		break;
 8002fdc:	e008      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
		else GPIO_WriteBit(GPIOA, GPIO_Pin_0, RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <u8g2_gpio_and_delay_stm32+0x1d0>)
 8002fe4:	f7fe f8c8 	bl	8001178 <GPIO_WriteBit>
		break;
 8002fe8:	e002      	b.n	8002ff0 <u8g2_gpio_and_delay_stm32+0x1c4>
	default:
		return 0; //A message was received which is not implemented, return 0 to indicate an error
 8002fea:	2300      	movs	r3, #0
 8002fec:	e001      	b.n	8002ff2 <u8g2_gpio_and_delay_stm32+0x1c6>
		break;
 8002fee:	bf00      	nop
	}

	return 1; // command processed successfully.
 8002ff0:	2301      	movs	r3, #1
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40010800 	.word	0x40010800

08003000 <showScreen>:

void showScreen(int screen)
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b0a4      	sub	sp, #144	; 0x90
 8003004:	af04      	add	r7, sp, #16
 8003006:	6078      	str	r0, [r7, #4]

	if(screen==0)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d113      	bne.n	8003036 <showScreen+0x36>
	{
		u8g2_ClearBuffer(&u8g2);
 800300e:	48a2      	ldr	r0, [pc, #648]	; (8003298 <showScreen+0x298>)
 8003010:	f000 fbe8 	bl	80037e4 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_bubble_tr);
 8003014:	49a1      	ldr	r1, [pc, #644]	; (800329c <showScreen+0x29c>)
 8003016:	48a0      	ldr	r0, [pc, #640]	; (8003298 <showScreen+0x298>)
 8003018:	f001 fa3a 	bl	8004490 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 20, "Rep");
 800301c:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <showScreen+0x2a0>)
 800301e:	2214      	movs	r2, #20
 8003020:	2100      	movs	r1, #0
 8003022:	489d      	ldr	r0, [pc, #628]	; (8003298 <showScreen+0x298>)
 8003024:	f001 f996 	bl	8004354 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 0, 40, "Home");
 8003028:	4b9e      	ldr	r3, [pc, #632]	; (80032a4 <showScreen+0x2a4>)
 800302a:	2228      	movs	r2, #40	; 0x28
 800302c:	2100      	movs	r1, #0
 800302e:	489a      	ldr	r0, [pc, #616]	; (8003298 <showScreen+0x298>)
 8003030:	f001 f990 	bl	8004354 <u8g2_DrawStr>
 8003034:	e128      	b.n	8003288 <showScreen+0x288>

	}
	else if(screen>0 && screen<=4)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f340 80d1 	ble.w	80031e0 <showScreen+0x1e0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b04      	cmp	r3, #4
 8003042:	f300 80cd 	bgt.w	80031e0 <showScreen+0x1e0>
	{
		char firstline[30] = "";
 8003046:	2300      	movs	r3, #0
 8003048:	657b      	str	r3, [r7, #84]	; 0x54
 800304a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	611a      	str	r2, [r3, #16]
 800305a:	615a      	str	r2, [r3, #20]
 800305c:	831a      	strh	r2, [r3, #24]
		calcDate(clockepoch);
 800305e:	4b92      	ldr	r3, [pc, #584]	; (80032a8 <showScreen+0x2a8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f93e 	bl	80032e4 <calcDate>
		sprintf(firstline, "%.2d/%.2d  %.2d%c%.2d", clock_day, clock_month, clock_hours, clocktick, clock_minutes);
 8003068:	4b90      	ldr	r3, [pc, #576]	; (80032ac <showScreen+0x2ac>)
 800306a:	6819      	ldr	r1, [r3, #0]
 800306c:	4b90      	ldr	r3, [pc, #576]	; (80032b0 <showScreen+0x2b0>)
 800306e:	681c      	ldr	r4, [r3, #0]
 8003070:	4b90      	ldr	r3, [pc, #576]	; (80032b4 <showScreen+0x2b4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a90      	ldr	r2, [pc, #576]	; (80032b8 <showScreen+0x2b8>)
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	4615      	mov	r5, r2
 800307c:	4a8f      	ldr	r2, [pc, #572]	; (80032bc <showScreen+0x2bc>)
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003084:	9202      	str	r2, [sp, #8]
 8003086:	9501      	str	r5, [sp, #4]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4623      	mov	r3, r4
 800308c:	460a      	mov	r2, r1
 800308e:	498c      	ldr	r1, [pc, #560]	; (80032c0 <showScreen+0x2c0>)
 8003090:	f002 fd06 	bl	8005aa0 <sprintf>
		u8g2_ClearBuffer(&u8g2);
 8003094:	4880      	ldr	r0, [pc, #512]	; (8003298 <showScreen+0x298>)
 8003096:	f000 fba5 	bl	80037e4 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_fub11_tf);
 800309a:	498a      	ldr	r1, [pc, #552]	; (80032c4 <showScreen+0x2c4>)
 800309c:	487e      	ldr	r0, [pc, #504]	; (8003298 <showScreen+0x298>)
 800309e:	f001 f9f7 	bl	8004490 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 7, 11, firstline);
 80030a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030a6:	220b      	movs	r2, #11
 80030a8:	2107      	movs	r1, #7
 80030aa:	487b      	ldr	r0, [pc, #492]	; (8003298 <showScreen+0x298>)
 80030ac:	f001 f952 	bl	8004354 <u8g2_DrawStr>
		char sn[2];
		sn[0] = (char)(screen+48);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3330      	adds	r3, #48	; 0x30
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		sn[1] = '\0';
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
		u8g2_DrawStr(&u8g2, 117, 11, sn);
 80030c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030c6:	220b      	movs	r2, #11
 80030c8:	2175      	movs	r1, #117	; 0x75
 80030ca:	4873      	ldr	r0, [pc, #460]	; (8003298 <showScreen+0x298>)
 80030cc:	f001 f942 	bl	8004354 <u8g2_DrawStr>
		u8g2_DrawLine(&u8g2, 0, 13, 127, 13);
 80030d0:	230d      	movs	r3, #13
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	237f      	movs	r3, #127	; 0x7f
 80030d6:	220d      	movs	r2, #13
 80030d8:	2100      	movs	r1, #0
 80030da:	486f      	ldr	r0, [pc, #444]	; (8003298 <showScreen+0x298>)
 80030dc:	f001 fbf9 	bl	80048d2 <u8g2_DrawLine>
		u8g2_DrawLine(&u8g2, 115, 13, 115, 0);
 80030e0:	2300      	movs	r3, #0
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2373      	movs	r3, #115	; 0x73
 80030e6:	220d      	movs	r2, #13
 80030e8:	2173      	movs	r1, #115	; 0x73
 80030ea:	486b      	ldr	r0, [pc, #428]	; (8003298 <showScreen+0x298>)
 80030ec:	f001 fbf1 	bl	80048d2 <u8g2_DrawLine>
		u8g2_SetFont(&u8g2, u8g2_font_helvR10_tf);
 80030f0:	4975      	ldr	r1, [pc, #468]	; (80032c8 <showScreen+0x2c8>)
 80030f2:	4869      	ldr	r0, [pc, #420]	; (8003298 <showScreen+0x298>)
 80030f4:	f001 f9cc 	bl	8004490 <u8g2_SetFont>

		int blchar = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	67fb      	str	r3, [r7, #124]	; 0x7c
		int lastblchar = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	67bb      	str	r3, [r7, #120]	; 0x78
		int line = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	677b      	str	r3, [r7, #116]	; 0x74
		char printmsgline[30];

		while (line<4)
 8003104:	e068      	b.n	80031d8 <showScreen+0x1d8>
		{
			do
			{
				printmsgline[blchar - lastblchar] = *(messages[screen - 1] + blchar);
 8003106:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310a:	1ad1      	subs	r1, r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	4613      	mov	r3, r2
 8003112:	019b      	lsls	r3, r3, #6
 8003114:	4413      	add	r3, r2
 8003116:	4a6d      	ldr	r2, [pc, #436]	; (80032cc <showScreen+0x2cc>)
 8003118:	441a      	add	r2, r3
 800311a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003126:	440b      	add	r3, r1
 8003128:	f803 2c50 	strb.w	r2, [r3, #-80]
				printmsgline[blchar - lastblchar + 1] = '\0';
 800312c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800312e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003138:	4413      	add	r3, r2
 800313a:	2200      	movs	r2, #0
 800313c:	f803 2c50 	strb.w	r2, [r3, #-80]
				blchar++;
 8003140:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003142:	3301      	adds	r3, #1
 8003144:	67fb      	str	r3, [r7, #124]	; 0x7c
			} while (u8g2_GetStrWidth(&u8g2, printmsgline) < u8g2_GetDisplayWidth(&u8g2) - 8 && strlen(messages[screen - 1]+blchar)>0);
 8003146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800314a:	4619      	mov	r1, r3
 800314c:	4852      	ldr	r0, [pc, #328]	; (8003298 <showScreen+0x298>)
 800314e:	f001 fa09 	bl	8004564 <u8g2_GetStrWidth>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	4b50      	ldr	r3, [pc, #320]	; (8003298 <showScreen+0x298>)
 8003158:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800315c:	3b08      	subs	r3, #8
 800315e:	429a      	cmp	r2, r3
 8003160:	da0b      	bge.n	800317a <showScreen+0x17a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	4613      	mov	r3, r2
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	4413      	add	r3, r2
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <showScreen+0x2cc>)
 800316e:	441a      	add	r2, r3
 8003170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1c5      	bne.n	8003106 <showScreen+0x106>
			if (line<3)
 800317a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317c:	2b02      	cmp	r3, #2
 800317e:	dc16      	bgt.n	80031ae <showScreen+0x1ae>
			{
				if (printmsgline[blchar]!=' ')
 8003180:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003184:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003186:	4413      	add	r3, r2
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b20      	cmp	r3, #32
 800318c:	d00f      	beq.n	80031ae <showScreen+0x1ae>
				{
					printmsgline[blchar+1] = '-';
 800318e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003190:	3301      	adds	r3, #1
 8003192:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003196:	4413      	add	r3, r2
 8003198:	222d      	movs	r2, #45	; 0x2d
 800319a:	f803 2c50 	strb.w	r2, [r3, #-80]
					printmsgline[blchar+1] = '\0';
 800319e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031a0:	3301      	adds	r3, #1
 80031a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80031a6:	4413      	add	r3, r2
 80031a8:	2200      	movs	r2, #0
 80031aa:	f803 2c50 	strb.w	r2, [r3, #-80]
				}
			}
			u8g2_DrawStr(&u8g2, 0, 27+(11*line), printmsgline);
 80031ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	0052      	lsls	r2, r2, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	331b      	adds	r3, #27
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031c6:	2100      	movs	r1, #0
 80031c8:	4833      	ldr	r0, [pc, #204]	; (8003298 <showScreen+0x298>)
 80031ca:	f001 f8c3 	bl	8004354 <u8g2_DrawStr>
			lastblchar = blchar;
 80031ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031d0:	67bb      	str	r3, [r7, #120]	; 0x78
			line++;
 80031d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d4:	3301      	adds	r3, #1
 80031d6:	677b      	str	r3, [r7, #116]	; 0x74
		while (line<4)
 80031d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031da:	2b03      	cmp	r3, #3
 80031dc:	dd93      	ble.n	8003106 <showScreen+0x106>
	{
 80031de:	e053      	b.n	8003288 <showScreen+0x288>
		}
	}
	else if (screen==5)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d150      	bne.n	8003288 <showScreen+0x288>
	{
		u8g2_ClearBuffer(&u8g2);
 80031e6:	482c      	ldr	r0, [pc, #176]	; (8003298 <showScreen+0x298>)
 80031e8:	f000 fafc 	bl	80037e4 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_helvR10_tf);
 80031ec:	4936      	ldr	r1, [pc, #216]	; (80032c8 <showScreen+0x2c8>)
 80031ee:	482a      	ldr	r0, [pc, #168]	; (8003298 <showScreen+0x298>)
 80031f0:	f001 f94e 	bl	8004490 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 12, "Local Address:");
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <showScreen+0x2d0>)
 80031f6:	220c      	movs	r2, #12
 80031f8:	2100      	movs	r1, #0
 80031fa:	4827      	ldr	r0, [pc, #156]	; (8003298 <showScreen+0x298>)
 80031fc:	f001 f8aa 	bl	8004354 <u8g2_DrawStr>
		char localipaddress[20];
		sprintf(localipaddress,"%d.%d.%d.%d",localip[0],localip[1],localip[2],localip[3]);
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <showScreen+0x2d4>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4619      	mov	r1, r3
 8003208:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <showScreen+0x2d4>)
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461c      	mov	r4, r3
 8003210:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <showScreen+0x2d4>)
 8003212:	789b      	ldrb	r3, [r3, #2]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <showScreen+0x2d4>)
 800321a:	78db      	ldrb	r3, [r3, #3]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f107 001c 	add.w	r0, r7, #28
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	4623      	mov	r3, r4
 8003228:	460a      	mov	r2, r1
 800322a:	492b      	ldr	r1, [pc, #172]	; (80032d8 <showScreen+0x2d8>)
 800322c:	f002 fc38 	bl	8005aa0 <sprintf>
		u8g2_DrawStr(&u8g2, 0, 27, localipaddress);
 8003230:	f107 031c 	add.w	r3, r7, #28
 8003234:	221b      	movs	r2, #27
 8003236:	2100      	movs	r1, #0
 8003238:	4817      	ldr	r0, [pc, #92]	; (8003298 <showScreen+0x298>)
 800323a:	f001 f88b 	bl	8004354 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 0, 47, "Public Address:");
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <showScreen+0x2dc>)
 8003240:	222f      	movs	r2, #47	; 0x2f
 8003242:	2100      	movs	r1, #0
 8003244:	4814      	ldr	r0, [pc, #80]	; (8003298 <showScreen+0x298>)
 8003246:	f001 f885 	bl	8004354 <u8g2_DrawStr>
		char publicipaddress[20];
		sprintf(publicipaddress,"%d.%d.%d.%d",publicip[0],publicip[1],publicip[2],publicip[3]);
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <showScreen+0x2e0>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	4619      	mov	r1, r3
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <showScreen+0x2e0>)
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461c      	mov	r4, r3
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <showScreen+0x2e0>)
 800325c:	789b      	ldrb	r3, [r3, #2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <showScreen+0x2e0>)
 8003264:	78db      	ldrb	r3, [r3, #3]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f107 0008 	add.w	r0, r7, #8
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	9200      	str	r2, [sp, #0]
 8003270:	4623      	mov	r3, r4
 8003272:	460a      	mov	r2, r1
 8003274:	4918      	ldr	r1, [pc, #96]	; (80032d8 <showScreen+0x2d8>)
 8003276:	f002 fc13 	bl	8005aa0 <sprintf>
		u8g2_DrawStr(&u8g2, 0, 62, publicipaddress);
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	223e      	movs	r2, #62	; 0x3e
 8003280:	2100      	movs	r1, #0
 8003282:	4805      	ldr	r0, [pc, #20]	; (8003298 <showScreen+0x298>)
 8003284:	f001 f866 	bl	8004354 <u8g2_DrawStr>

	}

	u8g2_SendBuffer(&u8g2);
 8003288:	4803      	ldr	r0, [pc, #12]	; (8003298 <showScreen+0x298>)
 800328a:	f000 fb1e 	bl	80038ca <u8g2_SendBuffer>

}
 800328e:	bf00      	nop
 8003290:	3780      	adds	r7, #128	; 0x80
 8003292:	46bd      	mov	sp, r7
 8003294:	bdb0      	pop	{r4, r5, r7, pc}
 8003296:	bf00      	nop
 8003298:	20000c34 	.word	0x20000c34
 800329c:	0800b504 	.word	0x0800b504
 80032a0:	0800a97c 	.word	0x0800a97c
 80032a4:	0800a980 	.word	0x0800a980
 80032a8:	200006c8 	.word	0x200006c8
 80032ac:	20000020 	.word	0x20000020
 80032b0:	2000001c 	.word	0x2000001c
 80032b4:	200006cc 	.word	0x200006cc
 80032b8:	20000024 	.word	0x20000024
 80032bc:	200006d0 	.word	0x200006d0
 80032c0:	0800a988 	.word	0x0800a988
 80032c4:	0800c164 	.word	0x0800c164
 80032c8:	0800a9d8 	.word	0x0800a9d8
 80032cc:	20000b30 	.word	0x20000b30
 80032d0:	0800a9a0 	.word	0x0800a9a0
 80032d4:	200006bc 	.word	0x200006bc
 80032d8:	0800a9b0 	.word	0x0800a9b0
 80032dc:	0800a9bc 	.word	0x0800a9bc
 80032e0:	200006c0 	.word	0x200006c0

080032e4 <calcDate>:

void calcDate(unsigned long epoch)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b08d      	sub	sp, #52	; 0x34
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	int seconds, minutes, hours, days, dayOfWeek, month, year;

	seconds = epoch;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	61bb      	str	r3, [r7, #24]

	/* calculate minutes */
	minutes  = seconds / 60;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4a6b      	ldr	r2, [pc, #428]	; (80034a0 <calcDate+0x1bc>)
 80032f4:	fb82 1203 	smull	r1, r2, r2, r3
 80032f8:	441a      	add	r2, r3
 80032fa:	1152      	asrs	r2, r2, #5
 80032fc:	17db      	asrs	r3, r3, #31
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
	seconds -= minutes * 60;
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4613      	mov	r3, r2
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	461a      	mov	r2, r3
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4413      	add	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
	/* calculate hours */
	hours    = minutes / 60;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	4a62      	ldr	r2, [pc, #392]	; (80034a0 <calcDate+0x1bc>)
 8003318:	fb82 1203 	smull	r1, r2, r2, r3
 800331c:	441a      	add	r2, r3
 800331e:	1152      	asrs	r2, r2, #5
 8003320:	17db      	asrs	r3, r3, #31
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	613b      	str	r3, [r7, #16]
	minutes -= hours   * 60;
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4613      	mov	r3, r2
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	461a      	mov	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4413      	add	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
	/* calculate days */
	days     = hours   / 24;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <calcDate+0x1c0>)
 800333c:	fb82 1203 	smull	r1, r2, r2, r3
 8003340:	1092      	asrs	r2, r2, #2
 8003342:	17db      	asrs	r3, r3, #31
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
	hours   -= days    * 24;
 8003348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334a:	4613      	mov	r3, r2
 800334c:	0092      	lsls	r2, r2, #2
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	461a      	mov	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
 800335a:	f240 73b2 	movw	r3, #1970	; 0x7b2
 800335e:	623b      	str	r3, [r7, #32]
	dayOfWeek = 4;
 8003360:	2304      	movs	r3, #4
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28

	while(1)
	{
		char leapYear;
		if(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11d      	bne.n	80033aa <calcDate+0xc6>
 800336e:	6a3a      	ldr	r2, [r7, #32]
 8003370:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <calcDate+0x1c4>)
 8003372:	fb83 1302 	smull	r1, r3, r3, r2
 8003376:	1159      	asrs	r1, r3, #5
 8003378:	17d3      	asrs	r3, r2, #31
 800337a:	1acb      	subs	r3, r1, r3
 800337c:	2164      	movs	r1, #100	; 0x64
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <calcDate+0xc0>
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <calcDate+0x1c4>)
 800338c:	fb83 1302 	smull	r1, r3, r3, r2
 8003390:	11d9      	asrs	r1, r3, #7
 8003392:	17d3      	asrs	r3, r2, #31
 8003394:	1acb      	subs	r3, r1, r3
 8003396:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <calcDate+0xc6>
		{
			leapYear = 1;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e001      	b.n	80033ae <calcDate+0xca>
		}
		else
		{
			leapYear = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	77fb      	strb	r3, [r7, #31]
		}
		uint16_t daysInYear = leapYear ? 366 : 365;
 80033ae:	7ffb      	ldrb	r3, [r7, #31]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <calcDate+0xd6>
 80033b4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80033b8:	e001      	b.n	80033be <calcDate+0xda>
 80033ba:	f240 136d 	movw	r3, #365	; 0x16d
 80033be:	81fb      	strh	r3, [r7, #14]
		if (days >= daysInYear)
 80033c0:	89fa      	ldrh	r2, [r7, #14]
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	dc16      	bgt.n	80033f6 <calcDate+0x112>
		{
			dayOfWeek += leapYear ? 2 : 1;
 80033c8:	7ffb      	ldrb	r3, [r7, #31]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <calcDate+0xee>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e000      	b.n	80033d4 <calcDate+0xf0>
 80033d2:	2301      	movs	r3, #1
 80033d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d6:	4413      	add	r3, r2
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
			days      -= daysInYear;
 80033da:	89fb      	ldrh	r3, [r7, #14]
 80033dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (dayOfWeek >= 7)
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	dd02      	ble.n	80033ee <calcDate+0x10a>
				dayOfWeek -= 7;
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	3b07      	subs	r3, #7
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
			++year;
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	3301      	adds	r3, #1
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	e7b6      	b.n	8003364 <calcDate+0x80>
		}
		else
		{
			//tm->tm_yday = days;
			dayOfWeek  += days;
 80033f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	4413      	add	r3, r2
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
			dayOfWeek  %= 7;
 80033fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <calcDate+0x1c8>)
 8003402:	fb83 1302 	smull	r1, r3, r3, r2
 8003406:	4413      	add	r3, r2
 8003408:	1099      	asrs	r1, r3, #2
 800340a:	17d3      	asrs	r3, r2, #31
 800340c:	1ac9      	subs	r1, r1, r3
 800340e:	460b      	mov	r3, r1
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	1a5b      	subs	r3, r3, r1
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 1; month < 13; ++month)
 8003418:	2301      	movs	r3, #1
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	e018      	b.n	8003450 <calcDate+0x16c>
			{
				uint8_t dim = daysInMonth[month-1];
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	3b01      	subs	r3, #1
 8003422:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <calcDate+0x1cc>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	77bb      	strb	r3, [r7, #30]

				/* add a day to feburary if this is a leap year */
				if (month == 2 && leapYear)
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	2b02      	cmp	r3, #2
 800342c:	d105      	bne.n	800343a <calcDate+0x156>
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <calcDate+0x156>
					++dim;
 8003434:	7fbb      	ldrb	r3, [r7, #30]
 8003436:	3301      	adds	r3, #1
 8003438:	77bb      	strb	r3, [r7, #30]

				if (days >= dim)
 800343a:	7fba      	ldrb	r2, [r7, #30]
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	429a      	cmp	r2, r3
 8003440:	dc0a      	bgt.n	8003458 <calcDate+0x174>
					days -= dim;
 8003442:	7fbb      	ldrb	r3, [r7, #30]
 8003444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(month = 1; month < 13; ++month)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	3301      	adds	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	2b0c      	cmp	r3, #12
 8003454:	dde3      	ble.n	800341e <calcDate+0x13a>
				else
					break;
			}
			break;
 8003456:	e000      	b.n	800345a <calcDate+0x176>
					break;
 8003458:	bf00      	nop
		}
	}


	clock_seconds  = (uint8_t)seconds;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <calcDate+0x1d0>)
 8003462:	601a      	str	r2, [r3, #0]
	clock_minutes  = (uint8_t)minutes;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <calcDate+0x1d4>)
 800346c:	601a      	str	r2, [r3, #0]
	clock_hours = (uint8_t)hours;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <calcDate+0x1d8>)
 8003476:	601a      	str	r2, [r3, #0]
	clock_day = (uint8_t)days + 1;
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <calcDate+0x1dc>)
 8003480:	6013      	str	r3, [r2, #0]
	clock_month  = (uint8_t)month;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <calcDate+0x1e0>)
 800348a:	601a      	str	r2, [r3, #0]
	clock_year = (uint16_t)year;
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <calcDate+0x1e4>)
 8003494:	601a      	str	r2, [r3, #0]
	//tm->tm_wday = dayOfWeek;
}
 8003496:	bf00      	nop
 8003498:	3734      	adds	r7, #52	; 0x34
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	88888889 	.word	0x88888889
 80034a4:	2aaaaaab 	.word	0x2aaaaaab
 80034a8:	51eb851f 	.word	0x51eb851f
 80034ac:	92492493 	.word	0x92492493
 80034b0:	0800a9cc 	.word	0x0800a9cc
 80034b4:	200006d4 	.word	0x200006d4
 80034b8:	200006d0 	.word	0x200006d0
 80034bc:	200006cc 	.word	0x200006cc
 80034c0:	20000020 	.word	0x20000020
 80034c4:	2000001c 	.word	0x2000001c
 80034c8:	20000018 	.word	0x20000018

080034cc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	6039      	str	r1, [r7, #0]
 80034d6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	da0b      	bge.n	80034f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80034e0:	490d      	ldr	r1, [pc, #52]	; (8003518 <NVIC_SetPriority+0x4c>)
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	3b04      	subs	r3, #4
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	0112      	lsls	r2, r2, #4
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	440b      	add	r3, r1
 80034f4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80034f6:	e009      	b.n	800350c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80034f8:	4908      	ldr	r1, [pc, #32]	; (800351c <NVIC_SetPriority+0x50>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000ed00 	.word	0xe000ed00
 800351c:	e000e100 	.word	0xe000e100

08003520 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
    \param [in]       SubPriority  Sub priority value (starting from 0)
    \return                        Encoded priority for the interrupt
 */
static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f1c3 0307 	rsb	r3, r3, #7
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf28      	it	cs
 800353e:	2304      	movcs	r3, #4
 8003540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3304      	adds	r3, #4
 8003546:	2b06      	cmp	r3, #6
 8003548:	d902      	bls.n	8003550 <NVIC_EncodePriority+0x30>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3b03      	subs	r3, #3
 800354e:	e000      	b.n	8003552 <NVIC_EncodePriority+0x32>
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003554:	2201      	movs	r2, #1
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	461a      	mov	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	401a      	ands	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8003568:	2101      	movs	r1, #1
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	4619      	mov	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	400b      	ands	r3, r1
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003578:	4313      	orrs	r3, r2
         );
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	; 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003592:	d301      	bcc.n	8003598 <SysTick_Config+0x14>
 8003594:	2301      	movs	r3, #1
 8003596:	e011      	b.n	80035bc <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8003598:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <SysTick_Config+0x40>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035a0:	3b01      	subs	r3, #1
 80035a2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80035a4:	210f      	movs	r1, #15
 80035a6:	f04f 30ff 	mov.w	r0, #4294967295
 80035aa:	f7ff ff8f 	bl	80034cc <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <SysTick_Config+0x40>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <SysTick_Config+0x40>)
 80035b6:	2207      	movs	r2, #7
 80035b8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	e000e010 	.word	0xe000e010

080035c8 <setupSystick>:
#include "globals.h"
#include "timer.h"
#include "stm32f10x.h"

void setupSystick(uint16_t f_tick)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 80035d2:	f107 030c 	add.w	r3, r7, #12
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fe28 	bl	800122c <RCC_GetClocksFreq>
	(void) SysTick_Config(RCC_Clocks.HCLK_Frequency / f_tick);
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ffcd 	bl	8003584 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(2,1,0));
 80035ea:	2200      	movs	r2, #0
 80035ec:	2101      	movs	r1, #1
 80035ee:	2002      	movs	r0, #2
 80035f0:	f7ff ff96 	bl	8003520 <NVIC_EncodePriority>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	f7ff ff66 	bl	80034cc <NVIC_SetPriority>
}
 8003600:	bf00      	nop
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <setupClockTimer>:


void setupClockTimer()
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM4, ENABLE);
 800360e:	2101      	movs	r1, #1
 8003610:	2004      	movs	r0, #4
 8003612:	f7fd fed9 	bl	80013c8 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TIM_str;
	TIM_TimeBaseStructInit (&TIM_str);
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd ff6f 	bl	80014fc <TIM_TimeBaseStructInit>
	TIM_str.TIM_Period = CLK_CTR;
 800361e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003622:	813b      	strh	r3, [r7, #8]
	TIM_str.TIM_Prescaler = CLK_PRESC - 1;
 8003624:	f240 1367 	movw	r3, #359	; 0x167
 8003628:	80bb      	strh	r3, [r7, #4]
	TIM_str.TIM_CounterMode = TIM_CounterMode_Up;
 800362a:	2300      	movs	r3, #0
 800362c:	80fb      	strh	r3, [r7, #6]
	TIM_str.TIM_ClockDivision = TIM_CKD_DIV1;
 800362e:	2300      	movs	r3, #0
 8003630:	817b      	strh	r3, [r7, #10]
	TIM_str.TIM_RepetitionCounter = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	733b      	strb	r3, [r7, #12]

	TIM_TimeBaseInit (TIM4, &TIM_str);
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	4619      	mov	r1, r3
 800363a:	480e      	ldr	r0, [pc, #56]	; (8003674 <setupClockTimer+0x6c>)
 800363c:	f7fd fee2 	bl	8001404 <TIM_TimeBaseInit>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8003640:	231e      	movs	r3, #30
 8003642:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8003644:	2301      	movs	r3, #1
 8003646:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8003648:	2301      	movs	r3, #1
 800364a:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 800364c:	2301      	movs	r3, #1
 800364e:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8003650:	463b      	mov	r3, r7
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fbce 	bl	8000df4 <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003658:	2201      	movs	r2, #1
 800365a:	2101      	movs	r1, #1
 800365c:	4805      	ldr	r0, [pc, #20]	; (8003674 <setupClockTimer+0x6c>)
 800365e:	f7fd ff85 	bl	800156c <TIM_ITConfig>
	TIM_Cmd(TIM4, ENABLE);
 8003662:	2101      	movs	r1, #1
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <setupClockTimer+0x6c>)
 8003666:	f7fd ff62 	bl	800152e <TIM_Cmd>

}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40000800 	.word	0x40000800

08003678 <Usart1Init>:
#ifdef BUFFERED
//initialize buffers
volatile FIFO_TypeDef U1Rx, U1Tx;
#endif
void Usart1Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
#ifdef BUFFERED
	//initialize buffers
	BufferInit(&U1Rx);
 800367e:	482f      	ldr	r0, [pc, #188]	; (800373c <Usart1Init+0xc4>)
 8003680:	f7fe f9aa 	bl	80019d8 <BufferInit>
	BufferInit(&U1Tx);
 8003684:	482e      	ldr	r0, [pc, #184]	; (8003740 <Usart1Init+0xc8>)
 8003686:	f7fe f9a7 	bl	80019d8 <BufferInit>
#endif
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	USART_ClockInitTypeDef  USART_ClockInitStructure;
	//enable bus clocks
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 800368a:	2101      	movs	r1, #1
 800368c:	f244 0005 	movw	r0, #16389	; 0x4005
 8003690:	f7fd fe7c 	bl	800138c <RCC_APB2PeriphClockCmd>
	//Set USART1 Tx (PA.09) as AF push-pull
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003698:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800369a:	2318      	movs	r3, #24
 800369c:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800369e:	2303      	movs	r3, #3
 80036a0:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80036a2:	f107 031c 	add.w	r3, r7, #28
 80036a6:	4619      	mov	r1, r3
 80036a8:	4826      	ldr	r0, [pc, #152]	; (8003744 <Usart1Init+0xcc>)
 80036aa:	f7fd fca9 	bl	8001000 <GPIO_Init>
	//Set USART1 Rx (PA.10) as input floating
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80036ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b2:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80036b4:	2304      	movs	r3, #4
 80036b6:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	4619      	mov	r1, r3
 80036be:	4821      	ldr	r0, [pc, #132]	; (8003744 <Usart1Init+0xcc>)
 80036c0:	f7fd fc9e 	bl	8001000 <GPIO_Init>
	USART_ClockStructInit(&USART_ClockInitStructure);
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe f891 	bl	80017ee <USART_ClockStructInit>
	USART_ClockInit(USART1, &USART_ClockInitStructure);
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	481d      	ldr	r0, [pc, #116]	; (8003748 <Usart1Init+0xd0>)
 80036d2:	f7fe f861 	bl	8001798 <USART_ClockInit>

	USART_InitStructure.USART_BaudRate = 115200;
 80036d6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80036da:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80036dc:	2300      	movs	r3, #0
 80036de:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 80036e4:	2300      	movs	r3, #0
 80036e6:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80036e8:	230c      	movs	r3, #12
 80036ea:	82fb      	strh	r3, [r7, #22]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80036ec:	2300      	movs	r3, #0
 80036ee:	833b      	strh	r3, [r7, #24]
	//Write USART1 parameters
	USART_Init(USART1, &USART_InitStructure);
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	4619      	mov	r1, r3
 80036f6:	4814      	ldr	r0, [pc, #80]	; (8003748 <Usart1Init+0xd0>)
 80036f8:	f7fd ff94 	bl	8001624 <USART_Init>
	//Enable USART1
	USART_Cmd(USART1, ENABLE);
 80036fc:	2101      	movs	r1, #1
 80036fe:	4812      	ldr	r0, [pc, #72]	; (8003748 <Usart1Init+0xd0>)
 8003700:	f7fe f88a 	bl	8001818 <USART_Cmd>
#ifdef BUFFERED
	//configure NVIC
	NVIC_InitTypeDef NVIC_InitStructure;
	//select NVIC channel to configure
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8003704:	2325      	movs	r3, #37	; 0x25
 8003706:	703b      	strb	r3, [r7, #0]
	//set priority to lowest
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	707b      	strb	r3, [r7, #1]
	//set subpriority to lowest
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	70bb      	strb	r3, [r7, #2]
	//enable IRQ channel
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003710:	2301      	movs	r3, #1
 8003712:	70fb      	strb	r3, [r7, #3]
	//update NVIC registers
	NVIC_Init(&NVIC_InitStructure);
 8003714:	463b      	mov	r3, r7
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fb6c 	bl	8000df4 <NVIC_Init>

	//disable Transmit Data Register empty interrupt
	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 800371c:	2200      	movs	r2, #0
 800371e:	f240 7127 	movw	r1, #1831	; 0x727
 8003722:	4809      	ldr	r0, [pc, #36]	; (8003748 <Usart1Init+0xd0>)
 8003724:	f7fe f897 	bl	8001856 <USART_ITConfig>
	//enable Receive Data register not empty interrupt
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003728:	2201      	movs	r2, #1
 800372a:	f240 5125 	movw	r1, #1317	; 0x525
 800372e:	4806      	ldr	r0, [pc, #24]	; (8003748 <Usart1Init+0xd0>)
 8003730:	f7fe f891 	bl	8001856 <USART_ITConfig>
#endif
}
 8003734:	bf00      	nop
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000cb4 	.word	0x20000cb4
 8003740:	200014bc 	.word	0x200014bc
 8003744:	40010800 	.word	0x40010800
 8003748:	40013800 	.word	0x40013800

0800374c <Usart1Put>:
void Usart1Put(uint8_t ch)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
#ifdef BUFFERED
	//put char to the buffer
	BufferPut(&U1Tx, ch);
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	4619      	mov	r1, r3
 800375a:	4806      	ldr	r0, [pc, #24]	; (8003774 <Usart1Put+0x28>)
 800375c:	f7fe f94e 	bl	80019fc <BufferPut>
	//enable Transmit Data Register empty interrupt
	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8003760:	2201      	movs	r2, #1
 8003762:	f240 7127 	movw	r1, #1831	; 0x727
 8003766:	4804      	ldr	r0, [pc, #16]	; (8003778 <Usart1Put+0x2c>)
 8003768:	f7fe f875 	bl	8001856 <USART_ITConfig>
	//Loop until the end of transmission
	while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
	{
	}
#endif
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200014bc 	.word	0x200014bc
 8003778:	40013800 	.word	0x40013800

0800377c <Usart1Get>:
ErrorStatus Usart1Get(uint8_t *ch){
 800377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003780:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8003784:	f44f 67ff 	mov.w	r7, #2040	; 0x7f8
 8003788:	446f      	add	r7, sp
 800378a:	6078      	str	r0, [r7, #4]
#ifdef BUFFERED

	uint8_t c;
	//check if buffer is empty
	if(BufferIsEmpty(U1Rx) != SUCCESS)
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <Usart1Get+0x64>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4690      	mov	r8, r2
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4616      	mov	r6, r2
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	4615      	mov	r5, r2
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	4614      	mov	r4, r2
 800379e:	4668      	mov	r0, sp
 80037a0:	3310      	adds	r3, #16
 80037a2:	f240 72f6 	movw	r2, #2038	; 0x7f6
 80037a6:	4619      	mov	r1, r3
 80037a8:	f002 f966 	bl	8005a78 <memcpy>
 80037ac:	4640      	mov	r0, r8
 80037ae:	4631      	mov	r1, r6
 80037b0:	462a      	mov	r2, r5
 80037b2:	4623      	mov	r3, r4
 80037b4:	f7fe f982 	bl	8001abc <BufferIsEmpty>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d00a      	beq.n	80037d4 <Usart1Get+0x58>
	{
		BufferGet(&U1Rx, &c);
 80037be:	f107 030f 	add.w	r3, r7, #15
 80037c2:	4619      	mov	r1, r3
 80037c4:	4806      	ldr	r0, [pc, #24]	; (80037e0 <Usart1Get+0x64>)
 80037c6:	f7fe f949 	bl	8001a5c <BufferGet>
		*ch = c;
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	701a      	strb	r2, [r3, #0]
		return SUCCESS;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <Usart1Get+0x5a>
	}
	else
	{
		return ERROR;
 80037d4:	2300      	movs	r3, #0

#else
	while ( USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
	return (uint8_t)USART_ReceiveData(USART1);
#endif
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e0:	20000cb4 	.word	0x20000cb4

080037e4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	7c1b      	ldrb	r3, [r3, #16]
 80037f2:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f002 f93b 	bl	8005a8e <memset>
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af02      	add	r7, sp, #8
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
 800382c:	4613      	mov	r3, r2
 800382e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	7c1b      	ldrb	r3, [r3, #16]
 8003836:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	b29b      	uxth	r3, r3
 8003846:	89ba      	ldrh	r2, [r7, #12]
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800384e:	89bb      	ldrh	r3, [r7, #12]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003854:	89bb      	ldrh	r3, [r7, #12]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4413      	add	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800385c:	7bf9      	ldrb	r1, [r7, #15]
 800385e:	78ba      	ldrb	r2, [r7, #2]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	460b      	mov	r3, r1
 8003866:	2100      	movs	r1, #0
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f001 fd80 	bl	800536e <u8x8_DrawTile>
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003888:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003890:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	7c5b      	ldrb	r3, [r3, #17]
 8003898:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800389a:	7bba      	ldrb	r2, [r7, #14]
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ffbd 	bl	8003820 <u8g2_send_tile_row>
    src_row++;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	3301      	adds	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80038ac:	7bbb      	ldrb	r3, [r7, #14]
 80038ae:	3301      	adds	r3, #1
 80038b0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	7b7b      	ldrb	r3, [r7, #13]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d203      	bcs.n	80038c2 <u8g2_send_buffer+0x4c>
 80038ba:	7bba      	ldrb	r2, [r7, #14]
 80038bc:	7b3b      	ldrb	r3, [r7, #12]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3eb      	bcc.n	800389a <u8g2_send_buffer+0x24>
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ffcf 	bl	8003876 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f001 fdaa 	bl	8005432 <u8x8_RefreshDisplay>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2208      	movs	r2, #8
 80038f4:	701a      	strb	r2, [r3, #0]
  return buf;
 80038f6:	4b03      	ldr	r3, [pc, #12]	; (8003904 <u8g2_m_16_8_f+0x1c>)
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	200006e4 	.word	0x200006e4

08003908 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800391e:	490c      	ldr	r1, [pc, #48]	; (8003950 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f001 fde5 	bl	80054f0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003926:	f107 0313 	add.w	r3, r7, #19
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ffdc 	bl	80038e8 <u8g2_m_16_8_f>
 8003930:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003932:	7cfa      	ldrb	r2, [r7, #19]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f001 f8fe 	bl	8004b3e <u8g2_SetupBuffer>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	0800509d 	.word	0x0800509d
 8003950:	0800526d 	.word	0x0800526d
 8003954:	080049ff 	.word	0x080049ff

08003958 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	781b      	ldrb	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	81fb      	strh	r3, [r7, #14]
    font++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3301      	adds	r3, #1
 8003998:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	89fb      	ldrh	r3, [r7, #14]
 80039a8:	4413      	add	r3, r2
 80039aa:	81fb      	strh	r3, [r7, #14]
    return pos;
 80039ac:	89fb      	ldrh	r3, [r7, #14]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80039c2:	2100      	movs	r1, #0
 80039c4:	6838      	ldr	r0, [r7, #0]
 80039c6:	f7ff ffc7 	bl	8003958 <u8g2_font_get_byte>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80039d2:	2101      	movs	r1, #1
 80039d4:	6838      	ldr	r0, [r7, #0]
 80039d6:	f7ff ffbf 	bl	8003958 <u8g2_font_get_byte>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80039e2:	2102      	movs	r1, #2
 80039e4:	6838      	ldr	r0, [r7, #0]
 80039e6:	f7ff ffb7 	bl	8003958 <u8g2_font_get_byte>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80039f2:	2103      	movs	r1, #3
 80039f4:	6838      	ldr	r0, [r7, #0]
 80039f6:	f7ff ffaf 	bl	8003958 <u8g2_font_get_byte>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003a02:	2104      	movs	r1, #4
 8003a04:	6838      	ldr	r0, [r7, #0]
 8003a06:	f7ff ffa7 	bl	8003958 <u8g2_font_get_byte>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003a12:	2105      	movs	r1, #5
 8003a14:	6838      	ldr	r0, [r7, #0]
 8003a16:	f7ff ff9f 	bl	8003958 <u8g2_font_get_byte>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003a22:	2106      	movs	r1, #6
 8003a24:	6838      	ldr	r0, [r7, #0]
 8003a26:	f7ff ff97 	bl	8003958 <u8g2_font_get_byte>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003a32:	2107      	movs	r1, #7
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	f7ff ff8f 	bl	8003958 <u8g2_font_get_byte>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003a42:	2108      	movs	r1, #8
 8003a44:	6838      	ldr	r0, [r7, #0]
 8003a46:	f7ff ff87 	bl	8003958 <u8g2_font_get_byte>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003a52:	2109      	movs	r1, #9
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f7ff ff7f 	bl	8003958 <u8g2_font_get_byte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	b25a      	sxtb	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003a62:	210a      	movs	r1, #10
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	f7ff ff77 	bl	8003958 <u8g2_font_get_byte>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	b25a      	sxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003a72:	210b      	movs	r1, #11
 8003a74:	6838      	ldr	r0, [r7, #0]
 8003a76:	f7ff ff6f 	bl	8003958 <u8g2_font_get_byte>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	b25a      	sxtb	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003a82:	210c      	movs	r1, #12
 8003a84:	6838      	ldr	r0, [r7, #0]
 8003a86:	f7ff ff67 	bl	8003958 <u8g2_font_get_byte>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b25a      	sxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003a92:	210d      	movs	r1, #13
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	f7ff ff5f 	bl	8003958 <u8g2_font_get_byte>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	b25a      	sxtb	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003aa2:	210e      	movs	r1, #14
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	f7ff ff57 	bl	8003958 <u8g2_font_get_byte>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	b25a      	sxtb	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	6838      	ldr	r0, [r7, #0]
 8003ab6:	f7ff ff4f 	bl	8003958 <u8g2_font_get_byte>
 8003aba:	4603      	mov	r3, r0
 8003abc:	b25a      	sxtb	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	f7ff ff47 	bl	8003958 <u8g2_font_get_byte>
 8003aca:	4603      	mov	r3, r0
 8003acc:	b25a      	sxtb	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003ad2:	2111      	movs	r1, #17
 8003ad4:	6838      	ldr	r0, [r7, #0]
 8003ad6:	f7ff ff50 	bl	800397a <u8g2_font_get_word>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003ae2:	2113      	movs	r1, #19
 8003ae4:	6838      	ldr	r0, [r7, #0]
 8003ae6:	f7ff ff48 	bl	800397a <u8g2_font_get_word>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003af2:	2115      	movs	r1, #21
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	f7ff ff40 	bl	800397a <u8g2_font_get_word>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	82da      	strh	r2, [r3, #22]
#endif
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7a9b      	ldrb	r3, [r3, #10]
 8003b1a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	7b7b      	ldrb	r3, [r7, #13]
 8003b28:	fa42 f303 	asr.w	r3, r2, r3
 8003b2c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003b2e:	7b7b      	ldrb	r3, [r7, #13]
 8003b30:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003b32:	7bba      	ldrb	r2, [r7, #14]
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	4413      	add	r3, r2
 8003b38:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	d91a      	bls.n	8003b76 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003b40:	2308      	movs	r3, #8
 8003b42:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003b44:	7b3a      	ldrb	r2, [r7, #12]
 8003b46:	7b7b      	ldrb	r3, [r7, #13]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	7b3b      	ldrb	r3, [r7, #12]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	b25a      	sxtb	r2, r3
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003b70:	7bbb      	ldrb	r3, [r7, #14]
 8003b72:	3b08      	subs	r3, #8
 8003b74:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	4013      	ands	r3, r2
 8003b88:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7bba      	ldrb	r2, [r7, #14]
 8003b8e:	729a      	strb	r2, [r3, #10]
  return val;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ffac 	bl	8003b0a <u8g2_font_decode_get_unsigned_bits>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003bc0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	7bbb      	ldrb	r3, [r7, #14]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	73fb      	strb	r3, [r7, #15]
  return v;
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003be2:	b490      	push	{r4, r7}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4604      	mov	r4, r0
 8003bea:	4608      	mov	r0, r1
 8003bec:	4611      	mov	r1, r2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	71fb      	strb	r3, [r7, #7]
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	71bb      	strb	r3, [r7, #6]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	717b      	strb	r3, [r7, #5]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8003c00:	793b      	ldrb	r3, [r7, #4]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d008      	beq.n	8003c18 <u8g2_add_vector_y+0x36>
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d00b      	beq.n	8003c22 <u8g2_add_vector_y+0x40>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10e      	bne.n	8003c2c <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8003c0e:	797a      	ldrb	r2, [r7, #5]
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4413      	add	r3, r2
 8003c14:	71fb      	strb	r3, [r7, #7]
      break;
 8003c16:	e00e      	b.n	8003c36 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8003c18:	79ba      	ldrb	r2, [r7, #6]
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
      break;
 8003c20:	e009      	b.n	8003c36 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8003c22:	797b      	ldrb	r3, [r7, #5]
 8003c24:	79fa      	ldrb	r2, [r7, #7]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	71fb      	strb	r3, [r7, #7]
      break;
 8003c2a:	e004      	b.n	8003c36 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8003c2c:	79bb      	ldrb	r3, [r7, #6]
 8003c2e:	79fa      	ldrb	r2, [r7, #7]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	71fb      	strb	r3, [r7, #7]
      break;      
 8003c34:	bf00      	nop
  }
  return dy;
 8003c36:	79fb      	ldrb	r3, [r7, #7]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc90      	pop	{r4, r7}
 8003c40:	4770      	bx	lr

08003c42 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003c42:	b490      	push	{r4, r7}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4608      	mov	r0, r1
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4623      	mov	r3, r4
 8003c52:	71fb      	strb	r3, [r7, #7]
 8003c54:	4603      	mov	r3, r0
 8003c56:	71bb      	strb	r3, [r7, #6]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	717b      	strb	r3, [r7, #5]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8003c60:	793b      	ldrb	r3, [r7, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d008      	beq.n	8003c78 <u8g2_add_vector_x+0x36>
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d00b      	beq.n	8003c82 <u8g2_add_vector_x+0x40>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10e      	bne.n	8003c8c <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8003c6e:	79ba      	ldrb	r2, [r7, #6]
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	4413      	add	r3, r2
 8003c74:	71fb      	strb	r3, [r7, #7]
      break;
 8003c76:	e00e      	b.n	8003c96 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8003c78:	797b      	ldrb	r3, [r7, #5]
 8003c7a:	79fa      	ldrb	r2, [r7, #7]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	71fb      	strb	r3, [r7, #7]
      break;
 8003c80:	e009      	b.n	8003c96 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8003c82:	79bb      	ldrb	r3, [r7, #6]
 8003c84:	79fa      	ldrb	r2, [r7, #7]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	71fb      	strb	r3, [r7, #7]
      break;
 8003c8a:	e004      	b.n	8003c96 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8003c8c:	797a      	ldrb	r2, [r7, #5]
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	4413      	add	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
      break;      
 8003c94:	bf00      	nop
  }
  return dx;
 8003c96:	79fb      	ldrb	r3, [r7, #7]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc90      	pop	{r4, r7}
 8003ca0:	4770      	bx	lr

08003ca2 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b088      	sub	sp, #32
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	70fb      	strb	r3, [r7, #3]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3350      	adds	r3, #80	; 0x50
 8003cb6:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003cc2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003cca:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003cd2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	7d7b      	ldrb	r3, [r7, #21]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003ce0:	7dfa      	ldrb	r2, [r7, #23]
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d201      	bcs.n	8003cec <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	791b      	ldrb	r3, [r3, #4]
 8003cf0:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	795b      	ldrb	r3, [r3, #5]
 8003cf6:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003cf8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003cfc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	7b9b      	ldrb	r3, [r3, #14]
 8003d04:	7bb8      	ldrb	r0, [r7, #14]
 8003d06:	f7ff ff9c 	bl	8003c42 <u8g2_add_vector_x>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003d0e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003d12:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	7b9b      	ldrb	r3, [r3, #14]
 8003d1a:	7b78      	ldrb	r0, [r7, #13]
 8003d1c:	f7ff ff61 	bl	8003be2 <u8g2_add_vector_y>
 8003d20:	4603      	mov	r3, r0
 8003d22:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003d24:	78bb      	ldrb	r3, [r7, #2]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00f      	beq.n	8003d4a <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	7b1a      	ldrb	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, 
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	7b9b      	ldrb	r3, [r3, #14]
 8003d38:	7db8      	ldrb	r0, [r7, #22]
 8003d3a:	7b7a      	ldrb	r2, [r7, #13]
 8003d3c:	7bb9      	ldrb	r1, [r7, #14]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4603      	mov	r3, r0
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fd15 	bl	8004772 <u8g2_DrawHVLine>
 8003d48:	e012      	b.n	8003d70 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	7adb      	ldrb	r3, [r3, #11]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10e      	bne.n	8003d70 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	7b5a      	ldrb	r2, [r3, #13]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, 
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	7b9b      	ldrb	r3, [r3, #14]
 8003d60:	7db8      	ldrb	r0, [r7, #22]
 8003d62:	7b7a      	ldrb	r2, [r7, #13]
 8003d64:	7bb9      	ldrb	r1, [r7, #14]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4603      	mov	r3, r0
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fd01 	bl	8004772 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003d70:	7dfa      	ldrb	r2, [r7, #23]
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d309      	bcc.n	8003d8c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8003d78:	7dfa      	ldrb	r2, [r7, #23]
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	757b      	strb	r3, [r7, #21]
    ly++;
 8003d84:	7d3b      	ldrb	r3, [r7, #20]
 8003d86:	3301      	adds	r3, #1
 8003d88:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003d8a:	e79f      	b.n	8003ccc <u8g2_font_decode_len+0x2a>
      break;
 8003d8c:	bf00      	nop
  }
  lx += cnt;
 8003d8e:	7d7a      	ldrb	r2, [r7, #21]
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	4413      	add	r3, r2
 8003d94:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003d96:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8003d9e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	71da      	strb	r2, [r3, #7]
  
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3350      	adds	r3, #80	; 0x50
 8003dbc:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fe99 	bl	8003b0a <u8g2_font_decode_get_unsigned_bits>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	b25a      	sxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8003de6:	4619      	mov	r1, r3
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff fe8e 	bl	8003b0a <u8g2_font_decode_get_unsigned_bits>
 8003dee:	4603      	mov	r3, r0
 8003df0:	b25a      	sxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	7b1b      	ldrb	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	735a      	strb	r2, [r3, #13]
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3350      	adds	r3, #80	; 0x50
 8003e2a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffbd 	bl	8003dae <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e3a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003e42:	4619      	mov	r1, r3
 8003e44:	6938      	ldr	r0, [r7, #16]
 8003e46:	f7ff fea9 	bl	8003b9c <u8g2_font_decode_get_signed_bits>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8003e54:	4619      	mov	r1, r3
 8003e56:	6938      	ldr	r0, [r7, #16]
 8003e58:	f7ff fea0 	bl	8003b9c <u8g2_font_decode_get_signed_bits>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003e66:	4619      	mov	r1, r3
 8003e68:	6938      	ldr	r0, [r7, #16]
 8003e6a:	f7ff fe97 	bl	8003b9c <u8g2_font_decode_get_signed_bits>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f340 80cf 	ble.w	800401c <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	7918      	ldrb	r0, [r3, #4]
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	7b7b      	ldrb	r3, [r7, #13]
 8003e86:	4413      	add	r3, r2
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	425b      	negs	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	b25a      	sxtb	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	7b9b      	ldrb	r3, [r3, #14]
 8003e94:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003e98:	f7ff fed3 	bl	8003c42 <u8g2_add_vector_x>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	7958      	ldrb	r0, [r3, #5]
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	7b7b      	ldrb	r3, [r7, #13]
 8003eac:	4413      	add	r3, r2
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	425b      	negs	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	b25a      	sxtb	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	7b9b      	ldrb	r3, [r3, #14]
 8003eba:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003ebe:	f7ff fe90 	bl	8003be2 <u8g2_add_vector_y>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	791b      	ldrb	r3, [r3, #4]
 8003ece:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	795b      	ldrb	r3, [r3, #5]
 8003ed4:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8003eda:	7d7b      	ldrb	r3, [r7, #21]
 8003edc:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	7b9b      	ldrb	r3, [r3, #14]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d852      	bhi.n	8003f8c <u8g2_font_decode_glyph+0x170>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <u8g2_font_decode_glyph+0xd0>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003efd 	.word	0x08003efd
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f39 	.word	0x08003f39
 8003ef8:	08003f69 	.word	0x08003f69
      {
	case 0:
	    x1 += decode->glyph_width;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	7dbb      	ldrb	r3, [r7, #22]
 8003f06:	4413      	add	r3, r2
 8003f08:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	7d3b      	ldrb	r3, [r7, #20]
 8003f0e:	4413      	add	r3, r2
 8003f10:	753b      	strb	r3, [r7, #20]
	    break;
 8003f12:	e03b      	b.n	8003f8c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	7dfa      	ldrb	r2, [r7, #23]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8003f22:	7dbb      	ldrb	r3, [r7, #22]
 8003f24:	3301      	adds	r3, #1
 8003f26:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	7d3b      	ldrb	r3, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	753b      	strb	r3, [r7, #20]
	    break;
 8003f36:	e029      	b.n	8003f8c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	7dfa      	ldrb	r2, [r7, #23]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8003f4c:	7dbb      	ldrb	r3, [r7, #22]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	7d7a      	ldrb	r2, [r7, #21]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003f5a:	7d7b      	ldrb	r3, [r7, #21]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003f60:	7d3b      	ldrb	r3, [r7, #20]
 8003f62:	3301      	adds	r3, #1
 8003f64:	753b      	strb	r3, [r7, #20]
	    break;	  
 8003f66:	e011      	b.n	8003f8c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	7dbb      	ldrb	r3, [r7, #22]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	7d7a      	ldrb	r2, [r7, #21]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003f7e:	7d7b      	ldrb	r3, [r7, #21]
 8003f80:	3301      	adds	r3, #1
 8003f82:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003f84:	7d3b      	ldrb	r3, [r7, #20]
 8003f86:	3301      	adds	r3, #1
 8003f88:	753b      	strb	r3, [r7, #20]
	    break;	  
 8003f8a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003f8c:	7db8      	ldrb	r0, [r7, #22]
 8003f8e:	7d7a      	ldrb	r2, [r7, #21]
 8003f90:	7df9      	ldrb	r1, [r7, #23]
 8003f92:	7d3b      	ldrb	r3, [r7, #20]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	4603      	mov	r3, r0
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fc6f 	bl	800487c <u8g2_IsIntersection>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <u8g2_font_decode_glyph+0x18e>
	return d;
 8003fa4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003fa8:	e03a      	b.n	8004020 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2200      	movs	r2, #0
 8003fae:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6938      	ldr	r0, [r7, #16]
 8003fc0:	f7ff fda3 	bl	8003b0a <u8g2_font_decode_get_unsigned_bits>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6938      	ldr	r0, [r7, #16]
 8003fd2:	f7ff fd9a 	bl	8003b0a <u8g2_font_decode_get_unsigned_bits>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003fda:	7afb      	ldrb	r3, [r7, #11]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff fe5e 	bl	8003ca2 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003fe6:	7abb      	ldrb	r3, [r7, #10]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff fe58 	bl	8003ca2 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	6938      	ldr	r0, [r7, #16]
 8003ff6:	f7ff fd88 	bl	8003b0a <u8g2_font_decode_get_unsigned_bits>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ec      	bne.n	8003fda <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004006:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800400a:	429a      	cmp	r2, r3
 800400c:	dd00      	ble.n	8004010 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800400e:	e7d2      	b.n	8003fb6 <u8g2_font_decode_glyph+0x19a>
	break;
 8004010:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	7b1a      	ldrb	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  return d;
 800401c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3317      	adds	r3, #23
 800403e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	2bff      	cmp	r3, #255	; 0xff
 8004044:	d82a      	bhi.n	800409c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d907      	bls.n	800405c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8004052:	461a      	mov	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4413      	add	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e009      	b.n	8004070 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d906      	bls.n	8004070 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8004068:	461a      	mov	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4413      	add	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3301      	adds	r3, #1
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d04e      	beq.n	8004118 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	887a      	ldrh	r2, [r7, #2]
 8004082:	429a      	cmp	r2, r3
 8004084:	d102      	bne.n	800408c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3302      	adds	r3, #2
 800408a:	e049      	b.n	8004120 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3301      	adds	r3, #1
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4413      	add	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800409a:	e7e9      	b.n	8004070 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80040a2:	461a      	mov	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4413      	add	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80040ae:	2100      	movs	r1, #0
 80040b0:	6938      	ldr	r0, [r7, #16]
 80040b2:	f7ff fc62 	bl	800397a <u8g2_font_get_word>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461a      	mov	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	4413      	add	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80040c0:	2102      	movs	r1, #2
 80040c2:	6938      	ldr	r0, [r7, #16]
 80040c4:	f7ff fc59 	bl	800397a <u8g2_font_get_word>
 80040c8:	4603      	mov	r3, r0
 80040ca:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3304      	adds	r3, #4
 80040d0:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80040d2:	89fa      	ldrh	r2, [r7, #14]
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d3e9      	bcc.n	80040ae <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80040e0:	89fb      	ldrh	r3, [r7, #14]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	3301      	adds	r3, #1
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	89fb      	ldrh	r3, [r7, #14]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80040f4:	89fb      	ldrh	r3, [r7, #14]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80040fa:	89fa      	ldrh	r2, [r7, #14]
 80040fc:	887b      	ldrh	r3, [r7, #2]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d102      	bne.n	8004108 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3303      	adds	r3, #3
 8004106:	e00b      	b.n	8004120 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3302      	adds	r3, #2
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4413      	add	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8004116:	e7e0      	b.n	80040da <u8g2_font_get_glyph_data+0xb2>
	break;
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <u8g2_font_get_glyph_data+0xf6>
	break;
 800411c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	461a      	mov	r2, r3
 8004136:	4603      	mov	r3, r0
 8004138:	70fb      	strb	r3, [r7, #3]
 800413a:	460b      	mov	r3, r1
 800413c:	70bb      	strb	r3, [r7, #2]
 800413e:	4613      	mov	r3, r2
 8004140:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  u8g2->font_decode.target_y = y;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	78ba      	ldrb	r2, [r7, #2]
 8004152:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004156:	883b      	ldrh	r3, [r7, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff64 	bl	8004028 <u8g2_font_get_glyph_data>
 8004160:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff fe56 	bl	8003e1c <u8g2_font_decode_glyph>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff4a 	bl	8004028 <u8g2_font_get_glyph_data>
 8004194:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 800419c:	2300      	movs	r3, #0
 800419e:	e027      	b.n	80041f0 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 80041a0:	68f9      	ldr	r1, [r7, #12]
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fe03 	bl	8003dae <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7ff fcf0 	bl	8003b9c <u8g2_font_decode_get_signed_bits>
 80041bc:	4603      	mov	r3, r0
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7ff fce1 	bl	8003b9c <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7ff fcd7 	bl	8003b9c <u8g2_font_decode_get_signed_bits>
 80041ee:	4603      	mov	r3, r0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	70fb      	strb	r3, [r7, #3]
 800420a:	460b      	mov	r3, r1
 800420c:	70bb      	strb	r3, [r7, #2]
 800420e:	4613      	mov	r3, r2
 8004210:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8004218:	2b03      	cmp	r3, #3
 800421a:	d833      	bhi.n	8004284 <u8g2_DrawGlyph+0x8c>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <u8g2_DrawGlyph+0x2c>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004235 	.word	0x08004235
 8004228:	08004249 	.word	0x08004249
 800422c:	0800425d 	.word	0x0800425d
 8004230:	08004271 	.word	0x08004271
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	78bb      	ldrb	r3, [r7, #2]
 8004242:	4413      	add	r3, r2
 8004244:	70bb      	strb	r3, [r7, #2]
      break;
 8004246:	e01d      	b.n	8004284 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	70fb      	strb	r3, [r7, #3]
      break;
 800425a:	e013      	b.n	8004284 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	78bb      	ldrb	r3, [r7, #2]
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	70bb      	strb	r3, [r7, #2]
      break;
 800426e:	e009      	b.n	8004284 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
 8004278:	4603      	mov	r3, r0
 800427a:	461a      	mov	r2, r3
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	4413      	add	r3, r2
 8004280:	70fb      	strb	r3, [r7, #3]
      break;
 8004282:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004284:	883b      	ldrh	r3, [r7, #0]
 8004286:	78ba      	ldrb	r2, [r7, #2]
 8004288:	78f9      	ldrb	r1, [r7, #3]
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ff4c 	bl	8004128 <u8g2_font_draw_glyph>
 8004290:	4603      	mov	r3, r0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop

0800429c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	72fb      	strb	r3, [r7, #11]
 80042aa:	4613      	mov	r3, r2
 80042ac:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fd30 	bl	8004d14 <u8x8_utf8_init>
  sum = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	7812      	ldrb	r2, [r2, #0]
 80042c0:	4611      	mov	r1, r2
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	4798      	blx	r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80042ca:	8abb      	ldrh	r3, [r7, #20]
 80042cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d038      	beq.n	8004346 <u8g2_draw_string+0xaa>
      break;
    str++;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3301      	adds	r3, #1
 80042d8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80042da:	8abb      	ldrh	r3, [r7, #20]
 80042dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d0e9      	beq.n	80042b8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80042e4:	8abb      	ldrh	r3, [r7, #20]
 80042e6:	7aba      	ldrb	r2, [r7, #10]
 80042e8:	7af9      	ldrb	r1, [r7, #11]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff ff84 	bl	80041f8 <u8g2_DrawGlyph>
 80042f0:	4603      	mov	r3, r0
 80042f2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d81e      	bhi.n	800433c <u8g2_draw_string+0xa0>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <u8g2_draw_string+0x68>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004315 	.word	0x08004315
 8004308:	0800431f 	.word	0x0800431f
 800430c:	08004329 	.word	0x08004329
 8004310:	08004333 	.word	0x08004333
      {
	case 0:
	  x += delta;
 8004314:	7afa      	ldrb	r2, [r7, #11]
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	4413      	add	r3, r2
 800431a:	72fb      	strb	r3, [r7, #11]
	  break;
 800431c:	e00e      	b.n	800433c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800431e:	7aba      	ldrb	r2, [r7, #10]
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	4413      	add	r3, r2
 8004324:	72bb      	strb	r3, [r7, #10]
	  break;
 8004326:	e009      	b.n	800433c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004328:	7afa      	ldrb	r2, [r7, #11]
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	72fb      	strb	r3, [r7, #11]
	  break;
 8004330:	e004      	b.n	800433c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004332:	7aba      	ldrb	r2, [r7, #10]
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	72bb      	strb	r3, [r7, #10]
	  break;
 800433a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800433c:	7dfa      	ldrb	r2, [r7, #23]
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	4413      	add	r3, r2
 8004342:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004344:	e7b8      	b.n	80042b8 <u8g2_draw_string+0x1c>
      break;
 8004346:	bf00      	nop
    }
  }
  return sum;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop

08004354 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	460b      	mov	r3, r1
 8004360:	72fb      	strb	r3, [r7, #11]
 8004362:	4613      	mov	r3, r2
 8004364:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a06      	ldr	r2, [pc, #24]	; (8004384 <u8g2_DrawStr+0x30>)
 800436a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800436c:	7aba      	ldrb	r2, [r7, #10]
 800436e:	7af9      	ldrb	r1, [r7, #11]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff ff92 	bl	800429c <u8g2_draw_string>
 8004378:	4603      	mov	r3, r0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08004d2f 	.word	0x08004d2f

08004388 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05d      	beq.n	8004454 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f993 206d 	ldrsb.w	r2, [r3, #109]	; 0x6d
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f993 206e 	ldrsb.w	r2, [r3, #110]	; 0x6e
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04d      	beq.n	8004456 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d11c      	bne.n	80043fe <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f993 2079 	ldrsb.w	r2, [r3, #121]	; 0x79
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f993 306f 	ldrsb.w	r3, [r3, #111]	; 0x6f
 80043d0:	429a      	cmp	r2, r3
 80043d2:	da05      	bge.n	80043e0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f993 206f 	ldrsb.w	r2, [r3, #111]	; 0x6f
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f993 207a 	ldrsb.w	r2, [r3, #122]	; 0x7a
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80043ec:	429a      	cmp	r2, r3
 80043ee:	dd32      	ble.n	8004456 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 80043fc:	e02b      	b.n	8004456 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f993 3079 	ldrsb.w	r3, [r3, #121]	; 0x79
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 800440c:	4619      	mov	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8004414:	440b      	add	r3, r1
 8004416:	429a      	cmp	r2, r3
 8004418:	da0d      	bge.n	8004436 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8004420:	b2da      	uxtb	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4413      	add	r3, r2
 800442c:	b2db      	uxtb	r3, r3
 800442e:	b25a      	sxtb	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f993 207a 	ldrsb.w	r2, [r3, #122]	; 0x7a
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8004442:	429a      	cmp	r2, r3
 8004444:	dd07      	ble.n	8004456 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f993 206c 	ldrsb.w	r2, [r3, #108]	; 0x6c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8004452:	e000      	b.n	8004456 <u8g2_UpdateRefHeight+0xce>
    return;
 8004454:	bf00      	nop
  }  
}
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  return 0;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
	...

08004474 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a03      	ldr	r2, [pc, #12]	; (800448c <u8g2_SetFontPosBaseline+0x18>)
 8004480:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	0800445f 	.word	0x0800445f

08004490 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d00b      	beq.n	80044bc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	649a      	str	r2, [r3, #72]	; 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3360      	adds	r3, #96	; 0x60
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fa81 	bl	80039b8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ff66 	bl	8004388 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <u8g2_string_width>:
/*===============================================*/

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fc1c 	bl	8004d14 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	7812      	ldrb	r2, [r2, #0]
 80044ec:	4611      	mov	r1, r2
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80044f6:	89bb      	ldrh	r3, [r7, #12]
 80044f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <u8g2_string_width+0x64>
      break;
    str++;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8004506:	89bb      	ldrh	r3, [r7, #12]
 8004508:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800450c:	4293      	cmp	r3, r2
 800450e:	d0e9      	beq.n	80044e4 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8004510:	89bb      	ldrh	r3, [r7, #12]
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fe32 	bl	800417e <u8g2_GetGlyphWidth>
 800451a:	4603      	mov	r3, r0
 800451c:	73bb      	strb	r3, [r7, #14]
      w += dx;
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	7bbb      	ldrb	r3, [r7, #14]
 8004522:	4413      	add	r3, r2
 8004524:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004526:	e7dd      	b.n	80044e4 <u8g2_string_width+0x20>
      break;
 8004528:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8004530:	2b00      	cmp	r3, #0
 8004532:	d011      	beq.n	8004558 <u8g2_string_width+0x94>
  {
    w -= dx;
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	7bbb      	ldrb	r3, [r7, #14]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8004542:	b2da      	uxtb	r2, r3
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	4413      	add	r3, r2
 8004548:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f993 307b 	ldrsb.w	r3, [r3, #123]	; 0x7b
 8004550:	b2da      	uxtb	r2, r3
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	4413      	add	r3, r2
 8004556:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a05      	ldr	r2, [pc, #20]	; (8004588 <u8g2_GetStrWidth+0x24>)
 8004572:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ffa4 	bl	80044c4 <u8g2_string_width>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	08004d2f 	.word	0x08004d2f

0800458c <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80045a6:	7dfa      	ldrb	r2, [r7, #23]
 80045a8:	7dbb      	ldrb	r3, [r7, #22]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d911      	bls.n	80045d2 <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80045ae:	7dfa      	ldrb	r2, [r7, #23]
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d208      	bcs.n	80045c8 <u8g2_clip_intersection+0x3c>
    {
      b = d;
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	75bb      	strb	r3, [r7, #22]
      b--;
 80045ba:	7dbb      	ldrb	r3, [r7, #22]
 80045bc:	3b01      	subs	r3, #1
 80045be:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	7dba      	ldrb	r2, [r7, #22]
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e004      	b.n	80045d2 <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7dfa      	ldrb	r2, [r7, #23]
 80045d0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80045d2:	7dfa      	ldrb	r2, [r7, #23]
 80045d4:	79fb      	ldrb	r3, [r7, #7]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d301      	bcc.n	80045de <u8g2_clip_intersection+0x52>
    return 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	e00c      	b.n	80045f8 <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 80045de:	7dbb      	ldrb	r3, [r7, #22]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <u8g2_clip_intersection+0x5c>
    return 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e007      	b.n	80045f8 <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 80045e8:	7dba      	ldrb	r2, [r7, #22]
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d902      	bls.n	80045f6 <u8g2_clip_intersection+0x6a>
    *bp = d;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	79fa      	ldrb	r2, [r7, #7]
 80045f4:	701a      	strb	r2, [r3, #0]
    
  return 1;
 80045f6:	2301      	movs	r3, #1
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004602:	b5b0      	push	{r4, r5, r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af02      	add	r7, sp, #8
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	461a      	mov	r2, r3
 8004610:	4603      	mov	r3, r0
 8004612:	70fb      	strb	r3, [r7, #3]
 8004614:	460b      	mov	r3, r1
 8004616:	70bb      	strb	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 403b 	ldrb.w	r4, [r3, #59]	; 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a


  if ( dir == 0 )
 8004628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11a      	bne.n	8004666 <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 8004630:	78bb      	ldrb	r3, [r7, #2]
 8004632:	42a3      	cmp	r3, r4
 8004634:	d23d      	bcs.n	80046b2 <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	73fb      	strb	r3, [r7, #15]
    a += len;
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	787b      	ldrb	r3, [r7, #1]
 800463e:	4413      	add	r3, r2
 8004640:	b2db      	uxtb	r3, r3
 8004642:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 8004644:	f107 010f 	add.w	r1, r7, #15
 8004648:	1cfb      	adds	r3, r7, #3
 800464a:	462a      	mov	r2, r5
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff9d 	bl	800458c <u8g2_clip_intersection>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02e      	beq.n	80046b6 <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	707b      	strb	r3, [r7, #1]
    len -= x;
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	787a      	ldrb	r2, [r7, #1]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	707b      	strb	r3, [r7, #1]
 8004664:	e019      	b.n	800469a <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	42ab      	cmp	r3, r5
 800466a:	d226      	bcs.n	80046ba <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 800466c:	78bb      	ldrb	r3, [r7, #2]
 800466e:	73fb      	strb	r3, [r7, #15]
    a += len;
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	787b      	ldrb	r3, [r7, #1]
 8004674:	4413      	add	r3, r2
 8004676:	b2db      	uxtb	r3, r3
 8004678:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 800467a:	f107 010f 	add.w	r1, r7, #15
 800467e:	1cbb      	adds	r3, r7, #2
 8004680:	4622      	mov	r2, r4
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff82 	bl	800458c <u8g2_clip_intersection>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d017      	beq.n	80046be <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	707b      	strb	r3, [r7, #1]
    len -= y;
 8004692:	78bb      	ldrb	r3, [r7, #2]
 8004694:	787a      	ldrb	r2, [r7, #1]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800469e:	78f9      	ldrb	r1, [r7, #3]
 80046a0:	78ba      	ldrb	r2, [r7, #2]
 80046a2:	7878      	ldrb	r0, [r7, #1]
 80046a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4603      	mov	r3, r0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	47a0      	blx	r4
 80046b0:	e006      	b.n	80046c0 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 80046b2:	bf00      	nop
 80046b4:	e004      	b.n	80046c0 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 80046b6:	bf00      	nop
 80046b8:	e002      	b.n	80046c0 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 80046be:	bf00      	nop
}
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bdb0      	pop	{r4, r5, r7, pc}

080046c6 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80046c6:	b590      	push	{r4, r7, lr}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af02      	add	r7, sp, #8
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	4608      	mov	r0, r1
 80046d0:	4611      	mov	r1, r2
 80046d2:	461a      	mov	r2, r3
 80046d4:	4603      	mov	r3, r0
 80046d6:	70fb      	strb	r3, [r7, #3]
 80046d8:	460b      	mov	r3, r1
 80046da:	70bb      	strb	r3, [r7, #2]
 80046dc:	4613      	mov	r3, r2
 80046de:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	78ba      	ldrb	r2, [r7, #2]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 80046f0:	787b      	ldrb	r3, [r7, #1]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d116      	bne.n	8004724 <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046fc:	78fa      	ldrb	r2, [r7, #3]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d233      	bcs.n	800476a <u8g2_draw_hv_line_4dir+0xa4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004708:	78ba      	ldrb	r2, [r7, #2]
 800470a:	429a      	cmp	r2, r3
 800470c:	d22d      	bcs.n	800476a <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004712:	7878      	ldrb	r0, [r7, #1]
 8004714:	78ba      	ldrb	r2, [r7, #2]
 8004716:	78f9      	ldrb	r1, [r7, #3]
 8004718:	7e3b      	ldrb	r3, [r7, #24]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	4603      	mov	r3, r0
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	47a0      	blx	r4
    return;
 8004722:	e022      	b.n	800476a <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 8004724:	7e3b      	ldrb	r3, [r7, #24]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d107      	bne.n	800473a <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	70fb      	strb	r3, [r7, #3]
    x++;
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	3301      	adds	r3, #1
 8004736:	70fb      	strb	r3, [r7, #3]
 8004738:	e009      	b.n	800474e <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 800473a:	7e3b      	ldrb	r3, [r7, #24]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d106      	bne.n	800474e <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 8004740:	78ba      	ldrb	r2, [r7, #2]
 8004742:	787b      	ldrb	r3, [r7, #1]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	70bb      	strb	r3, [r7, #2]
    y++;
 8004748:	78bb      	ldrb	r3, [r7, #2]
 800474a:	3301      	adds	r3, #1
 800474c:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 800474e:	7e3b      	ldrb	r3, [r7, #24]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004756:	7878      	ldrb	r0, [r7, #1]
 8004758:	78ba      	ldrb	r2, [r7, #2]
 800475a:	78f9      	ldrb	r1, [r7, #3]
 800475c:	7e3b      	ldrb	r3, [r7, #24]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff4d 	bl	8004602 <u8g2_draw_hv_line_2dir>
 8004768:	e000      	b.n	800476c <u8g2_draw_hv_line_4dir+0xa6>
    return;
 800476a:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bd90      	pop	{r4, r7, pc}

08004772 <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004772:	b590      	push	{r4, r7, lr}
 8004774:	b085      	sub	sp, #20
 8004776:	af02      	add	r7, sp, #8
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	4608      	mov	r0, r1
 800477c:	4611      	mov	r1, r2
 800477e:	461a      	mov	r2, r3
 8004780:	4603      	mov	r3, r0
 8004782:	70fb      	strb	r3, [r7, #3]
 8004784:	460b      	mov	r3, r1
 8004786:	70bb      	strb	r3, [r7, #2]
 8004788:	4613      	mov	r3, r2
 800478a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 800478c:	787b      	ldrb	r3, [r7, #1]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	685c      	ldr	r4, [r3, #4]
 8004798:	7878      	ldrb	r0, [r7, #1]
 800479a:	78ba      	ldrb	r2, [r7, #2]
 800479c:	78f9      	ldrb	r1, [r7, #3]
 800479e:	7e3b      	ldrb	r3, [r7, #24]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4603      	mov	r3, r0
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	47a0      	blx	r4
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}

080047b0 <u8g2_DrawPixel>:
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
 80047bc:	4613      	mov	r3, r2
 80047be:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047c6:	78ba      	ldrb	r2, [r7, #2]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d31a      	bcc.n	8004802 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d2:	78ba      	ldrb	r2, [r7, #2]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d216      	bcs.n	8004806 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d312      	bcc.n	800480a <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d20e      	bcs.n	800480e <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80047f0:	78ba      	ldrb	r2, [r7, #2]
 80047f2:	78f9      	ldrb	r1, [r7, #3]
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2301      	movs	r3, #1
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ffb9 	bl	8004772 <u8g2_DrawHVLine>
 8004800:	e006      	b.n	8004810 <u8g2_DrawPixel+0x60>
    return;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <u8g2_DrawPixel+0x60>
    return;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <u8g2_DrawPixel+0x60>
    return;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <u8g2_DrawPixel+0x60>
    return;
 800480e:	bf00      	nop
}
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004816:	b490      	push	{r4, r7}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	4604      	mov	r4, r0
 800481e:	4608      	mov	r0, r1
 8004820:	4611      	mov	r1, r2
 8004822:	461a      	mov	r2, r3
 8004824:	4623      	mov	r3, r4
 8004826:	71fb      	strb	r3, [r7, #7]
 8004828:	4603      	mov	r3, r0
 800482a:	71bb      	strb	r3, [r7, #6]
 800482c:	460b      	mov	r3, r1
 800482e:	717b      	strb	r3, [r7, #5]
 8004830:	4613      	mov	r3, r2
 8004832:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8004834:	797a      	ldrb	r2, [r7, #5]
 8004836:	79bb      	ldrb	r3, [r7, #6]
 8004838:	429a      	cmp	r2, r3
 800483a:	d20d      	bcs.n	8004858 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800483c:	793a      	ldrb	r2, [r7, #4]
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	429a      	cmp	r2, r3
 8004842:	d901      	bls.n	8004848 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004844:	2301      	movs	r3, #1
 8004846:	e014      	b.n	8004872 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004848:	797a      	ldrb	r2, [r7, #5]
 800484a:	793b      	ldrb	r3, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d901      	bls.n	8004854 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004850:	2301      	movs	r3, #1
 8004852:	e00e      	b.n	8004872 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004854:	2300      	movs	r3, #0
 8004856:	e00c      	b.n	8004872 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004858:	793a      	ldrb	r2, [r7, #4]
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d907      	bls.n	8004870 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004860:	797a      	ldrb	r2, [r7, #5]
 8004862:	793b      	ldrb	r3, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d901      	bls.n	800486c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004868:	2301      	movs	r3, #1
 800486a:	e002      	b.n	8004872 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004870:	2300      	movs	r3, #0
    }
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bc90      	pop	{r4, r7}
 800487a:	4770      	bx	lr

0800487c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4603      	mov	r3, r0
 800488c:	70fb      	strb	r3, [r7, #3]
 800488e:	460b      	mov	r3, r1
 8004890:	70bb      	strb	r3, [r7, #2]
 8004892:	4613      	mov	r3, r2
 8004894:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80048a2:	7c3b      	ldrb	r3, [r7, #16]
 80048a4:	78ba      	ldrb	r2, [r7, #2]
 80048a6:	f7ff ffb6 	bl	8004816 <u8g2_is_intersection_decision_tree>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <u8g2_IsIntersection+0x38>
    return 0; 
 80048b0:	2300      	movs	r3, #0
 80048b2:	e00a      	b.n	80048ca <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	f7ff ffa7 	bl	8004816 <u8g2_is_intersection_decision_tree>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	4608      	mov	r0, r1
 80048dc:	4611      	mov	r1, r2
 80048de:	461a      	mov	r2, r3
 80048e0:	4603      	mov	r3, r0
 80048e2:	70fb      	strb	r3, [r7, #3]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70bb      	strb	r3, [r7, #2]
 80048e8:	4613      	mov	r3, r2
 80048ea:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	787b      	ldrb	r3, [r7, #1]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d904      	bls.n	8004902 <u8g2_DrawLine+0x30>
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	787b      	ldrb	r3, [r7, #1]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	737b      	strb	r3, [r7, #13]
 8004900:	e003      	b.n	800490a <u8g2_DrawLine+0x38>
 8004902:	787a      	ldrb	r2, [r7, #1]
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800490a:	78ba      	ldrb	r2, [r7, #2]
 800490c:	7e3b      	ldrb	r3, [r7, #24]
 800490e:	429a      	cmp	r2, r3
 8004910:	d904      	bls.n	800491c <u8g2_DrawLine+0x4a>
 8004912:	78ba      	ldrb	r2, [r7, #2]
 8004914:	7e3b      	ldrb	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	733b      	strb	r3, [r7, #12]
 800491a:	e003      	b.n	8004924 <u8g2_DrawLine+0x52>
 800491c:	7e3a      	ldrb	r2, [r7, #24]
 800491e:	78bb      	ldrb	r3, [r7, #2]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 8004924:	7b3a      	ldrb	r2, [r7, #12]
 8004926:	7b7b      	ldrb	r3, [r7, #13]
 8004928:	429a      	cmp	r2, r3
 800492a:	d913      	bls.n	8004954 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800492c:	2301      	movs	r3, #1
 800492e:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 8004930:	7b7b      	ldrb	r3, [r7, #13]
 8004932:	723b      	strb	r3, [r7, #8]
 8004934:	7b3b      	ldrb	r3, [r7, #12]
 8004936:	737b      	strb	r3, [r7, #13]
 8004938:	7a3b      	ldrb	r3, [r7, #8]
 800493a:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	723b      	strb	r3, [r7, #8]
 8004940:	78bb      	ldrb	r3, [r7, #2]
 8004942:	70fb      	strb	r3, [r7, #3]
 8004944:	7a3b      	ldrb	r3, [r7, #8]
 8004946:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 8004948:	787b      	ldrb	r3, [r7, #1]
 800494a:	723b      	strb	r3, [r7, #8]
 800494c:	7e3b      	ldrb	r3, [r7, #24]
 800494e:	707b      	strb	r3, [r7, #1]
 8004950:	7a3b      	ldrb	r3, [r7, #8]
 8004952:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	787b      	ldrb	r3, [r7, #1]
 8004958:	429a      	cmp	r2, r3
 800495a:	d90b      	bls.n	8004974 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	723b      	strb	r3, [r7, #8]
 8004960:	787b      	ldrb	r3, [r7, #1]
 8004962:	70fb      	strb	r3, [r7, #3]
 8004964:	7a3b      	ldrb	r3, [r7, #8]
 8004966:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 8004968:	78bb      	ldrb	r3, [r7, #2]
 800496a:	723b      	strb	r3, [r7, #8]
 800496c:	7e3b      	ldrb	r3, [r7, #24]
 800496e:	70bb      	strb	r3, [r7, #2]
 8004970:	7a3b      	ldrb	r3, [r7, #8]
 8004972:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 8004974:	7b7b      	ldrb	r3, [r7, #13]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	b2db      	uxtb	r3, r3
 800497a:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800497c:	7e3a      	ldrb	r2, [r7, #24]
 800497e:	78bb      	ldrb	r3, [r7, #2]
 8004980:	429a      	cmp	r2, r3
 8004982:	d902      	bls.n	800498a <u8g2_DrawLine+0xb8>
 8004984:	2301      	movs	r3, #1
 8004986:	72bb      	strb	r3, [r7, #10]
 8004988:	e001      	b.n	800498e <u8g2_DrawLine+0xbc>
 800498a:	23ff      	movs	r3, #255	; 0xff
 800498c:	72bb      	strb	r3, [r7, #10]
  y = y1;
 800498e:	78bb      	ldrb	r3, [r7, #2]
 8004990:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 8004992:	787b      	ldrb	r3, [r7, #1]
 8004994:	2bff      	cmp	r3, #255	; 0xff
 8004996:	d102      	bne.n	800499e <u8g2_DrawLine+0xcc>
    x2--;
 8004998:	787b      	ldrb	r3, [r7, #1]
 800499a:	3b01      	subs	r3, #1
 800499c:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	e024      	b.n	80049ee <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 80049a4:	7a7b      	ldrb	r3, [r7, #9]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 80049aa:	7bba      	ldrb	r2, [r7, #14]
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fefd 	bl	80047b0 <u8g2_DrawPixel>
 80049b6:	e005      	b.n	80049c4 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fef6 	bl	80047b0 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 80049c4:	7afa      	ldrb	r2, [r7, #11]
 80049c6:	7b3b      	ldrb	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 80049ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da08      	bge.n	80049e8 <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 80049d6:	7aba      	ldrb	r2, [r7, #10]
 80049d8:	7bbb      	ldrb	r3, [r7, #14]
 80049da:	4413      	add	r3, r2
 80049dc:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 80049de:	7afa      	ldrb	r2, [r7, #11]
 80049e0:	7b7b      	ldrb	r3, [r7, #13]
 80049e2:	4413      	add	r3, r2
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	3301      	adds	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d9d6      	bls.n	80049a4 <u8g2_DrawLine+0xd2>
    }
  }
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	4608      	mov	r0, r1
 8004a08:	4611      	mov	r1, r2
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	70fb      	strb	r3, [r7, #3]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70bb      	strb	r3, [r7, #2]
 8004a14:	4613      	mov	r3, r2
 8004a16:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004a18:	78bb      	ldrb	r3, [r7, #2]
 8004a1a:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8004a28:	7c3a      	ldrb	r2, [r7, #16]
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d801      	bhi.n	8004a48 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004a44:	7c3b      	ldrb	r3, [r7, #16]
 8004a46:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d001      	beq.n	8004a56 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004a52:	7c3b      	ldrb	r3, [r7, #16]
 8004a54:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004a56:	78bb      	ldrb	r3, [r7, #2]
 8004a58:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8004a5a:	89fb      	ldrh	r3, [r7, #14]
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	7c1b      	ldrb	r3, [r3, #16]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	89fa      	ldrh	r2, [r7, #14]
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8004a78:	89fb      	ldrh	r3, [r7, #14]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  ptr += x;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4413      	add	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8004a88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d117      	bne.n	8004ac0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
  {
      do
      {
	*ptr |= or_mask;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	781a      	ldrb	r2, [r3, #0]
 8004a94:	7cbb      	ldrb	r3, [r7, #18]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	7c7b      	ldrb	r3, [r7, #17]
 8004aa4:	4053      	eors	r3, r2
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
	len--;
 8004ab2:	787b      	ldrb	r3, [r7, #1]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8004ab8:	787b      	ldrb	r3, [r7, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e8      	bne.n	8004a90 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004abe:	e039      	b.n	8004b34 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	781a      	ldrb	r2, [r3, #0]
 8004ac4:	7cbb      	ldrb	r3, [r7, #18]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	7c7b      	ldrb	r3, [r7, #17]
 8004ad4:	4053      	eors	r3, r2
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	74fb      	strb	r3, [r7, #19]
      len--;
 8004aea:	787b      	ldrb	r3, [r7, #1]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d115      	bne.n	8004b22 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004afc:	461a      	mov	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4413      	add	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d801      	bhi.n	8004b12 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d008      	beq.n	8004b2e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	747b      	strb	r3, [r7, #17]
 8004b20:	e005      	b.n	8004b2e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8004b22:	7cbb      	ldrb	r3, [r7, #18]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8004b28:	7c7b      	ldrb	r3, [r7, #17]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8004b2e:	787b      	ldrb	r3, [r7, #1]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1c5      	bne.n	8004ac0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	649a      	str	r2, [r3, #72]	; 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	79fa      	ldrb	r2, [r7, #7]
 8004b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  u8g2->bitmap_transparency = 0;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  u8g2->draw_color = 1;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  u8g2->is_auto_page_clear = 1;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  
  u8g2->cb = u8g2_cb;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update(u8g2);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff fc67 	bl	8004474 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
#endif
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bc4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	7c1b      	ldrb	r3, [r3, #16]
 8004bda:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b1f      	cmp	r3, #31
 8004be0:	d901      	bls.n	8004be6 <u8g2_update_dimension_common+0x30>
    t = 31;
 8004be2:	231f      	movs	r3, #31
 8004be4:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bfa:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c10:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8004c1a:	4413      	add	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	7c52      	ldrb	r2, [r2, #17]
 8004c22:	4293      	cmp	r3, r2
 8004c24:	dd07      	ble.n	8004c36 <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	7c5a      	ldrb	r2, [r3, #17]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	22f0      	movs	r2, #240	; 0xf0
 8004c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	8a9b      	ldrh	r3, [r3, #20]
 8004c74:	2bf0      	cmp	r3, #240	; 0xf0
 8004c76:	d806      	bhi.n	8004c86 <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	8a9b      	ldrh	r3, [r3, #20]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	8adb      	ldrh	r3, [r3, #22]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff ff85 	bl	8004bb6 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	70fb      	strb	r3, [r7, #3]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	70bb      	strb	r3, [r7, #2]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 8004cfa:	7878      	ldrb	r0, [r7, #1]
 8004cfc:	78ba      	ldrb	r2, [r7, #2]
 8004cfe:	78f9      	ldrb	r1, [r7, #3]
 8004d00:	7c3b      	ldrb	r3, [r7, #16]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4603      	mov	r3, r0
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fcdd 	bl	80046c6 <u8g2_draw_hv_line_4dir>
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <u8x8_ascii_next+0x18>
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	2b0a      	cmp	r3, #10
 8004d44:	d102      	bne.n	8004d4c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d4a:	e001      	b.n	8004d50 <u8x8_ascii_next+0x22>
  return b;
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	b29b      	uxth	r3, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <u8x8_byte_SetDC>:
 */

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8004d5a:	b590      	push	{r4, r7, lr}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	70fb      	strb	r3, [r7, #3]
	return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691c      	ldr	r4, [r3, #16]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2120      	movs	r1, #32
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	47a0      	blx	r4
 8004d74:	4603      	mov	r3, r0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}

08004d7e <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004d7e:	b590      	push	{r4, r7, lr}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	460b      	mov	r3, r1
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	72fb      	strb	r3, [r7, #11]
	return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691c      	ldr	r4, [r3, #16]
 8004d90:	7afa      	ldrb	r2, [r7, #11]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2117      	movs	r1, #23
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	47a0      	blx	r4
 8004d9a:	4603      	mov	r3, r0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd90      	pop	{r4, r7, pc}

08004da4 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
	return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004db0:	1cfb      	adds	r3, r7, #3
 8004db2:	461a      	mov	r2, r3
 8004db4:	2101      	movs	r1, #1
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ffe1 	bl	8004d7e <u8x8_byte_SendBytes>
 8004dbc:	4603      	mov	r3, r0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
 */

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	72fb      	strb	r3, [r7, #11]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	72bb      	strb	r3, [r7, #10]
	uint8_t i, b;
	uint8_t *data;
	uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	7b1b      	ldrb	r3, [r3, #12]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
	uint8_t not_takeover_edge = 1 - takeover_edge;
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	f1c3 0301 	rsb	r3, r3, #1
 8004dec:	75bb      	strb	r3, [r7, #22]

	switch(msg)
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	3b14      	subs	r3, #20
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	f200 80a4 	bhi.w	8004f40 <u8x8_byte_4wire_sw_spi+0x178>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <u8x8_byte_4wire_sw_spi+0x38>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004ec3 	.word	0x08004ec3
 8004e04:	08004f41 	.word	0x08004f41
 8004e08:	08004f41 	.word	0x08004f41
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004ef9 	.word	0x08004ef9
 8004e14:	08004f1d 	.word	0x08004f1d
 8004e18:	08004f41 	.word	0x08004f41
 8004e1c:	08004f41 	.word	0x08004f41
 8004e20:	08004f41 	.word	0x08004f41
 8004e24:	08004f41 	.word	0x08004f41
 8004e28:	08004f41 	.word	0x08004f41
 8004e2c:	08004f41 	.word	0x08004f41
 8004e30:	08004eeb 	.word	0x08004eeb
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	61bb      	str	r3, [r7, #24]
		while( arg_int > 0 )
 8004e38:	e03f      	b.n	8004eba <u8x8_byte_4wire_sw_spi+0xf2>
		{
			b = *data;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	77bb      	strb	r3, [r7, #30]
			data++;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	3301      	adds	r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]
			arg_int--;
 8004e46:	7abb      	ldrb	r3, [r7, #10]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	72bb      	strb	r3, [r7, #10]
			for( i = 0; i < 8; i++ )
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e030      	b.n	8004eb4 <u8x8_byte_4wire_sw_spi+0xec>
			{
				if ( b & 128 )
 8004e52:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da05      	bge.n	8004e66 <u8x8_byte_4wire_sw_spi+0x9e>
					u8x8_gpio_SetSPIData(u8x8, 1);
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2141      	movs	r1, #65	; 0x41
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 faf6 	bl	8005450 <u8x8_gpio_call>
 8004e64:	e004      	b.n	8004e70 <u8x8_byte_4wire_sw_spi+0xa8>
				else
					u8x8_gpio_SetSPIData(u8x8, 0);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2141      	movs	r1, #65	; 0x41
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 faf0 	bl	8005450 <u8x8_gpio_call>
				b <<= 1;
 8004e70:	7fbb      	ldrb	r3, [r7, #30]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	77bb      	strb	r3, [r7, #30]

				u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 8004e76:	7dbb      	ldrb	r3, [r7, #22]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fae7 	bl	8005450 <u8x8_gpio_call>
				u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	799b      	ldrb	r3, [r3, #6]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fadf 	bl	8005450 <u8x8_gpio_call>
				u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	461a      	mov	r2, r3
 8004e96:	2140      	movs	r1, #64	; 0x40
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fad9 	bl	8005450 <u8x8_gpio_call>
				u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	79db      	ldrb	r3, [r3, #7]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fad1 	bl	8005450 <u8x8_gpio_call>
			for( i = 0; i < 8; i++ )
 8004eae:	7ffb      	ldrb	r3, [r7, #31]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	7ffb      	ldrb	r3, [r7, #31]
 8004eb6:	2b07      	cmp	r3, #7
 8004eb8:	d9cb      	bls.n	8004e52 <u8x8_byte_4wire_sw_spi+0x8a>
		while( arg_int > 0 )
 8004eba:	7abb      	ldrb	r3, [r7, #10]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1bc      	bne.n	8004e3a <u8x8_byte_4wire_sw_spi+0x72>
			}
		}
		break;
 8004ec0:	e040      	b.n	8004f44 <u8x8_byte_4wire_sw_spi+0x17c>

	case U8X8_MSG_BYTE_INIT:
		/* disable chipselect */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2149      	movs	r1, #73	; 0x49
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fabf 	bl	8005450 <u8x8_gpio_call>
		/* no wait required here */

		/* for SPI: setup correct level of the clock signal */
		u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	7b1b      	ldrb	r3, [r3, #12]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2140      	movs	r1, #64	; 0x40
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fab4 	bl	8005450 <u8x8_gpio_call>
		break;
 8004ee8:	e02c      	b.n	8004f44 <u8x8_byte_4wire_sw_spi+0x17c>
	case U8X8_MSG_BYTE_SET_DC:
		u8x8_gpio_SetDC(u8x8, arg_int);
 8004eea:	7abb      	ldrb	r3, [r7, #10]
 8004eec:	461a      	mov	r2, r3
 8004eee:	214a      	movs	r1, #74	; 0x4a
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 faad 	bl	8005450 <u8x8_gpio_call>
		break;
 8004ef6:	e025      	b.n	8004f44 <u8x8_byte_4wire_sw_spi+0x17c>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	2149      	movs	r1, #73	; 0x49
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 faa4 	bl	8005450 <u8x8_gpio_call>
		u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	695c      	ldr	r4, [r3, #20]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	789a      	ldrb	r2, [r3, #2]
 8004f12:	2300      	movs	r3, #0
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	47a0      	blx	r4
		break;
 8004f1a:	e013      	b.n	8004f44 <u8x8_byte_4wire_sw_spi+0x17c>
	case U8X8_MSG_BYTE_END_TRANSFER:
		u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	695c      	ldr	r4, [r3, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	78da      	ldrb	r2, [r3, #3]
 8004f26:	2300      	movs	r3, #0
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	47a0      	blx	r4
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	461a      	mov	r2, r3
 8004f36:	2149      	movs	r1, #73	; 0x49
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fa89 	bl	8005450 <u8x8_gpio_call>
		break;
 8004f3e:	e001      	b.n	8004f44 <u8x8_byte_4wire_sw_spi+0x17c>
	default:
		return 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <u8x8_byte_4wire_sw_spi+0x17e>
	}
	return 1;
 8004f44:	2301      	movs	r3, #1
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}
 8004f4e:	bf00      	nop

08004f50 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68dc      	ldr	r4, [r3, #12]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	2300      	movs	r3, #0
 8004f64:	2115      	movs	r1, #21
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	47a0      	blx	r4
 8004f6a:	4603      	mov	r3, r0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}

08004f74 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68dc      	ldr	r4, [r3, #12]
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	2300      	movs	r3, #0
 8004f88:	2116      	movs	r1, #22
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	47a0      	blx	r4
 8004f8e:	4603      	mov	r3, r0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd90      	pop	{r4, r7, pc}

08004f98 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	68dc      	ldr	r4, [r3, #12]
 8004faa:	7afa      	ldrb	r2, [r7, #11]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2117      	movs	r1, #23
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	47a0      	blx	r4
 8004fb4:	4603      	mov	r3, r0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}

08004fbe <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004fbe:	b590      	push	{r4, r7, lr}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68dc      	ldr	r4, [r3, #12]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2118      	movs	r1, #24
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	47a0      	blx	r4
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}

08004fde <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004fde:	b590      	push	{r4, r7, lr}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68dc      	ldr	r4, [r3, #12]
 8004fea:	2300      	movs	r3, #0
 8004fec:	2200      	movs	r2, #0
 8004fee:	2119      	movs	r1, #25
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	47a0      	blx	r4
 8004ff4:	4603      	mov	r3, r0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd90      	pop	{r4, r7, pc}

08004ffe <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004ffe:	b590      	push	{r4, r7, lr}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	73fb      	strb	r3, [r7, #15]
    data++;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b17      	cmp	r3, #23
 8005018:	d017      	beq.n	800504a <u8x8_cad_SendSequence+0x4c>
 800501a:	2b17      	cmp	r3, #23
 800501c:	dc02      	bgt.n	8005024 <u8x8_cad_SendSequence+0x26>
 800501e:	2b15      	cmp	r3, #21
 8005020:	db37      	blt.n	8005092 <u8x8_cad_SendSequence+0x94>
 8005022:	e004      	b.n	800502e <u8x8_cad_SendSequence+0x30>
 8005024:	2b19      	cmp	r3, #25
 8005026:	dd1e      	ble.n	8005066 <u8x8_cad_SendSequence+0x68>
 8005028:	2bfe      	cmp	r3, #254	; 0xfe
 800502a:	d024      	beq.n	8005076 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800502c:	e031      	b.n	8005092 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68dc      	ldr	r4, [r3, #12]
 8005038:	7bba      	ldrb	r2, [r7, #14]
 800503a:	7bf9      	ldrb	r1, [r7, #15]
 800503c:	2300      	movs	r3, #0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	47a0      	blx	r4
	  data++;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	603b      	str	r3, [r7, #0]
	  break;
 8005048:	e022      	b.n	8005090 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005050:	f107 030e 	add.w	r3, r7, #14
 8005054:	461a      	mov	r2, r3
 8005056:	2101      	movs	r1, #1
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ff9d 	bl	8004f98 <u8x8_cad_SendData>
	  data++;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	603b      	str	r3, [r7, #0]
	  break;
 8005064:	e014      	b.n	8005090 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68dc      	ldr	r4, [r3, #12]
 800506a:	7bf9      	ldrb	r1, [r7, #15]
 800506c:	2300      	movs	r3, #0
 800506e:	2200      	movs	r2, #0
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	47a0      	blx	r4
	  break;
 8005074:	e00c      	b.n	8005090 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800507c:	7bbb      	ldrb	r3, [r7, #14]
 800507e:	461a      	mov	r2, r3
 8005080:	2129      	movs	r1, #41	; 0x29
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f9e4 	bl	8005450 <u8x8_gpio_call>
	  data++;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	603b      	str	r3, [r7, #0]
	  break;
 800508e:	bf00      	nop
    cmd = *data;
 8005090:	e7ba      	b.n	8005008 <u8x8_cad_SendSequence+0xa>
	return;
 8005092:	bf00      	nop
    }
  }
}
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bd90      	pop	{r4, r7, pc}
	...

0800509c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	72fb      	strb	r3, [r7, #11]
 80050aa:	4613      	mov	r3, r2
 80050ac:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80050ae:	7afb      	ldrb	r3, [r7, #11]
 80050b0:	3b14      	subs	r3, #20
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	d82f      	bhi.n	8005116 <u8x8_cad_001+0x7a>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <u8x8_cad_001+0x20>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	08005105 	.word	0x08005105
 80050c0:	080050d5 	.word	0x080050d5
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050fd 	.word	0x080050fd
 80050cc:	08005105 	.word	0x08005105
 80050d0:	08005105 	.word	0x08005105
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80050d4:	2100      	movs	r1, #0
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff fe3f 	bl	8004d5a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80050dc:	7abb      	ldrb	r3, [r7, #10]
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff fe5f 	bl	8004da4 <u8x8_byte_SendByte>
      break;
 80050e6:	e018      	b.n	800511a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80050e8:	2100      	movs	r1, #0
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fe35 	bl	8004d5a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80050f0:	7abb      	ldrb	r3, [r7, #10]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fe55 	bl	8004da4 <u8x8_byte_SendByte>
      break;
 80050fa:	e00e      	b.n	800511a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80050fc:	2101      	movs	r1, #1
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fe2b 	bl	8004d5a <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	691c      	ldr	r4, [r3, #16]
 8005108:	7aba      	ldrb	r2, [r7, #10]
 800510a:	7af9      	ldrb	r1, [r7, #11]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	47a0      	blx	r4
 8005112:	4603      	mov	r3, r0
 8005114:	e002      	b.n	800511c <u8x8_cad_001+0x80>
    default:
      return 0;
 8005116:	2300      	movs	r3, #0
 8005118:	e000      	b.n	800511c <u8x8_cad_001+0x80>
  }
  return 1;
 800511a:	2301      	movs	r3, #1
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bd90      	pop	{r4, r7, pc}

08005124 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	607b      	str	r3, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	72fb      	strb	r3, [r7, #11]
 8005132:	4613      	mov	r3, r2
 8005134:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005136:	7afb      	ldrb	r3, [r7, #11]
 8005138:	3b0b      	subs	r3, #11
 800513a:	2b04      	cmp	r3, #4
 800513c:	f200 8087 	bhi.w	800524e <u8x8_d_ssd1306_sh1106_generic+0x12a>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800515d 	.word	0x0800515d
 800514c:	0800524f 	.word	0x0800524f
 8005150:	08005177 	.word	0x08005177
 8005154:	080051a5 	.word	0x080051a5
 8005158:	080051c5 	.word	0x080051c5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800515c:	7abb      	ldrb	r3, [r7, #10]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8005162:	493e      	ldr	r1, [pc, #248]	; (800525c <u8x8_d_ssd1306_sh1106_generic+0x138>)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff ff4a 	bl	8004ffe <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800516a:	e072      	b.n	8005252 <u8x8_d_ssd1306_sh1106_generic+0x12e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800516c:	493c      	ldr	r1, [pc, #240]	; (8005260 <u8x8_d_ssd1306_sh1106_generic+0x13c>)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff45 	bl	8004ffe <u8x8_cad_SendSequence>
      break;
 8005174:	e06d      	b.n	8005252 <u8x8_d_ssd1306_sh1106_generic+0x12e>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005176:	7abb      	ldrb	r3, [r7, #10]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <u8x8_d_ssd1306_sh1106_generic+0x6c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800517c:	4939      	ldr	r1, [pc, #228]	; (8005264 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff ff3d 	bl	8004ffe <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	7c9a      	ldrb	r2, [r3, #18]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	779a      	strb	r2, [r3, #30]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800518e:	e060      	b.n	8005252 <u8x8_d_ssd1306_sh1106_generic+0x12e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8005190:	4935      	ldr	r1, [pc, #212]	; (8005268 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff ff33 	bl	8004ffe <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	7cda      	ldrb	r2, [r3, #19]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	779a      	strb	r2, [r3, #30]
      break;
 80051a2:	e056      	b.n	8005252 <u8x8_d_ssd1306_sh1106_generic+0x12e>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff ff0a 	bl	8004fbe <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80051aa:	2181      	movs	r1, #129	; 0x81
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fecf 	bl	8004f50 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80051b2:	7abb      	ldrb	r3, [r7, #10]
 80051b4:	4619      	mov	r1, r3
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff fedc 	bl	8004f74 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff ff0e 	bl	8004fde <u8x8_cad_EndTransfer>
      break;
 80051c2:	e046      	b.n	8005252 <u8x8_d_ssd1306_sh1106_generic+0x12e>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fefa 	bl	8004fbe <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	795b      	ldrb	r3, [r3, #5]
 80051ce:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	7f9a      	ldrb	r2, [r3, #30]
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	4413      	add	r3, r2
 80051de:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff feb4 	bl	8004f50 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f043 0310 	orr.w	r3, r3, #16
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff feaa 	bl	8004f50 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	b2db      	uxtb	r3, r3
 8005204:	4619      	mov	r1, r3
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff feb4 	bl	8004f74 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	799b      	ldrb	r3, [r3, #6]
 8005210:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005214:	b2db      	uxtb	r3, r3
 8005216:	4619      	mov	r1, r3
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff feab 	bl	8004f74 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	791b      	ldrb	r3, [r3, #4]
 8005222:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800522a:	7dbb      	ldrb	r3, [r7, #22]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	b2db      	uxtb	r3, r3
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4619      	mov	r1, r3
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7ff feaf 	bl	8004f98 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800523a:	7abb      	ldrb	r3, [r7, #10]
 800523c:	3b01      	subs	r3, #1
 800523e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8005240:	7abb      	ldrb	r3, [r7, #10]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1eb      	bne.n	800521e <u8x8_d_ssd1306_sh1106_generic+0xfa>
      
      u8x8_cad_EndTransfer(u8x8);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff fec9 	bl	8004fde <u8x8_cad_EndTransfer>
      break;
 800524c:	e001      	b.n	8005252 <u8x8_d_ssd1306_sh1106_generic+0x12e>
    default:
      return 0;
 800524e:	2300      	movs	r3, #0
 8005250:	e000      	b.n	8005254 <u8x8_d_ssd1306_sh1106_generic+0x130>
  }
  return 1;
 8005252:	2301      	movs	r3, #1
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	0800ce5c 	.word	0x0800ce5c
 8005260:	0800ce64 	.word	0x0800ce64
 8005264:	0800ce6c 	.word	0x0800ce6c
 8005268:	0800ce74 	.word	0x0800ce74

0800526c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	72fb      	strb	r3, [r7, #11]
 800527a:	4613      	mov	r3, r2
 800527c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800527e:	7aba      	ldrb	r2, [r7, #10]
 8005280:	7af9      	ldrb	r1, [r7, #11]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff ff4d 	bl	8005124 <u8x8_d_ssd1306_sh1106_generic>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8005290:	2301      	movs	r3, #1
 8005292:	e014      	b.n	80052be <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	2b09      	cmp	r3, #9
 8005298:	d009      	beq.n	80052ae <u8x8_d_ssd1306_128x64_noname+0x42>
 800529a:	2b0a      	cmp	r3, #10
 800529c:	d10c      	bne.n	80052b8 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f828 	bl	80052f4 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80052a4:	4908      	ldr	r1, [pc, #32]	; (80052c8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff fea9 	bl	8004ffe <u8x8_cad_SendSequence>
      break;
 80052ac:	e006      	b.n	80052bc <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80052ae:	4907      	ldr	r1, [pc, #28]	; (80052cc <u8x8_d_ssd1306_128x64_noname+0x60>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f80d 	bl	80052d0 <u8x8_d_helper_display_setup_memory>
      break;
 80052b6:	e001      	b.n	80052bc <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80052bc:	2301      	movs	r3, #1
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	0800ce24 	.word	0x0800ce24
 80052cc:	0800ce7c 	.word	0x0800ce7c

080052d0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	7c9a      	ldrb	r2, [r3, #18]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	779a      	strb	r2, [r3, #30]
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	695c      	ldr	r4, [r3, #20]
 8005300:	2300      	movs	r3, #0
 8005302:	2200      	movs	r2, #0
 8005304:	2128      	movs	r1, #40	; 0x28
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68dc      	ldr	r4, [r3, #12]
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	2114      	movs	r1, #20
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005318:	2201      	movs	r2, #1
 800531a:	214b      	movs	r1, #75	; 0x4b
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f897 	bl	8005450 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	791b      	ldrb	r3, [r3, #4]
 8005328:	461a      	mov	r2, r3
 800532a:	2129      	movs	r1, #41	; 0x29
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f88f 	bl	8005450 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005332:	2200      	movs	r2, #0
 8005334:	214b      	movs	r1, #75	; 0x4b
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f88a 	bl	8005450 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	791b      	ldrb	r3, [r3, #4]
 8005342:	461a      	mov	r2, r3
 8005344:	2129      	movs	r1, #41	; 0x29
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f882 	bl	8005450 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800534c:	2201      	movs	r2, #1
 800534e:	214b      	movs	r1, #75	; 0x4b
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f87d 	bl	8005450 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	795b      	ldrb	r3, [r3, #5]
 800535c:	461a      	mov	r2, r3
 800535e:	2129      	movs	r1, #41	; 0x29
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f875 	bl	8005450 <u8x8_gpio_call>
}    
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	bd90      	pop	{r4, r7, pc}

0800536e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800536e:	b590      	push	{r4, r7, lr}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	4608      	mov	r0, r1
 8005378:	4611      	mov	r1, r2
 800537a:	461a      	mov	r2, r3
 800537c:	4603      	mov	r3, r0
 800537e:	70fb      	strb	r3, [r7, #3]
 8005380:	460b      	mov	r3, r1
 8005382:	70bb      	strb	r3, [r7, #2]
 8005384:	4613      	mov	r3, r2
 8005386:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800538c:	78bb      	ldrb	r3, [r7, #2]
 800538e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005390:	787b      	ldrb	r3, [r7, #1]
 8005392:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689c      	ldr	r4, [r3, #8]
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	2201      	movs	r2, #1
 80053a2:	210f      	movs	r1, #15
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	47a0      	blx	r4
 80053a8:	4603      	mov	r3, r0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd90      	pop	{r4, r7, pc}

080053b2 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80053b2:	b590      	push	{r4, r7, lr}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689c      	ldr	r4, [r3, #8]
 80053be:	2300      	movs	r3, #0
 80053c0:	2200      	movs	r2, #0
 80053c2:	2109      	movs	r1, #9
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	47a0      	blx	r4
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}

080053d0 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689c      	ldr	r4, [r3, #8]
 80053dc:	2300      	movs	r3, #0
 80053de:	2200      	movs	r2, #0
 80053e0:	210a      	movs	r1, #10
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	47a0      	blx	r4
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd90      	pop	{r4, r7, pc}

080053ee <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80053ee:	b590      	push	{r4, r7, lr}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689c      	ldr	r4, [r3, #8]
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	2300      	movs	r3, #0
 8005402:	210b      	movs	r1, #11
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	47a0      	blx	r4
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bd90      	pop	{r4, r7, pc}

08005410 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689c      	ldr	r4, [r3, #8]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	2300      	movs	r3, #0
 8005424:	210e      	movs	r1, #14
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	47a0      	blx	r4
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}

08005432 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005432:	b590      	push	{r4, r7, lr}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689c      	ldr	r4, [r3, #8]
 800543e:	2300      	movs	r3, #0
 8005440:	2200      	movs	r2, #0
 8005442:	2110      	movs	r1, #16
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	47a0      	blx	r4
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bd90      	pop	{r4, r7, pc}

08005450 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
 800545c:	4613      	mov	r3, r2
 800545e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695c      	ldr	r4, [r3, #20]
 8005464:	78ba      	ldrb	r2, [r7, #2]
 8005466:	78f9      	ldrb	r1, [r7, #3]
 8005468:	2300      	movs	r3, #0
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	47a0      	blx	r4
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	bd90      	pop	{r4, r7, pc}

08005476 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	72fb      	strb	r3, [r7, #11]
 8005484:	4613      	mov	r3, r2
 8005486:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a11      	ldr	r2, [pc, #68]	; (80054ec <u8x8_SetupDefaults+0x58>)
 80054a6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a10      	ldr	r2, [pc, #64]	; (80054ec <u8x8_SetupDefaults+0x58>)
 80054ac:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <u8x8_SetupDefaults+0x58>)
 80054b2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <u8x8_SetupDefaults+0x58>)
 80054b8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->i2c_address = 255;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	22ff      	movs	r2, #255	; 0xff
 80054d4:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	22ff      	movs	r2, #255	; 0xff
 80054dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	08005477 	.word	0x08005477

080054f0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff ffc8 	bl	8005494 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff ff48 	bl	80053b2 <u8x8_SetupMemory>
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <main>:
 **  Abstract: main program
 **
 **===========================================================================
 */
int main(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);		// setup Interrupts priority
 8005530:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8005534:	f7fb fc4c 	bl	8000dd0 <NVIC_PriorityGroupConfig>
	setupSystick((uint16_t)TICK_FREQ);
 8005538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800553c:	f7fe f844 	bl	80035c8 <setupSystick>
	setupDisplay();
 8005540:	f7fd fc54 	bl	8002dec <setupDisplay>
	setupClockTimer();
 8005544:	f7fe f860 	bl	8003608 <setupClockTimer>
	while(setupNetwork()!=SUCCESS);
 8005548:	bf00      	nop
 800554a:	f7fc fb07 	bl	8001b5c <setupNetwork>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d1fa      	bne.n	800554a <main+0x1e>
	if (getNTPTime()==SUCCESS) updateclock = 0;
 8005554:	f7fc fbee 	bl	8001d34 <getNTPTime>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d102      	bne.n	8005564 <main+0x38>
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <main+0x48>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
	setupButton();
 8005564:	f7fc fabe 	bl	8001ae4 <setupButton>

	currentscreen = 1; 	// switch from boot screen (#0) to screen #1 (Message no 1)
 8005568:	4b03      	ldr	r3, [pc, #12]	; (8005578 <main+0x4c>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]

	while(1)
	{
		monitorNetwork();
 800556e:	f7fd fa8d 	bl	8002a8c <monitorNetwork>
 8005572:	e7fc      	b.n	800556e <main+0x42>
 8005574:	20000014 	.word	0x20000014
 8005578:	200006dc 	.word	0x200006dc

0800557c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800557c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005580:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005582:	e003      	b.n	800558c <LoopCopyDataInit>

08005584 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8005586:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005588:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800558a:	3104      	adds	r1, #4

0800558c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800558c:	480b      	ldr	r0, [pc, #44]	; (80055bc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8005590:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005592:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005594:	d3f6      	bcc.n	8005584 <CopyDataInit>
	ldr	r2, =_sbss
 8005596:	4a0b      	ldr	r2, [pc, #44]	; (80055c4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8005598:	e002      	b.n	80055a0 <LoopFillZerobss>

0800559a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800559a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800559c:	f842 3b04 	str.w	r3, [r2], #4

080055a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80055a0:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80055a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80055a4:	d3f9      	bcc.n	800559a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055a6:	f000 f969 	bl	800587c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055aa:	f000 fa21 	bl	80059f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055ae:	f7ff ffbd 	bl	800552c <main>
	bx	lr
 80055b2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80055b4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80055b8:	0800d150 	.word	0x0800d150
	ldr	r0, =_sdata
 80055bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80055c0:	2000069c 	.word	0x2000069c
	ldr	r2, =_sbss
 80055c4:	200006a0 	.word	0x200006a0
	ldr	r3, = _ebss
 80055c8:	20001cd0 	.word	0x20001cd0

080055cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055cc:	e7fe      	b.n	80055cc <ADC1_2_IRQHandler>

080055ce <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 80055ce:	b480      	push	{r7}
 80055d0:	af00      	add	r7, sp, #0
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 80055de:	e7fe      	b.n	80055de <HardFault_Handler+0x4>

080055e0 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 80055e4:	e7fe      	b.n	80055e4 <MemManage_Handler+0x4>

080055e6 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 80055ea:	e7fe      	b.n	80055ea <BusFault_Handler+0x4>

080055ec <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 80055f0:	e7fe      	b.n	80055f0 <UsageFault_Handler+0x4>

080055f2 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 80055f2:	b480      	push	{r7}
 80055f4:	af00      	add	r7, sp, #0
}
 80055f6:	bf00      	nop
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr

080055fe <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 80055fe:	b480      	push	{r7}
 8005600:	af00      	add	r7, sp, #0
}
 8005602:	bf00      	nop
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 800560a:	b480      	push	{r7}
 800560c:	af00      	add	r7, sp, #0
}
 800560e:	bf00      	nop
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
	...

08005618 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8005618:	b490      	push	{r4, r7}
 800561a:	af00      	add	r7, sp, #0
	ticks++;
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <SysTick_Handler+0x1c>)
 800561e:	cb18      	ldmia	r3, {r3, r4}
 8005620:	3301      	adds	r3, #1
 8005622:	f144 0400 	adc.w	r4, r4, #0
 8005626:	4a03      	ldr	r2, [pc, #12]	; (8005634 <SysTick_Handler+0x1c>)
 8005628:	e882 0018 	stmia.w	r2, {r3, r4}
}
 800562c:	bf00      	nop
 800562e:	46bd      	mov	sp, r7
 8005630:	bc90      	pop	{r4, r7}
 8005632:	4770      	bx	lr
 8005634:	20000ae8 	.word	0x20000ae8

08005638 <milis>:

int milis()
{
 8005638:	b490      	push	{r4, r7}
 800563a:	af00      	add	r7, sp, #0
	return ticks;
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <milis+0x10>)
 800563e:	cb18      	ldmia	r3, {r3, r4}
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	bc90      	pop	{r4, r7}
 8005646:	4770      	bx	lr
 8005648:	20000ae8 	.word	0x20000ae8

0800564c <delay>:

void delay(int ms)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	int currenttime = milis();
 8005654:	f7ff fff0 	bl	8005638 <milis>
 8005658:	60f8      	str	r0, [r7, #12]
	while(milis()<(currenttime+ms));
 800565a:	bf00      	nop
 800565c:	f7ff ffec 	bl	8005638 <milis>
 8005660:	4601      	mov	r1, r0
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	4299      	cmp	r1, r3
 800566a:	dbf7      	blt.n	800565c <delay+0x10>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <TIM4_IRQHandler>:
/**
 * @}
 */

void TIM4_IRQHandler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM4, TIM_IT_Update)!=RESET)
 8005678:	2101      	movs	r1, #1
 800567a:	4838      	ldr	r0, [pc, #224]	; (800575c <TIM4_IRQHandler+0xe8>)
 800567c:	f7fb ff99 	bl	80015b2 <TIM_GetITStatus>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d067      	beq.n	8005756 <TIM4_IRQHandler+0xe2>
	{
//		EXTI_InitTypeDef EXTI_InitStructure;
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8005686:	2101      	movs	r1, #1
 8005688:	4834      	ldr	r0, [pc, #208]	; (800575c <TIM4_IRQHandler+0xe8>)
 800568a:	f7fb ffbb 	bl	8001604 <TIM_ClearITPendingBit>
		showScreen(currentscreen);
 800568e:	4b34      	ldr	r3, [pc, #208]	; (8005760 <TIM4_IRQHandler+0xec>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd fcb4 	bl	8003000 <showScreen>
		clockrefreshcounter++;
 8005698:	4b32      	ldr	r3, [pc, #200]	; (8005764 <TIM4_IRQHandler+0xf0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a31      	ldr	r2, [pc, #196]	; (8005764 <TIM4_IRQHandler+0xf0>)
 80056a0:	6013      	str	r3, [r2, #0]
		switchscreen++;
 80056a2:	4b31      	ldr	r3, [pc, #196]	; (8005768 <TIM4_IRQHandler+0xf4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a2f      	ldr	r2, [pc, #188]	; (8005768 <TIM4_IRQHandler+0xf4>)
 80056aa:	6013      	str	r3, [r2, #0]
//		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
//		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
//		//send values to registers
//		EXTI_Init(&EXTI_InitStructure);

		if(clockrefreshcounter%4==0)
 80056ac:	4b2d      	ldr	r3, [pc, #180]	; (8005764 <TIM4_IRQHandler+0xf0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10e      	bne.n	80056d6 <TIM4_IRQHandler+0x62>
		{
			clockepoch++;
 80056b8:	4b2c      	ldr	r3, [pc, #176]	; (800576c <TIM4_IRQHandler+0xf8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a2b      	ldr	r2, [pc, #172]	; (800576c <TIM4_IRQHandler+0xf8>)
 80056c0:	6013      	str	r3, [r2, #0]
			clocktick = (clocktick == ':') ? ' ' : ':';
 80056c2:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <TIM4_IRQHandler+0xfc>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b3a      	cmp	r3, #58	; 0x3a
 80056ca:	d101      	bne.n	80056d0 <TIM4_IRQHandler+0x5c>
 80056cc:	2220      	movs	r2, #32
 80056ce:	e000      	b.n	80056d2 <TIM4_IRQHandler+0x5e>
 80056d0:	223a      	movs	r2, #58	; 0x3a
 80056d2:	4b27      	ldr	r3, [pc, #156]	; (8005770 <TIM4_IRQHandler+0xfc>)
 80056d4:	701a      	strb	r2, [r3, #0]
		}

		if(clockrefreshcounter%(4*60*5)==0)
 80056d6:	4b23      	ldr	r3, [pc, #140]	; (8005764 <TIM4_IRQHandler+0xf0>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b26      	ldr	r3, [pc, #152]	; (8005774 <TIM4_IRQHandler+0x100>)
 80056dc:	fb83 1302 	smull	r1, r3, r3, r2
 80056e0:	11d9      	asrs	r1, r3, #7
 80056e2:	17d3      	asrs	r3, r2, #31
 80056e4:	1acb      	subs	r3, r1, r3
 80056e6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <TIM4_IRQHandler+0x86>
		{
			networkcheck = 1;
 80056f4:	4b20      	ldr	r3, [pc, #128]	; (8005778 <TIM4_IRQHandler+0x104>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
		}

		if(switchscreen%(4*15)==0)
 80056fa:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <TIM4_IRQHandler+0xf4>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b1f      	ldr	r3, [pc, #124]	; (800577c <TIM4_IRQHandler+0x108>)
 8005700:	fb83 1302 	smull	r1, r3, r3, r2
 8005704:	4413      	add	r3, r2
 8005706:	1159      	asrs	r1, r3, #5
 8005708:	17d3      	asrs	r3, r2, #31
 800570a:	1ac9      	subs	r1, r1, r3
 800570c:	460b      	mov	r3, r1
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	1a5b      	subs	r3, r3, r1
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	1ad1      	subs	r1, r2, r3
 8005716:	2900      	cmp	r1, #0
 8005718:	d112      	bne.n	8005740 <TIM4_IRQHandler+0xcc>
		{
			if(abs(currentscreen)>=MESSAGE_SCREENS)
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <TIM4_IRQHandler+0xec>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	bfb8      	it	lt
 8005722:	425b      	neglt	r3, r3
 8005724:	2b03      	cmp	r3, #3
 8005726:	dd03      	ble.n	8005730 <TIM4_IRQHandler+0xbc>
			{
				currentscreen = 1;
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <TIM4_IRQHandler+0xec>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e007      	b.n	8005740 <TIM4_IRQHandler+0xcc>
			}
			else
			{
				currentscreen = abs(currentscreen) + 1;
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <TIM4_IRQHandler+0xec>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	bfb8      	it	lt
 8005738:	425b      	neglt	r3, r3
 800573a:	3301      	adds	r3, #1
 800573c:	4a08      	ldr	r2, [pc, #32]	; (8005760 <TIM4_IRQHandler+0xec>)
 800573e:	6013      	str	r3, [r2, #0]
			}
		}

		if(clockrefreshcounter>=(4*3600))
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <TIM4_IRQHandler+0xf0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 8005748:	db05      	blt.n	8005756 <TIM4_IRQHandler+0xe2>
		{
			updateclock = 1;
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <TIM4_IRQHandler+0x10c>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]
			clockrefreshcounter = 0;
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <TIM4_IRQHandler+0xf0>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
//			}
//
//		}

	}
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40000800 	.word	0x40000800
 8005760:	200006dc 	.word	0x200006dc
 8005764:	20000af4 	.word	0x20000af4
 8005768:	200006d8 	.word	0x200006d8
 800576c:	200006c8 	.word	0x200006c8
 8005770:	20000024 	.word	0x20000024
 8005774:	1b4e81b5 	.word	0x1b4e81b5
 8005778:	200006c4 	.word	0x200006c4
 800577c:	88888889 	.word	0x88888889
 8005780:	20000014 	.word	0x20000014

08005784 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
	uint8_t ch;
	//if Receive interrupt
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 800578a:	f240 5125 	movw	r1, #1317	; 0x525
 800578e:	4819      	ldr	r0, [pc, #100]	; (80057f4 <USART1_IRQHandler+0x70>)
 8005790:	f7fc f8c8 	bl	8001924 <USART_GetITStatus>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <USART1_IRQHandler+0x2c>
	{
		ch=(uint8_t)USART_ReceiveData(USART1);
 800579a:	4816      	ldr	r0, [pc, #88]	; (80057f4 <USART1_IRQHandler+0x70>)
 800579c:	f7fc f8b3 	bl	8001906 <USART_ReceiveData>
 80057a0:	4603      	mov	r3, r0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	71fb      	strb	r3, [r7, #7]
#ifdef BUFFERED
		//put char to the buffer
		BufferPut(&U1Rx, ch);
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4813      	ldr	r0, [pc, #76]	; (80057f8 <USART1_IRQHandler+0x74>)
 80057ac:	f7fc f926 	bl	80019fc <BufferPut>
#endif
	}
	if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 80057b0:	f240 7127 	movw	r1, #1831	; 0x727
 80057b4:	480f      	ldr	r0, [pc, #60]	; (80057f4 <USART1_IRQHandler+0x70>)
 80057b6:	f7fc f8b5 	bl	8001924 <USART_GetITStatus>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d014      	beq.n	80057ea <USART1_IRQHandler+0x66>
	{
#ifdef BUFFERED
		if (BufferGet(&U1Tx, &ch) == SUCCESS)//if buffer read
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	4619      	mov	r1, r3
 80057c4:	480d      	ldr	r0, [pc, #52]	; (80057fc <USART1_IRQHandler+0x78>)
 80057c6:	f7fc f949 	bl	8001a5c <BufferGet>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <USART1_IRQHandler+0x5a>
		{
			USART_SendData(USART1, ch);
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4619      	mov	r1, r3
 80057d6:	4807      	ldr	r0, [pc, #28]	; (80057f4 <USART1_IRQHandler+0x70>)
 80057d8:	f7fc f884 	bl	80018e4 <USART_SendData>
		{
			//disable Transmit Data Register empty interrupt
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
		}
	}
}
 80057dc:	e005      	b.n	80057ea <USART1_IRQHandler+0x66>
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80057de:	2200      	movs	r2, #0
 80057e0:	f240 7127 	movw	r1, #1831	; 0x727
 80057e4:	4803      	ldr	r0, [pc, #12]	; (80057f4 <USART1_IRQHandler+0x70>)
 80057e6:	f7fc f836 	bl	8001856 <USART_ITConfig>
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40013800 	.word	0x40013800
 80057f8:	20000cb4 	.word	0x20000cb4
 80057fc:	200014bc 	.word	0x200014bc

08005800 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
	if (db_time >= milis())
 8005804:	f7ff ff18 	bl	8005638 <milis>
 8005808:	4603      	mov	r3, r0
 800580a:	461a      	mov	r2, r3
 800580c:	4b18      	ldr	r3, [pc, #96]	; (8005870 <EXTI9_5_IRQHandler+0x70>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d803      	bhi.n	800581c <EXTI9_5_IRQHandler+0x1c>
	{
		EXTI_ClearITPendingBit(EXTI_Line5);
 8005814:	2020      	movs	r0, #32
 8005816:	f7fb fbe5 	bl	8000fe4 <EXTI_ClearITPendingBit>
			}
			EXTI_ClearITPendingBit(EXTI_Line5);
		}

	}
}
 800581a:	e026      	b.n	800586a <EXTI9_5_IRQHandler+0x6a>
		db_time = milis() + 300;
 800581c:	f7ff ff0c 	bl	8005638 <milis>
 8005820:	4603      	mov	r3, r0
 8005822:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8005826:	461a      	mov	r2, r3
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <EXTI9_5_IRQHandler+0x70>)
 800582a:	601a      	str	r2, [r3, #0]
		if (EXTI_GetITStatus(EXTI_Line5)==SET)
 800582c:	2020      	movs	r0, #32
 800582e:	f7fb fbb5 	bl	8000f9c <EXTI_GetITStatus>
 8005832:	4603      	mov	r3, r0
 8005834:	2b01      	cmp	r3, #1
 8005836:	d118      	bne.n	800586a <EXTI9_5_IRQHandler+0x6a>
			switchscreen = 0;
 8005838:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <EXTI9_5_IRQHandler+0x74>)
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
			if(abs(currentscreen)==(MESSAGE_SCREENS+1))
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <EXTI9_5_IRQHandler+0x78>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	bfb8      	it	lt
 8005846:	425b      	neglt	r3, r3
 8005848:	2b05      	cmp	r3, #5
 800584a:	d103      	bne.n	8005854 <EXTI9_5_IRQHandler+0x54>
				currentscreen = 1;
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <EXTI9_5_IRQHandler+0x78>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e007      	b.n	8005864 <EXTI9_5_IRQHandler+0x64>
				currentscreen = abs(currentscreen)+1;
 8005854:	4b08      	ldr	r3, [pc, #32]	; (8005878 <EXTI9_5_IRQHandler+0x78>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	bfb8      	it	lt
 800585c:	425b      	neglt	r3, r3
 800585e:	3301      	adds	r3, #1
 8005860:	4a05      	ldr	r2, [pc, #20]	; (8005878 <EXTI9_5_IRQHandler+0x78>)
 8005862:	6013      	str	r3, [r2, #0]
			EXTI_ClearITPendingBit(EXTI_Line5);
 8005864:	2020      	movs	r0, #32
 8005866:	f7fb fbbd 	bl	8000fe4 <EXTI_ClearITPendingBit>
}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000af0 	.word	0x20000af0
 8005874:	200006d8 	.word	0x200006d8
 8005878:	200006dc 	.word	0x200006dc

0800587c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005880:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <SystemInit+0x5c>)
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <SystemInit+0x5c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800588c:	4912      	ldr	r1, [pc, #72]	; (80058d8 <SystemInit+0x5c>)
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <SystemInit+0x5c>)
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <SystemInit+0x60>)
 8005894:	4013      	ands	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005898:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <SystemInit+0x5c>)
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <SystemInit+0x5c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80058a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80058a8:	4a0b      	ldr	r2, [pc, #44]	; (80058d8 <SystemInit+0x5c>)
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <SystemInit+0x5c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80058b4:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <SystemInit+0x5c>)
 80058b6:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <SystemInit+0x5c>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80058be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <SystemInit+0x5c>)
 80058c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80058c6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80058c8:	f000 f80c 	bl	80058e4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <SystemInit+0x64>)
 80058ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80058d4:	bf00      	nop
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40021000 	.word	0x40021000
 80058dc:	f8ff0000 	.word	0xf8ff0000
 80058e0:	e000ed00 	.word	0xe000ed00

080058e4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80058e8:	f000 f802 	bl	80058f0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	2300      	movs	r3, #0
 80058fc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80058fe:	4a3a      	ldr	r2, [pc, #232]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005900:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800590a:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <SetSysClockTo72+0xf8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3301      	adds	r3, #1
 8005918:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <SetSysClockTo72+0x38>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005926:	d1f0      	bne.n	800590a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005928:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <SetSysClockTo72+0xf8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005934:	2301      	movs	r3, #1
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	e001      	b.n	800593e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800593a:	2300      	movs	r3, #0
 800593c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d14b      	bne.n	80059dc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8005944:	4a29      	ldr	r2, [pc, #164]	; (80059ec <SetSysClockTo72+0xfc>)
 8005946:	4b29      	ldr	r3, [pc, #164]	; (80059ec <SetSysClockTo72+0xfc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f043 0310 	orr.w	r3, r3, #16
 800594e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8005950:	4a26      	ldr	r2, [pc, #152]	; (80059ec <SetSysClockTo72+0xfc>)
 8005952:	4b26      	ldr	r3, [pc, #152]	; (80059ec <SetSysClockTo72+0xfc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <SetSysClockTo72+0xfc>)
 800595e:	4b23      	ldr	r3, [pc, #140]	; (80059ec <SetSysClockTo72+0xfc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f043 0302 	orr.w	r3, r3, #2
 8005966:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <SetSysClockTo72+0xf8>)
 800596a:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <SetSysClockTo72+0xf8>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8005970:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8005978:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <SetSysClockTo72+0xf8>)
 800597a:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <SetSysClockTo72+0xf8>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005982:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8005984:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800598e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005992:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <SetSysClockTo72+0xf8>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800599a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <SetSysClockTo72+0xf8>)
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <SetSysClockTo72+0xf8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059a6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80059a8:	bf00      	nop
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <SetSysClockTo72+0xf8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f9      	beq.n	80059aa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80059b6:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <SetSysClockTo72+0xf8>)
 80059b8:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <SetSysClockTo72+0xf8>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f023 0303 	bic.w	r3, r3, #3
 80059c0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80059c2:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <SetSysClockTo72+0xf8>)
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <SetSysClockTo72+0xf8>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f043 0302 	orr.w	r3, r3, #2
 80059cc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80059ce:	bf00      	nop
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <SetSysClockTo72+0xf8>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f003 030c 	and.w	r3, r3, #12
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d1f9      	bne.n	80059d0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40022000 	.word	0x40022000

080059f0 <__libc_init_array>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	2500      	movs	r5, #0
 80059f4:	4e0c      	ldr	r6, [pc, #48]	; (8005a28 <__libc_init_array+0x38>)
 80059f6:	4c0d      	ldr	r4, [pc, #52]	; (8005a2c <__libc_init_array+0x3c>)
 80059f8:	1ba4      	subs	r4, r4, r6
 80059fa:	10a4      	asrs	r4, r4, #2
 80059fc:	42a5      	cmp	r5, r4
 80059fe:	d109      	bne.n	8005a14 <__libc_init_array+0x24>
 8005a00:	f003 ff60 	bl	80098c4 <_init>
 8005a04:	2500      	movs	r5, #0
 8005a06:	4e0a      	ldr	r6, [pc, #40]	; (8005a30 <__libc_init_array+0x40>)
 8005a08:	4c0a      	ldr	r4, [pc, #40]	; (8005a34 <__libc_init_array+0x44>)
 8005a0a:	1ba4      	subs	r4, r4, r6
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	42a5      	cmp	r5, r4
 8005a10:	d105      	bne.n	8005a1e <__libc_init_array+0x2e>
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a18:	4798      	blx	r3
 8005a1a:	3501      	adds	r5, #1
 8005a1c:	e7ee      	b.n	80059fc <__libc_init_array+0xc>
 8005a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a22:	4798      	blx	r3
 8005a24:	3501      	adds	r5, #1
 8005a26:	e7f2      	b.n	8005a0e <__libc_init_array+0x1e>
 8005a28:	0800d148 	.word	0x0800d148
 8005a2c:	0800d148 	.word	0x0800d148
 8005a30:	0800d148 	.word	0x0800d148
 8005a34:	0800d14c 	.word	0x0800d14c

08005a38 <__locale_ctype_ptr>:
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <__locale_ctype_ptr+0x14>)
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <__locale_ctype_ptr+0x18>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf08      	it	eq
 8005a44:	4613      	moveq	r3, r2
 8005a46:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005a4a:	4770      	bx	lr
 8005a4c:	20000194 	.word	0x20000194
 8005a50:	20000028 	.word	0x20000028

08005a54 <__ascii_mbtowc>:
 8005a54:	b082      	sub	sp, #8
 8005a56:	b901      	cbnz	r1, 8005a5a <__ascii_mbtowc+0x6>
 8005a58:	a901      	add	r1, sp, #4
 8005a5a:	b142      	cbz	r2, 8005a6e <__ascii_mbtowc+0x1a>
 8005a5c:	b14b      	cbz	r3, 8005a72 <__ascii_mbtowc+0x1e>
 8005a5e:	7813      	ldrb	r3, [r2, #0]
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	1c10      	adds	r0, r2, #0
 8005a66:	bf18      	it	ne
 8005a68:	2001      	movne	r0, #1
 8005a6a:	b002      	add	sp, #8
 8005a6c:	4770      	bx	lr
 8005a6e:	4610      	mov	r0, r2
 8005a70:	e7fb      	b.n	8005a6a <__ascii_mbtowc+0x16>
 8005a72:	f06f 0001 	mvn.w	r0, #1
 8005a76:	e7f8      	b.n	8005a6a <__ascii_mbtowc+0x16>

08005a78 <memcpy>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	1e43      	subs	r3, r0, #1
 8005a7c:	440a      	add	r2, r1
 8005a7e:	4291      	cmp	r1, r2
 8005a80:	d100      	bne.n	8005a84 <memcpy+0xc>
 8005a82:	bd10      	pop	{r4, pc}
 8005a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a8c:	e7f7      	b.n	8005a7e <memcpy+0x6>

08005a8e <memset>:
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4402      	add	r2, r0
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d100      	bne.n	8005a98 <memset+0xa>
 8005a96:	4770      	bx	lr
 8005a98:	f803 1b01 	strb.w	r1, [r3], #1
 8005a9c:	e7f9      	b.n	8005a92 <memset+0x4>
	...

08005aa0 <sprintf>:
 8005aa0:	b40e      	push	{r1, r2, r3}
 8005aa2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005aa6:	b500      	push	{lr}
 8005aa8:	b09c      	sub	sp, #112	; 0x70
 8005aaa:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005aae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab2:	9104      	str	r1, [sp, #16]
 8005ab4:	9107      	str	r1, [sp, #28]
 8005ab6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005aba:	ab1d      	add	r3, sp, #116	; 0x74
 8005abc:	9002      	str	r0, [sp, #8]
 8005abe:	9006      	str	r0, [sp, #24]
 8005ac0:	4808      	ldr	r0, [pc, #32]	; (8005ae4 <sprintf+0x44>)
 8005ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	a902      	add	r1, sp, #8
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	f000 f81c 	bl	8005b0c <_svfprintf_r>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	9b02      	ldr	r3, [sp, #8]
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	b01c      	add	sp, #112	; 0x70
 8005adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ae0:	b003      	add	sp, #12
 8005ae2:	4770      	bx	lr
 8005ae4:	20000194 	.word	0x20000194

08005ae8 <strncmp>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	b16a      	cbz	r2, 8005b08 <strncmp+0x20>
 8005aec:	3901      	subs	r1, #1
 8005aee:	1884      	adds	r4, r0, r2
 8005af0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005af4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d103      	bne.n	8005b04 <strncmp+0x1c>
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	d001      	beq.n	8005b04 <strncmp+0x1c>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f5      	bne.n	8005af0 <strncmp+0x8>
 8005b04:	1a98      	subs	r0, r3, r2
 8005b06:	bd10      	pop	{r4, pc}
 8005b08:	4610      	mov	r0, r2
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <_svfprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	b0bf      	sub	sp, #252	; 0xfc
 8005b12:	4689      	mov	r9, r1
 8005b14:	4615      	mov	r5, r2
 8005b16:	461f      	mov	r7, r3
 8005b18:	4682      	mov	sl, r0
 8005b1a:	f001 fe35 	bl	8007788 <_localeconv_r>
 8005b1e:	6803      	ldr	r3, [r0, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	9311      	str	r3, [sp, #68]	; 0x44
 8005b24:	f7fa fb14 	bl	8000150 <strlen>
 8005b28:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005b2c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	d518      	bpl.n	8005b64 <_svfprintf_r+0x58>
 8005b32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b36:	b9ab      	cbnz	r3, 8005b64 <_svfprintf_r+0x58>
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	f001 fe3a 	bl	80077b4 <_malloc_r>
 8005b40:	f8c9 0000 	str.w	r0, [r9]
 8005b44:	f8c9 0010 	str.w	r0, [r9, #16]
 8005b48:	b948      	cbnz	r0, 8005b5e <_svfprintf_r+0x52>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	f8ca 3000 	str.w	r3, [sl]
 8005b50:	f04f 33ff 	mov.w	r3, #4294967295
 8005b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b58:	b03f      	add	sp, #252	; 0xfc
 8005b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5e:	2340      	movs	r3, #64	; 0x40
 8005b60:	f8c9 3014 	str.w	r3, [r9, #20]
 8005b64:	2300      	movs	r3, #0
 8005b66:	ac2e      	add	r4, sp, #184	; 0xb8
 8005b68:	9421      	str	r4, [sp, #132]	; 0x84
 8005b6a:	9323      	str	r3, [sp, #140]	; 0x8c
 8005b6c:	9322      	str	r3, [sp, #136]	; 0x88
 8005b6e:	9509      	str	r5, [sp, #36]	; 0x24
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	930d      	str	r3, [sp, #52]	; 0x34
 8005b74:	930e      	str	r3, [sp, #56]	; 0x38
 8005b76:	9315      	str	r3, [sp, #84]	; 0x54
 8005b78:	9314      	str	r3, [sp, #80]	; 0x50
 8005b7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b7c:	9312      	str	r3, [sp, #72]	; 0x48
 8005b7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b82:	462b      	mov	r3, r5
 8005b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b88:	b112      	cbz	r2, 8005b90 <_svfprintf_r+0x84>
 8005b8a:	2a25      	cmp	r2, #37	; 0x25
 8005b8c:	f040 8083 	bne.w	8005c96 <_svfprintf_r+0x18a>
 8005b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b92:	1aee      	subs	r6, r5, r3
 8005b94:	d00d      	beq.n	8005bb2 <_svfprintf_r+0xa6>
 8005b96:	e884 0048 	stmia.w	r4, {r3, r6}
 8005b9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b9c:	4433      	add	r3, r6
 8005b9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	2b07      	cmp	r3, #7
 8005ba6:	9322      	str	r3, [sp, #136]	; 0x88
 8005ba8:	dc77      	bgt.n	8005c9a <_svfprintf_r+0x18e>
 8005baa:	3408      	adds	r4, #8
 8005bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bae:	4433      	add	r3, r6
 8005bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bb2:	782b      	ldrb	r3, [r5, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8725 	beq.w	8006a04 <_svfprintf_r+0xef8>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	1c69      	adds	r1, r5, #1
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f04f 3bff 	mov.w	fp, #4294967295
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	200a      	movs	r0, #10
 8005bc8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8005bce:	1c4e      	adds	r6, r1, #1
 8005bd0:	7809      	ldrb	r1, [r1, #0]
 8005bd2:	9609      	str	r6, [sp, #36]	; 0x24
 8005bd4:	9106      	str	r1, [sp, #24]
 8005bd6:	9906      	ldr	r1, [sp, #24]
 8005bd8:	3920      	subs	r1, #32
 8005bda:	2958      	cmp	r1, #88	; 0x58
 8005bdc:	f200 8414 	bhi.w	8006408 <_svfprintf_r+0x8fc>
 8005be0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005be4:	041200a5 	.word	0x041200a5
 8005be8:	00aa0412 	.word	0x00aa0412
 8005bec:	04120412 	.word	0x04120412
 8005bf0:	04120412 	.word	0x04120412
 8005bf4:	04120412 	.word	0x04120412
 8005bf8:	006500ad 	.word	0x006500ad
 8005bfc:	00b50412 	.word	0x00b50412
 8005c00:	041200b8 	.word	0x041200b8
 8005c04:	00d800d5 	.word	0x00d800d5
 8005c08:	00d800d8 	.word	0x00d800d8
 8005c0c:	00d800d8 	.word	0x00d800d8
 8005c10:	00d800d8 	.word	0x00d800d8
 8005c14:	00d800d8 	.word	0x00d800d8
 8005c18:	04120412 	.word	0x04120412
 8005c1c:	04120412 	.word	0x04120412
 8005c20:	04120412 	.word	0x04120412
 8005c24:	04120412 	.word	0x04120412
 8005c28:	04120412 	.word	0x04120412
 8005c2c:	0122010c 	.word	0x0122010c
 8005c30:	01220412 	.word	0x01220412
 8005c34:	04120412 	.word	0x04120412
 8005c38:	04120412 	.word	0x04120412
 8005c3c:	041200eb 	.word	0x041200eb
 8005c40:	033c0412 	.word	0x033c0412
 8005c44:	04120412 	.word	0x04120412
 8005c48:	04120412 	.word	0x04120412
 8005c4c:	03a40412 	.word	0x03a40412
 8005c50:	04120412 	.word	0x04120412
 8005c54:	04120085 	.word	0x04120085
 8005c58:	04120412 	.word	0x04120412
 8005c5c:	04120412 	.word	0x04120412
 8005c60:	04120412 	.word	0x04120412
 8005c64:	04120412 	.word	0x04120412
 8005c68:	00fe0412 	.word	0x00fe0412
 8005c6c:	0122006b 	.word	0x0122006b
 8005c70:	01220122 	.word	0x01220122
 8005c74:	006b00ee 	.word	0x006b00ee
 8005c78:	04120412 	.word	0x04120412
 8005c7c:	041200f1 	.word	0x041200f1
 8005c80:	033e031e 	.word	0x033e031e
 8005c84:	00f80372 	.word	0x00f80372
 8005c88:	03830412 	.word	0x03830412
 8005c8c:	03a60412 	.word	0x03a60412
 8005c90:	04120412 	.word	0x04120412
 8005c94:	03be      	.short	0x03be
 8005c96:	461d      	mov	r5, r3
 8005c98:	e773      	b.n	8005b82 <_svfprintf_r+0x76>
 8005c9a:	aa21      	add	r2, sp, #132	; 0x84
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4650      	mov	r0, sl
 8005ca0:	f002 fa90 	bl	80081c4 <__ssprint_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	f040 868e 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8005caa:	ac2e      	add	r4, sp, #184	; 0xb8
 8005cac:	e77e      	b.n	8005bac <_svfprintf_r+0xa0>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	222b      	movs	r2, #43	; 0x2b
 8005cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb4:	e78b      	b.n	8005bce <_svfprintf_r+0xc2>
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	e7fb      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005cba:	b10b      	cbz	r3, 8005cc0 <_svfprintf_r+0x1b4>
 8005cbc:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005cc0:	06ae      	lsls	r6, r5, #26
 8005cc2:	f140 80a1 	bpl.w	8005e08 <_svfprintf_r+0x2fc>
 8005cc6:	3707      	adds	r7, #7
 8005cc8:	f027 0707 	bic.w	r7, r7, #7
 8005ccc:	f107 0308 	add.w	r3, r7, #8
 8005cd0:	9308      	str	r3, [sp, #32]
 8005cd2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	f177 0300 	sbcs.w	r3, r7, #0
 8005cdc:	da05      	bge.n	8005cea <_svfprintf_r+0x1de>
 8005cde:	232d      	movs	r3, #45	; 0x2d
 8005ce0:	4276      	negs	r6, r6
 8005ce2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005ce6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005cea:	2301      	movs	r3, #1
 8005cec:	e2c7      	b.n	800627e <_svfprintf_r+0x772>
 8005cee:	b10b      	cbz	r3, 8005cf4 <_svfprintf_r+0x1e8>
 8005cf0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005cf4:	4ba0      	ldr	r3, [pc, #640]	; (8005f78 <_svfprintf_r+0x46c>)
 8005cf6:	9315      	str	r3, [sp, #84]	; 0x54
 8005cf8:	06ab      	lsls	r3, r5, #26
 8005cfa:	f140 8336 	bpl.w	800636a <_svfprintf_r+0x85e>
 8005cfe:	3707      	adds	r7, #7
 8005d00:	f027 0707 	bic.w	r7, r7, #7
 8005d04:	f107 0308 	add.w	r3, r7, #8
 8005d08:	9308      	str	r3, [sp, #32]
 8005d0a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005d0e:	07e8      	lsls	r0, r5, #31
 8005d10:	d50b      	bpl.n	8005d2a <_svfprintf_r+0x21e>
 8005d12:	ea56 0307 	orrs.w	r3, r6, r7
 8005d16:	d008      	beq.n	8005d2a <_svfprintf_r+0x21e>
 8005d18:	2330      	movs	r3, #48	; 0x30
 8005d1a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8005d1e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005d22:	f045 0502 	orr.w	r5, r5, #2
 8005d26:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e2a4      	b.n	8006278 <_svfprintf_r+0x76c>
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	d1bf      	bne.n	8005cb2 <_svfprintf_r+0x1a6>
 8005d32:	2301      	movs	r3, #1
 8005d34:	2220      	movs	r2, #32
 8005d36:	e7bc      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005d38:	f045 0501 	orr.w	r5, r5, #1
 8005d3c:	e7b9      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005d3e:	683e      	ldr	r6, [r7, #0]
 8005d40:	1d39      	adds	r1, r7, #4
 8005d42:	2e00      	cmp	r6, #0
 8005d44:	960c      	str	r6, [sp, #48]	; 0x30
 8005d46:	dab6      	bge.n	8005cb6 <_svfprintf_r+0x1aa>
 8005d48:	460f      	mov	r7, r1
 8005d4a:	4276      	negs	r6, r6
 8005d4c:	960c      	str	r6, [sp, #48]	; 0x30
 8005d4e:	f045 0504 	orr.w	r5, r5, #4
 8005d52:	e7ae      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d56:	1c4e      	adds	r6, r1, #1
 8005d58:	7809      	ldrb	r1, [r1, #0]
 8005d5a:	292a      	cmp	r1, #42	; 0x2a
 8005d5c:	9106      	str	r1, [sp, #24]
 8005d5e:	d010      	beq.n	8005d82 <_svfprintf_r+0x276>
 8005d60:	f04f 0b00 	mov.w	fp, #0
 8005d64:	9609      	str	r6, [sp, #36]	; 0x24
 8005d66:	9906      	ldr	r1, [sp, #24]
 8005d68:	3930      	subs	r1, #48	; 0x30
 8005d6a:	2909      	cmp	r1, #9
 8005d6c:	f63f af33 	bhi.w	8005bd6 <_svfprintf_r+0xca>
 8005d70:	fb00 1b0b 	mla	fp, r0, fp, r1
 8005d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d76:	460e      	mov	r6, r1
 8005d78:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005d7c:	9106      	str	r1, [sp, #24]
 8005d7e:	9609      	str	r6, [sp, #36]	; 0x24
 8005d80:	e7f1      	b.n	8005d66 <_svfprintf_r+0x25a>
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	9609      	str	r6, [sp, #36]	; 0x24
 8005d86:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8005d8a:	3704      	adds	r7, #4
 8005d8c:	e791      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005d8e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005d92:	e78e      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005d94:	2100      	movs	r1, #0
 8005d96:	910c      	str	r1, [sp, #48]	; 0x30
 8005d98:	9906      	ldr	r1, [sp, #24]
 8005d9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d9c:	3930      	subs	r1, #48	; 0x30
 8005d9e:	fb00 1106 	mla	r1, r0, r6, r1
 8005da2:	910c      	str	r1, [sp, #48]	; 0x30
 8005da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005da6:	460e      	mov	r6, r1
 8005da8:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005dac:	9106      	str	r1, [sp, #24]
 8005dae:	9906      	ldr	r1, [sp, #24]
 8005db0:	9609      	str	r6, [sp, #36]	; 0x24
 8005db2:	3930      	subs	r1, #48	; 0x30
 8005db4:	2909      	cmp	r1, #9
 8005db6:	d9ef      	bls.n	8005d98 <_svfprintf_r+0x28c>
 8005db8:	e70d      	b.n	8005bd6 <_svfprintf_r+0xca>
 8005dba:	f045 0508 	orr.w	r5, r5, #8
 8005dbe:	e778      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005dc0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005dc4:	e775      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dc8:	7809      	ldrb	r1, [r1, #0]
 8005dca:	296c      	cmp	r1, #108	; 0x6c
 8005dcc:	d105      	bne.n	8005dda <_svfprintf_r+0x2ce>
 8005dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dd0:	3101      	adds	r1, #1
 8005dd2:	9109      	str	r1, [sp, #36]	; 0x24
 8005dd4:	f045 0520 	orr.w	r5, r5, #32
 8005dd8:	e76b      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005dda:	f045 0510 	orr.w	r5, r5, #16
 8005dde:	e768      	b.n	8005cb2 <_svfprintf_r+0x1a6>
 8005de0:	2600      	movs	r6, #0
 8005de2:	1d3b      	adds	r3, r7, #4
 8005de4:	9308      	str	r3, [sp, #32]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8005dec:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8005df0:	f04f 0b01 	mov.w	fp, #1
 8005df4:	4637      	mov	r7, r6
 8005df6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8005dfa:	e11c      	b.n	8006036 <_svfprintf_r+0x52a>
 8005dfc:	b10b      	cbz	r3, 8005e02 <_svfprintf_r+0x2f6>
 8005dfe:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005e02:	f045 0510 	orr.w	r5, r5, #16
 8005e06:	e75b      	b.n	8005cc0 <_svfprintf_r+0x1b4>
 8005e08:	f015 0f10 	tst.w	r5, #16
 8005e0c:	f107 0304 	add.w	r3, r7, #4
 8005e10:	d003      	beq.n	8005e1a <_svfprintf_r+0x30e>
 8005e12:	683e      	ldr	r6, [r7, #0]
 8005e14:	9308      	str	r3, [sp, #32]
 8005e16:	17f7      	asrs	r7, r6, #31
 8005e18:	e75d      	b.n	8005cd6 <_svfprintf_r+0x1ca>
 8005e1a:	683e      	ldr	r6, [r7, #0]
 8005e1c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e20:	9308      	str	r3, [sp, #32]
 8005e22:	bf18      	it	ne
 8005e24:	b236      	sxthne	r6, r6
 8005e26:	e7f6      	b.n	8005e16 <_svfprintf_r+0x30a>
 8005e28:	b10b      	cbz	r3, 8005e2e <_svfprintf_r+0x322>
 8005e2a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005e2e:	3707      	adds	r7, #7
 8005e30:	f027 0707 	bic.w	r7, r7, #7
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	9308      	str	r3, [sp, #32]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	930d      	str	r3, [sp, #52]	; 0x34
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005e46:	930e      	str	r3, [sp, #56]	; 0x38
 8005e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8005e50:	4631      	mov	r1, r6
 8005e52:	4b4a      	ldr	r3, [pc, #296]	; (8005f7c <_svfprintf_r+0x470>)
 8005e54:	f7fa fdd6 	bl	8000a04 <__aeabi_dcmpun>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f040 85dc 	bne.w	8006a16 <_svfprintf_r+0xf0a>
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	4b46      	ldr	r3, [pc, #280]	; (8005f7c <_svfprintf_r+0x470>)
 8005e64:	4638      	mov	r0, r7
 8005e66:	4631      	mov	r1, r6
 8005e68:	f7fa fdae 	bl	80009c8 <__aeabi_dcmple>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f040 85d2 	bne.w	8006a16 <_svfprintf_r+0xf0a>
 8005e72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e76:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005e7a:	f7fa fd9b 	bl	80009b4 <__aeabi_dcmplt>
 8005e7e:	b110      	cbz	r0, 8005e86 <_svfprintf_r+0x37a>
 8005e80:	232d      	movs	r3, #45	; 0x2d
 8005e82:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005e86:	4b3e      	ldr	r3, [pc, #248]	; (8005f80 <_svfprintf_r+0x474>)
 8005e88:	4a3e      	ldr	r2, [pc, #248]	; (8005f84 <_svfprintf_r+0x478>)
 8005e8a:	9906      	ldr	r1, [sp, #24]
 8005e8c:	f04f 0b03 	mov.w	fp, #3
 8005e90:	2947      	cmp	r1, #71	; 0x47
 8005e92:	bfcc      	ite	gt
 8005e94:	4690      	movgt	r8, r2
 8005e96:	4698      	movle	r8, r3
 8005e98:	2600      	movs	r6, #0
 8005e9a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005e9e:	4637      	mov	r7, r6
 8005ea0:	e0c9      	b.n	8006036 <_svfprintf_r+0x52a>
 8005ea2:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005ea6:	d026      	beq.n	8005ef6 <_svfprintf_r+0x3ea>
 8005ea8:	9b06      	ldr	r3, [sp, #24]
 8005eaa:	f023 0320 	bic.w	r3, r3, #32
 8005eae:	2b47      	cmp	r3, #71	; 0x47
 8005eb0:	d104      	bne.n	8005ebc <_svfprintf_r+0x3b0>
 8005eb2:	f1bb 0f00 	cmp.w	fp, #0
 8005eb6:	bf08      	it	eq
 8005eb8:	f04f 0b01 	moveq.w	fp, #1
 8005ebc:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005ec0:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec4:	1e1f      	subs	r7, r3, #0
 8005ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ec8:	bfa8      	it	ge
 8005eca:	9710      	strge	r7, [sp, #64]	; 0x40
 8005ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ece:	bfbd      	ittte	lt
 8005ed0:	463b      	movlt	r3, r7
 8005ed2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ed6:	9310      	strlt	r3, [sp, #64]	; 0x40
 8005ed8:	2300      	movge	r3, #0
 8005eda:	bfb8      	it	lt
 8005edc:	232d      	movlt	r3, #45	; 0x2d
 8005ede:	9316      	str	r3, [sp, #88]	; 0x58
 8005ee0:	9b06      	ldr	r3, [sp, #24]
 8005ee2:	f023 0720 	bic.w	r7, r3, #32
 8005ee6:	2f46      	cmp	r7, #70	; 0x46
 8005ee8:	d008      	beq.n	8005efc <_svfprintf_r+0x3f0>
 8005eea:	2f45      	cmp	r7, #69	; 0x45
 8005eec:	d142      	bne.n	8005f74 <_svfprintf_r+0x468>
 8005eee:	f10b 0601 	add.w	r6, fp, #1
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e004      	b.n	8005f00 <_svfprintf_r+0x3f4>
 8005ef6:	f04f 0b06 	mov.w	fp, #6
 8005efa:	e7df      	b.n	8005ebc <_svfprintf_r+0x3b0>
 8005efc:	465e      	mov	r6, fp
 8005efe:	2303      	movs	r3, #3
 8005f00:	aa1f      	add	r2, sp, #124	; 0x7c
 8005f02:	9204      	str	r2, [sp, #16]
 8005f04:	aa1c      	add	r2, sp, #112	; 0x70
 8005f06:	9203      	str	r2, [sp, #12]
 8005f08:	aa1b      	add	r2, sp, #108	; 0x6c
 8005f0a:	9202      	str	r2, [sp, #8]
 8005f0c:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f14:	4650      	mov	r0, sl
 8005f16:	f000 fe63 	bl	8006be0 <_dtoa_r>
 8005f1a:	2f47      	cmp	r7, #71	; 0x47
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	d102      	bne.n	8005f26 <_svfprintf_r+0x41a>
 8005f20:	07e8      	lsls	r0, r5, #31
 8005f22:	f140 8585 	bpl.w	8006a30 <_svfprintf_r+0xf24>
 8005f26:	eb08 0306 	add.w	r3, r8, r6
 8005f2a:	2f46      	cmp	r7, #70	; 0x46
 8005f2c:	9307      	str	r3, [sp, #28]
 8005f2e:	d111      	bne.n	8005f54 <_svfprintf_r+0x448>
 8005f30:	f898 3000 	ldrb.w	r3, [r8]
 8005f34:	2b30      	cmp	r3, #48	; 0x30
 8005f36:	d109      	bne.n	8005f4c <_svfprintf_r+0x440>
 8005f38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005f3e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f40:	f7fa fd2e 	bl	80009a0 <__aeabi_dcmpeq>
 8005f44:	b910      	cbnz	r0, 8005f4c <_svfprintf_r+0x440>
 8005f46:	f1c6 0601 	rsb	r6, r6, #1
 8005f4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005f4c:	9a07      	ldr	r2, [sp, #28]
 8005f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f50:	441a      	add	r2, r3
 8005f52:	9207      	str	r2, [sp, #28]
 8005f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f58:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005f5a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f5c:	f7fa fd20 	bl	80009a0 <__aeabi_dcmpeq>
 8005f60:	b990      	cbnz	r0, 8005f88 <_svfprintf_r+0x47c>
 8005f62:	2230      	movs	r2, #48	; 0x30
 8005f64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f66:	9907      	ldr	r1, [sp, #28]
 8005f68:	4299      	cmp	r1, r3
 8005f6a:	d90f      	bls.n	8005f8c <_svfprintf_r+0x480>
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	911f      	str	r1, [sp, #124]	; 0x7c
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e7f7      	b.n	8005f64 <_svfprintf_r+0x458>
 8005f74:	465e      	mov	r6, fp
 8005f76:	e7bc      	b.n	8005ef2 <_svfprintf_r+0x3e6>
 8005f78:	0800ceae 	.word	0x0800ceae
 8005f7c:	7fefffff 	.word	0x7fefffff
 8005f80:	0800ce9e 	.word	0x0800ce9e
 8005f84:	0800cea2 	.word	0x0800cea2
 8005f88:	9b07      	ldr	r3, [sp, #28]
 8005f8a:	931f      	str	r3, [sp, #124]	; 0x7c
 8005f8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f8e:	2f47      	cmp	r7, #71	; 0x47
 8005f90:	eba3 0308 	sub.w	r3, r3, r8
 8005f94:	9307      	str	r3, [sp, #28]
 8005f96:	f040 8100 	bne.w	800619a <_svfprintf_r+0x68e>
 8005f9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f9c:	1cd9      	adds	r1, r3, #3
 8005f9e:	db02      	blt.n	8005fa6 <_svfprintf_r+0x49a>
 8005fa0:	459b      	cmp	fp, r3
 8005fa2:	f280 8126 	bge.w	80061f2 <_svfprintf_r+0x6e6>
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	3b02      	subs	r3, #2
 8005faa:	9306      	str	r3, [sp, #24]
 8005fac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005fae:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8005fb2:	1e53      	subs	r3, r2, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bfa8      	it	ge
 8005fb8:	222b      	movge	r2, #43	; 0x2b
 8005fba:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fbc:	bfbc      	itt	lt
 8005fbe:	f1c2 0301 	rsblt	r3, r2, #1
 8005fc2:	222d      	movlt	r2, #45	; 0x2d
 8005fc4:	2b09      	cmp	r3, #9
 8005fc6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8005fca:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8005fce:	f340 8100 	ble.w	80061d2 <_svfprintf_r+0x6c6>
 8005fd2:	260a      	movs	r6, #10
 8005fd4:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8005fd8:	fb93 f0f6 	sdiv	r0, r3, r6
 8005fdc:	fb06 3310 	mls	r3, r6, r0, r3
 8005fe0:	2809      	cmp	r0, #9
 8005fe2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005fe6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005fea:	f102 31ff 	add.w	r1, r2, #4294967295
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f300 80e8 	bgt.w	80061c4 <_svfprintf_r+0x6b8>
 8005ff4:	3330      	adds	r3, #48	; 0x30
 8005ff6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005ffa:	3a02      	subs	r2, #2
 8005ffc:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8006000:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8006004:	4282      	cmp	r2, r0
 8006006:	4619      	mov	r1, r3
 8006008:	f0c0 80de 	bcc.w	80061c8 <_svfprintf_r+0x6bc>
 800600c:	9a07      	ldr	r2, [sp, #28]
 800600e:	ab1d      	add	r3, sp, #116	; 0x74
 8006010:	1acb      	subs	r3, r1, r3
 8006012:	2a01      	cmp	r2, #1
 8006014:	9314      	str	r3, [sp, #80]	; 0x50
 8006016:	eb03 0b02 	add.w	fp, r3, r2
 800601a:	dc02      	bgt.n	8006022 <_svfprintf_r+0x516>
 800601c:	f015 0701 	ands.w	r7, r5, #1
 8006020:	d002      	beq.n	8006028 <_svfprintf_r+0x51c>
 8006022:	2700      	movs	r7, #0
 8006024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006026:	449b      	add	fp, r3
 8006028:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800602a:	b113      	cbz	r3, 8006032 <_svfprintf_r+0x526>
 800602c:	232d      	movs	r3, #45	; 0x2d
 800602e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006032:	2600      	movs	r6, #0
 8006034:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8006036:	455e      	cmp	r6, fp
 8006038:	4633      	mov	r3, r6
 800603a:	bfb8      	it	lt
 800603c:	465b      	movlt	r3, fp
 800603e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006040:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8006044:	b113      	cbz	r3, 800604c <_svfprintf_r+0x540>
 8006046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006048:	3301      	adds	r3, #1
 800604a:	930f      	str	r3, [sp, #60]	; 0x3c
 800604c:	f015 0302 	ands.w	r3, r5, #2
 8006050:	9316      	str	r3, [sp, #88]	; 0x58
 8006052:	bf1e      	ittt	ne
 8006054:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8006056:	3302      	addne	r3, #2
 8006058:	930f      	strne	r3, [sp, #60]	; 0x3c
 800605a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800605e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006060:	d118      	bne.n	8006094 <_svfprintf_r+0x588>
 8006062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	2b00      	cmp	r3, #0
 800606a:	9310      	str	r3, [sp, #64]	; 0x40
 800606c:	dd12      	ble.n	8006094 <_svfprintf_r+0x588>
 800606e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006070:	2b10      	cmp	r3, #16
 8006072:	4bab      	ldr	r3, [pc, #684]	; (8006320 <_svfprintf_r+0x814>)
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	f300 81d9 	bgt.w	800642c <_svfprintf_r+0x920>
 800607a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800607c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006082:	4413      	add	r3, r2
 8006084:	9323      	str	r3, [sp, #140]	; 0x8c
 8006086:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006088:	3301      	adds	r3, #1
 800608a:	2b07      	cmp	r3, #7
 800608c:	9322      	str	r3, [sp, #136]	; 0x88
 800608e:	f300 81e6 	bgt.w	800645e <_svfprintf_r+0x952>
 8006092:	3408      	adds	r4, #8
 8006094:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8006098:	b173      	cbz	r3, 80060b8 <_svfprintf_r+0x5ac>
 800609a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	2301      	movs	r3, #1
 80060a2:	6063      	str	r3, [r4, #4]
 80060a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060a6:	3301      	adds	r3, #1
 80060a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80060aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ac:	3301      	adds	r3, #1
 80060ae:	2b07      	cmp	r3, #7
 80060b0:	9322      	str	r3, [sp, #136]	; 0x88
 80060b2:	f300 81de 	bgt.w	8006472 <_svfprintf_r+0x966>
 80060b6:	3408      	adds	r4, #8
 80060b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060ba:	b16b      	cbz	r3, 80060d8 <_svfprintf_r+0x5cc>
 80060bc:	ab1a      	add	r3, sp, #104	; 0x68
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	2302      	movs	r3, #2
 80060c2:	6063      	str	r3, [r4, #4]
 80060c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060c6:	3302      	adds	r3, #2
 80060c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80060ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060cc:	3301      	adds	r3, #1
 80060ce:	2b07      	cmp	r3, #7
 80060d0:	9322      	str	r3, [sp, #136]	; 0x88
 80060d2:	f300 81d8 	bgt.w	8006486 <_svfprintf_r+0x97a>
 80060d6:	3408      	adds	r4, #8
 80060d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d118      	bne.n	8006110 <_svfprintf_r+0x604>
 80060de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	9310      	str	r3, [sp, #64]	; 0x40
 80060e8:	dd12      	ble.n	8006110 <_svfprintf_r+0x604>
 80060ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	4b8d      	ldr	r3, [pc, #564]	; (8006324 <_svfprintf_r+0x818>)
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	f300 81d2 	bgt.w	800649a <_svfprintf_r+0x98e>
 80060f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060fa:	6063      	str	r3, [r4, #4]
 80060fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060fe:	4413      	add	r3, r2
 8006100:	9323      	str	r3, [sp, #140]	; 0x8c
 8006102:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006104:	3301      	adds	r3, #1
 8006106:	2b07      	cmp	r3, #7
 8006108:	9322      	str	r3, [sp, #136]	; 0x88
 800610a:	f300 81df 	bgt.w	80064cc <_svfprintf_r+0x9c0>
 800610e:	3408      	adds	r4, #8
 8006110:	eba6 060b 	sub.w	r6, r6, fp
 8006114:	2e00      	cmp	r6, #0
 8006116:	dd0f      	ble.n	8006138 <_svfprintf_r+0x62c>
 8006118:	4b82      	ldr	r3, [pc, #520]	; (8006324 <_svfprintf_r+0x818>)
 800611a:	2e10      	cmp	r6, #16
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	f300 81df 	bgt.w	80064e0 <_svfprintf_r+0x9d4>
 8006122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006124:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8006126:	3301      	adds	r3, #1
 8006128:	6066      	str	r6, [r4, #4]
 800612a:	2b07      	cmp	r3, #7
 800612c:	4406      	add	r6, r0
 800612e:	9623      	str	r6, [sp, #140]	; 0x8c
 8006130:	9322      	str	r3, [sp, #136]	; 0x88
 8006132:	f300 81ec 	bgt.w	800650e <_svfprintf_r+0xa02>
 8006136:	3408      	adds	r4, #8
 8006138:	05eb      	lsls	r3, r5, #23
 800613a:	f100 81f2 	bmi.w	8006522 <_svfprintf_r+0xa16>
 800613e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006140:	e884 0900 	stmia.w	r4, {r8, fp}
 8006144:	445b      	add	r3, fp
 8006146:	9323      	str	r3, [sp, #140]	; 0x8c
 8006148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800614a:	3301      	adds	r3, #1
 800614c:	2b07      	cmp	r3, #7
 800614e:	9322      	str	r3, [sp, #136]	; 0x88
 8006150:	f340 8419 	ble.w	8006986 <_svfprintf_r+0xe7a>
 8006154:	aa21      	add	r2, sp, #132	; 0x84
 8006156:	4649      	mov	r1, r9
 8006158:	4650      	mov	r0, sl
 800615a:	f002 f833 	bl	80081c4 <__ssprint_r>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8431 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8006164:	ac2e      	add	r4, sp, #184	; 0xb8
 8006166:	076b      	lsls	r3, r5, #29
 8006168:	f100 8410 	bmi.w	800698c <_svfprintf_r+0xe80>
 800616c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006170:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006172:	428a      	cmp	r2, r1
 8006174:	bfac      	ite	ge
 8006176:	189b      	addge	r3, r3, r2
 8006178:	185b      	addlt	r3, r3, r1
 800617a:	930b      	str	r3, [sp, #44]	; 0x2c
 800617c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800617e:	b13b      	cbz	r3, 8006190 <_svfprintf_r+0x684>
 8006180:	aa21      	add	r2, sp, #132	; 0x84
 8006182:	4649      	mov	r1, r9
 8006184:	4650      	mov	r0, sl
 8006186:	f002 f81d 	bl	80081c4 <__ssprint_r>
 800618a:	2800      	cmp	r0, #0
 800618c:	f040 841b 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8006190:	2300      	movs	r3, #0
 8006192:	9f08      	ldr	r7, [sp, #32]
 8006194:	9322      	str	r3, [sp, #136]	; 0x88
 8006196:	ac2e      	add	r4, sp, #184	; 0xb8
 8006198:	e4f2      	b.n	8005b80 <_svfprintf_r+0x74>
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	2b65      	cmp	r3, #101	; 0x65
 800619e:	f77f af05 	ble.w	8005fac <_svfprintf_r+0x4a0>
 80061a2:	9b06      	ldr	r3, [sp, #24]
 80061a4:	2b66      	cmp	r3, #102	; 0x66
 80061a6:	d124      	bne.n	80061f2 <_svfprintf_r+0x6e6>
 80061a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dd19      	ble.n	80061e2 <_svfprintf_r+0x6d6>
 80061ae:	f1bb 0f00 	cmp.w	fp, #0
 80061b2:	d101      	bne.n	80061b8 <_svfprintf_r+0x6ac>
 80061b4:	07ea      	lsls	r2, r5, #31
 80061b6:	d502      	bpl.n	80061be <_svfprintf_r+0x6b2>
 80061b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ba:	4413      	add	r3, r2
 80061bc:	445b      	add	r3, fp
 80061be:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80061c0:	469b      	mov	fp, r3
 80061c2:	e731      	b.n	8006028 <_svfprintf_r+0x51c>
 80061c4:	460a      	mov	r2, r1
 80061c6:	e707      	b.n	8005fd8 <_svfprintf_r+0x4cc>
 80061c8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80061cc:	f803 1b01 	strb.w	r1, [r3], #1
 80061d0:	e718      	b.n	8006004 <_svfprintf_r+0x4f8>
 80061d2:	2230      	movs	r2, #48	; 0x30
 80061d4:	4413      	add	r3, r2
 80061d6:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80061da:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80061de:	a91e      	add	r1, sp, #120	; 0x78
 80061e0:	e714      	b.n	800600c <_svfprintf_r+0x500>
 80061e2:	f1bb 0f00 	cmp.w	fp, #0
 80061e6:	d101      	bne.n	80061ec <_svfprintf_r+0x6e0>
 80061e8:	07eb      	lsls	r3, r5, #31
 80061ea:	d515      	bpl.n	8006218 <_svfprintf_r+0x70c>
 80061ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ee:	3301      	adds	r3, #1
 80061f0:	e7e4      	b.n	80061bc <_svfprintf_r+0x6b0>
 80061f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80061f4:	9b07      	ldr	r3, [sp, #28]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	db06      	blt.n	8006208 <_svfprintf_r+0x6fc>
 80061fa:	07ef      	lsls	r7, r5, #31
 80061fc:	d50e      	bpl.n	800621c <_svfprintf_r+0x710>
 80061fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006200:	4413      	add	r3, r2
 8006202:	2267      	movs	r2, #103	; 0x67
 8006204:	9206      	str	r2, [sp, #24]
 8006206:	e7da      	b.n	80061be <_svfprintf_r+0x6b2>
 8006208:	9b07      	ldr	r3, [sp, #28]
 800620a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800620c:	2a00      	cmp	r2, #0
 800620e:	440b      	add	r3, r1
 8006210:	dcf7      	bgt.n	8006202 <_svfprintf_r+0x6f6>
 8006212:	f1c2 0201 	rsb	r2, r2, #1
 8006216:	e7f3      	b.n	8006200 <_svfprintf_r+0x6f4>
 8006218:	2301      	movs	r3, #1
 800621a:	e7d0      	b.n	80061be <_svfprintf_r+0x6b2>
 800621c:	4613      	mov	r3, r2
 800621e:	e7f0      	b.n	8006202 <_svfprintf_r+0x6f6>
 8006220:	b10b      	cbz	r3, 8006226 <_svfprintf_r+0x71a>
 8006222:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006226:	f015 0f20 	tst.w	r5, #32
 800622a:	f107 0304 	add.w	r3, r7, #4
 800622e:	d008      	beq.n	8006242 <_svfprintf_r+0x736>
 8006230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	17ce      	asrs	r6, r1, #31
 8006236:	4608      	mov	r0, r1
 8006238:	4631      	mov	r1, r6
 800623a:	e9c2 0100 	strd	r0, r1, [r2]
 800623e:	461f      	mov	r7, r3
 8006240:	e49e      	b.n	8005b80 <_svfprintf_r+0x74>
 8006242:	06ee      	lsls	r6, r5, #27
 8006244:	d503      	bpl.n	800624e <_svfprintf_r+0x742>
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800624a:	6011      	str	r1, [r2, #0]
 800624c:	e7f7      	b.n	800623e <_svfprintf_r+0x732>
 800624e:	0668      	lsls	r0, r5, #25
 8006250:	d5f9      	bpl.n	8006246 <_svfprintf_r+0x73a>
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8006258:	8011      	strh	r1, [r2, #0]
 800625a:	e7f0      	b.n	800623e <_svfprintf_r+0x732>
 800625c:	f045 0510 	orr.w	r5, r5, #16
 8006260:	f015 0320 	ands.w	r3, r5, #32
 8006264:	d022      	beq.n	80062ac <_svfprintf_r+0x7a0>
 8006266:	3707      	adds	r7, #7
 8006268:	f027 0707 	bic.w	r7, r7, #7
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	9308      	str	r3, [sp, #32]
 8006272:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006276:	2300      	movs	r3, #0
 8006278:	2200      	movs	r2, #0
 800627a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800627e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006282:	f000 83db 	beq.w	8006a3c <_svfprintf_r+0xf30>
 8006286:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800628a:	920f      	str	r2, [sp, #60]	; 0x3c
 800628c:	ea56 0207 	orrs.w	r2, r6, r7
 8006290:	f040 83d9 	bne.w	8006a46 <_svfprintf_r+0xf3a>
 8006294:	f1bb 0f00 	cmp.w	fp, #0
 8006298:	f000 80aa 	beq.w	80063f0 <_svfprintf_r+0x8e4>
 800629c:	2b01      	cmp	r3, #1
 800629e:	d076      	beq.n	800638e <_svfprintf_r+0x882>
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	f000 8091 	beq.w	80063c8 <_svfprintf_r+0x8bc>
 80062a6:	2600      	movs	r6, #0
 80062a8:	2700      	movs	r7, #0
 80062aa:	e3d2      	b.n	8006a52 <_svfprintf_r+0xf46>
 80062ac:	1d3a      	adds	r2, r7, #4
 80062ae:	f015 0110 	ands.w	r1, r5, #16
 80062b2:	9208      	str	r2, [sp, #32]
 80062b4:	d002      	beq.n	80062bc <_svfprintf_r+0x7b0>
 80062b6:	683e      	ldr	r6, [r7, #0]
 80062b8:	2700      	movs	r7, #0
 80062ba:	e7dd      	b.n	8006278 <_svfprintf_r+0x76c>
 80062bc:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80062c0:	d0f9      	beq.n	80062b6 <_svfprintf_r+0x7aa>
 80062c2:	883e      	ldrh	r6, [r7, #0]
 80062c4:	2700      	movs	r7, #0
 80062c6:	e7d6      	b.n	8006276 <_svfprintf_r+0x76a>
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	9308      	str	r3, [sp, #32]
 80062cc:	2330      	movs	r3, #48	; 0x30
 80062ce:	2278      	movs	r2, #120	; 0x78
 80062d0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80062d4:	4b14      	ldr	r3, [pc, #80]	; (8006328 <_svfprintf_r+0x81c>)
 80062d6:	683e      	ldr	r6, [r7, #0]
 80062d8:	9315      	str	r3, [sp, #84]	; 0x54
 80062da:	2700      	movs	r7, #0
 80062dc:	f045 0502 	orr.w	r5, r5, #2
 80062e0:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80062e4:	2302      	movs	r3, #2
 80062e6:	9206      	str	r2, [sp, #24]
 80062e8:	e7c6      	b.n	8006278 <_svfprintf_r+0x76c>
 80062ea:	2600      	movs	r6, #0
 80062ec:	1d3b      	adds	r3, r7, #4
 80062ee:	f1bb 3fff 	cmp.w	fp, #4294967295
 80062f2:	9308      	str	r3, [sp, #32]
 80062f4:	f8d7 8000 	ldr.w	r8, [r7]
 80062f8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80062fc:	d00a      	beq.n	8006314 <_svfprintf_r+0x808>
 80062fe:	465a      	mov	r2, fp
 8006300:	4631      	mov	r1, r6
 8006302:	4640      	mov	r0, r8
 8006304:	f001 fc62 	bl	8007bcc <memchr>
 8006308:	2800      	cmp	r0, #0
 800630a:	f000 808d 	beq.w	8006428 <_svfprintf_r+0x91c>
 800630e:	eba0 0b08 	sub.w	fp, r0, r8
 8006312:	e5c4      	b.n	8005e9e <_svfprintf_r+0x392>
 8006314:	4640      	mov	r0, r8
 8006316:	f7f9 ff1b 	bl	8000150 <strlen>
 800631a:	4683      	mov	fp, r0
 800631c:	e5bf      	b.n	8005e9e <_svfprintf_r+0x392>
 800631e:	bf00      	nop
 8006320:	0800ced2 	.word	0x0800ced2
 8006324:	0800cee2 	.word	0x0800cee2
 8006328:	0800cebf 	.word	0x0800cebf
 800632c:	f045 0510 	orr.w	r5, r5, #16
 8006330:	06a9      	lsls	r1, r5, #26
 8006332:	d509      	bpl.n	8006348 <_svfprintf_r+0x83c>
 8006334:	3707      	adds	r7, #7
 8006336:	f027 0707 	bic.w	r7, r7, #7
 800633a:	f107 0308 	add.w	r3, r7, #8
 800633e:	9308      	str	r3, [sp, #32]
 8006340:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006344:	2301      	movs	r3, #1
 8006346:	e797      	b.n	8006278 <_svfprintf_r+0x76c>
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	f015 0f10 	tst.w	r5, #16
 800634e:	9308      	str	r3, [sp, #32]
 8006350:	d001      	beq.n	8006356 <_svfprintf_r+0x84a>
 8006352:	683e      	ldr	r6, [r7, #0]
 8006354:	e002      	b.n	800635c <_svfprintf_r+0x850>
 8006356:	066a      	lsls	r2, r5, #25
 8006358:	d5fb      	bpl.n	8006352 <_svfprintf_r+0x846>
 800635a:	883e      	ldrh	r6, [r7, #0]
 800635c:	2700      	movs	r7, #0
 800635e:	e7f1      	b.n	8006344 <_svfprintf_r+0x838>
 8006360:	b10b      	cbz	r3, 8006366 <_svfprintf_r+0x85a>
 8006362:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006366:	4ba3      	ldr	r3, [pc, #652]	; (80065f4 <_svfprintf_r+0xae8>)
 8006368:	e4c5      	b.n	8005cf6 <_svfprintf_r+0x1ea>
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	f015 0f10 	tst.w	r5, #16
 8006370:	9308      	str	r3, [sp, #32]
 8006372:	d001      	beq.n	8006378 <_svfprintf_r+0x86c>
 8006374:	683e      	ldr	r6, [r7, #0]
 8006376:	e002      	b.n	800637e <_svfprintf_r+0x872>
 8006378:	066e      	lsls	r6, r5, #25
 800637a:	d5fb      	bpl.n	8006374 <_svfprintf_r+0x868>
 800637c:	883e      	ldrh	r6, [r7, #0]
 800637e:	2700      	movs	r7, #0
 8006380:	e4c5      	b.n	8005d0e <_svfprintf_r+0x202>
 8006382:	4643      	mov	r3, r8
 8006384:	e366      	b.n	8006a54 <_svfprintf_r+0xf48>
 8006386:	2f00      	cmp	r7, #0
 8006388:	bf08      	it	eq
 800638a:	2e0a      	cmpeq	r6, #10
 800638c:	d205      	bcs.n	800639a <_svfprintf_r+0x88e>
 800638e:	3630      	adds	r6, #48	; 0x30
 8006390:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8006394:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8006398:	e377      	b.n	8006a8a <_svfprintf_r+0xf7e>
 800639a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800639e:	4630      	mov	r0, r6
 80063a0:	4639      	mov	r1, r7
 80063a2:	220a      	movs	r2, #10
 80063a4:	2300      	movs	r3, #0
 80063a6:	f7fa fb8b 	bl	8000ac0 <__aeabi_uldivmod>
 80063aa:	3230      	adds	r2, #48	; 0x30
 80063ac:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80063b0:	2300      	movs	r3, #0
 80063b2:	4630      	mov	r0, r6
 80063b4:	4639      	mov	r1, r7
 80063b6:	220a      	movs	r2, #10
 80063b8:	f7fa fb82 	bl	8000ac0 <__aeabi_uldivmod>
 80063bc:	4606      	mov	r6, r0
 80063be:	460f      	mov	r7, r1
 80063c0:	ea56 0307 	orrs.w	r3, r6, r7
 80063c4:	d1eb      	bne.n	800639e <_svfprintf_r+0x892>
 80063c6:	e360      	b.n	8006a8a <_svfprintf_r+0xf7e>
 80063c8:	2600      	movs	r6, #0
 80063ca:	2700      	movs	r7, #0
 80063cc:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80063d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80063d2:	f006 030f 	and.w	r3, r6, #15
 80063d6:	5cd3      	ldrb	r3, [r2, r3]
 80063d8:	093a      	lsrs	r2, r7, #4
 80063da:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80063de:	0933      	lsrs	r3, r6, #4
 80063e0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80063e4:	461e      	mov	r6, r3
 80063e6:	4617      	mov	r7, r2
 80063e8:	ea56 0307 	orrs.w	r3, r6, r7
 80063ec:	d1f0      	bne.n	80063d0 <_svfprintf_r+0x8c4>
 80063ee:	e34c      	b.n	8006a8a <_svfprintf_r+0xf7e>
 80063f0:	b93b      	cbnz	r3, 8006402 <_svfprintf_r+0x8f6>
 80063f2:	07ea      	lsls	r2, r5, #31
 80063f4:	d505      	bpl.n	8006402 <_svfprintf_r+0x8f6>
 80063f6:	2330      	movs	r3, #48	; 0x30
 80063f8:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80063fc:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8006400:	e343      	b.n	8006a8a <_svfprintf_r+0xf7e>
 8006402:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8006406:	e340      	b.n	8006a8a <_svfprintf_r+0xf7e>
 8006408:	b10b      	cbz	r3, 800640e <_svfprintf_r+0x902>
 800640a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 82f7 	beq.w	8006a04 <_svfprintf_r+0xef8>
 8006416:	2600      	movs	r6, #0
 8006418:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800641c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8006420:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8006424:	9708      	str	r7, [sp, #32]
 8006426:	e4e3      	b.n	8005df0 <_svfprintf_r+0x2e4>
 8006428:	4606      	mov	r6, r0
 800642a:	e538      	b.n	8005e9e <_svfprintf_r+0x392>
 800642c:	2310      	movs	r3, #16
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006432:	3310      	adds	r3, #16
 8006434:	9323      	str	r3, [sp, #140]	; 0x8c
 8006436:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006438:	3301      	adds	r3, #1
 800643a:	2b07      	cmp	r3, #7
 800643c:	9322      	str	r3, [sp, #136]	; 0x88
 800643e:	dc04      	bgt.n	800644a <_svfprintf_r+0x93e>
 8006440:	3408      	adds	r4, #8
 8006442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006444:	3b10      	subs	r3, #16
 8006446:	9310      	str	r3, [sp, #64]	; 0x40
 8006448:	e611      	b.n	800606e <_svfprintf_r+0x562>
 800644a:	aa21      	add	r2, sp, #132	; 0x84
 800644c:	4649      	mov	r1, r9
 800644e:	4650      	mov	r0, sl
 8006450:	f001 feb8 	bl	80081c4 <__ssprint_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	f040 82b6 	bne.w	80069c6 <_svfprintf_r+0xeba>
 800645a:	ac2e      	add	r4, sp, #184	; 0xb8
 800645c:	e7f1      	b.n	8006442 <_svfprintf_r+0x936>
 800645e:	aa21      	add	r2, sp, #132	; 0x84
 8006460:	4649      	mov	r1, r9
 8006462:	4650      	mov	r0, sl
 8006464:	f001 feae 	bl	80081c4 <__ssprint_r>
 8006468:	2800      	cmp	r0, #0
 800646a:	f040 82ac 	bne.w	80069c6 <_svfprintf_r+0xeba>
 800646e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006470:	e610      	b.n	8006094 <_svfprintf_r+0x588>
 8006472:	aa21      	add	r2, sp, #132	; 0x84
 8006474:	4649      	mov	r1, r9
 8006476:	4650      	mov	r0, sl
 8006478:	f001 fea4 	bl	80081c4 <__ssprint_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	f040 82a2 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8006482:	ac2e      	add	r4, sp, #184	; 0xb8
 8006484:	e618      	b.n	80060b8 <_svfprintf_r+0x5ac>
 8006486:	aa21      	add	r2, sp, #132	; 0x84
 8006488:	4649      	mov	r1, r9
 800648a:	4650      	mov	r0, sl
 800648c:	f001 fe9a 	bl	80081c4 <__ssprint_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	f040 8298 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8006496:	ac2e      	add	r4, sp, #184	; 0xb8
 8006498:	e61e      	b.n	80060d8 <_svfprintf_r+0x5cc>
 800649a:	2310      	movs	r3, #16
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064a0:	3310      	adds	r3, #16
 80064a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80064a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a6:	3301      	adds	r3, #1
 80064a8:	2b07      	cmp	r3, #7
 80064aa:	9322      	str	r3, [sp, #136]	; 0x88
 80064ac:	dc04      	bgt.n	80064b8 <_svfprintf_r+0x9ac>
 80064ae:	3408      	adds	r4, #8
 80064b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064b2:	3b10      	subs	r3, #16
 80064b4:	9310      	str	r3, [sp, #64]	; 0x40
 80064b6:	e618      	b.n	80060ea <_svfprintf_r+0x5de>
 80064b8:	aa21      	add	r2, sp, #132	; 0x84
 80064ba:	4649      	mov	r1, r9
 80064bc:	4650      	mov	r0, sl
 80064be:	f001 fe81 	bl	80081c4 <__ssprint_r>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f040 827f 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80064c8:	ac2e      	add	r4, sp, #184	; 0xb8
 80064ca:	e7f1      	b.n	80064b0 <_svfprintf_r+0x9a4>
 80064cc:	aa21      	add	r2, sp, #132	; 0x84
 80064ce:	4649      	mov	r1, r9
 80064d0:	4650      	mov	r0, sl
 80064d2:	f001 fe77 	bl	80081c4 <__ssprint_r>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f040 8275 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80064dc:	ac2e      	add	r4, sp, #184	; 0xb8
 80064de:	e617      	b.n	8006110 <_svfprintf_r+0x604>
 80064e0:	2310      	movs	r3, #16
 80064e2:	6063      	str	r3, [r4, #4]
 80064e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064e6:	3310      	adds	r3, #16
 80064e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80064ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ec:	3301      	adds	r3, #1
 80064ee:	2b07      	cmp	r3, #7
 80064f0:	9322      	str	r3, [sp, #136]	; 0x88
 80064f2:	dc02      	bgt.n	80064fa <_svfprintf_r+0x9ee>
 80064f4:	3408      	adds	r4, #8
 80064f6:	3e10      	subs	r6, #16
 80064f8:	e60e      	b.n	8006118 <_svfprintf_r+0x60c>
 80064fa:	aa21      	add	r2, sp, #132	; 0x84
 80064fc:	4649      	mov	r1, r9
 80064fe:	4650      	mov	r0, sl
 8006500:	f001 fe60 	bl	80081c4 <__ssprint_r>
 8006504:	2800      	cmp	r0, #0
 8006506:	f040 825e 	bne.w	80069c6 <_svfprintf_r+0xeba>
 800650a:	ac2e      	add	r4, sp, #184	; 0xb8
 800650c:	e7f3      	b.n	80064f6 <_svfprintf_r+0x9ea>
 800650e:	aa21      	add	r2, sp, #132	; 0x84
 8006510:	4649      	mov	r1, r9
 8006512:	4650      	mov	r0, sl
 8006514:	f001 fe56 	bl	80081c4 <__ssprint_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	f040 8254 	bne.w	80069c6 <_svfprintf_r+0xeba>
 800651e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006520:	e60a      	b.n	8006138 <_svfprintf_r+0x62c>
 8006522:	9b06      	ldr	r3, [sp, #24]
 8006524:	2b65      	cmp	r3, #101	; 0x65
 8006526:	f340 81a9 	ble.w	800687c <_svfprintf_r+0xd70>
 800652a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800652c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800652e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006530:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006532:	f7fa fa35 	bl	80009a0 <__aeabi_dcmpeq>
 8006536:	2800      	cmp	r0, #0
 8006538:	d062      	beq.n	8006600 <_svfprintf_r+0xaf4>
 800653a:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <_svfprintf_r+0xaec>)
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	2301      	movs	r3, #1
 8006540:	6063      	str	r3, [r4, #4]
 8006542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006544:	3301      	adds	r3, #1
 8006546:	9323      	str	r3, [sp, #140]	; 0x8c
 8006548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800654a:	3301      	adds	r3, #1
 800654c:	2b07      	cmp	r3, #7
 800654e:	9322      	str	r3, [sp, #136]	; 0x88
 8006550:	dc25      	bgt.n	800659e <_svfprintf_r+0xa92>
 8006552:	3408      	adds	r4, #8
 8006554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006556:	9a07      	ldr	r2, [sp, #28]
 8006558:	4293      	cmp	r3, r2
 800655a:	db02      	blt.n	8006562 <_svfprintf_r+0xa56>
 800655c:	07ee      	lsls	r6, r5, #31
 800655e:	f57f ae02 	bpl.w	8006166 <_svfprintf_r+0x65a>
 8006562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800656e:	4413      	add	r3, r2
 8006570:	9323      	str	r3, [sp, #140]	; 0x8c
 8006572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006574:	3301      	adds	r3, #1
 8006576:	2b07      	cmp	r3, #7
 8006578:	9322      	str	r3, [sp, #136]	; 0x88
 800657a:	dc1a      	bgt.n	80065b2 <_svfprintf_r+0xaa6>
 800657c:	3408      	adds	r4, #8
 800657e:	9b07      	ldr	r3, [sp, #28]
 8006580:	1e5e      	subs	r6, r3, #1
 8006582:	2e00      	cmp	r6, #0
 8006584:	f77f adef 	ble.w	8006166 <_svfprintf_r+0x65a>
 8006588:	f04f 0810 	mov.w	r8, #16
 800658c:	4f1b      	ldr	r7, [pc, #108]	; (80065fc <_svfprintf_r+0xaf0>)
 800658e:	2e10      	cmp	r6, #16
 8006590:	6027      	str	r7, [r4, #0]
 8006592:	dc18      	bgt.n	80065c6 <_svfprintf_r+0xaba>
 8006594:	6066      	str	r6, [r4, #4]
 8006596:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006598:	441e      	add	r6, r3
 800659a:	9623      	str	r6, [sp, #140]	; 0x8c
 800659c:	e5d4      	b.n	8006148 <_svfprintf_r+0x63c>
 800659e:	aa21      	add	r2, sp, #132	; 0x84
 80065a0:	4649      	mov	r1, r9
 80065a2:	4650      	mov	r0, sl
 80065a4:	f001 fe0e 	bl	80081c4 <__ssprint_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	f040 820c 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80065ae:	ac2e      	add	r4, sp, #184	; 0xb8
 80065b0:	e7d0      	b.n	8006554 <_svfprintf_r+0xa48>
 80065b2:	aa21      	add	r2, sp, #132	; 0x84
 80065b4:	4649      	mov	r1, r9
 80065b6:	4650      	mov	r0, sl
 80065b8:	f001 fe04 	bl	80081c4 <__ssprint_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	f040 8202 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80065c2:	ac2e      	add	r4, sp, #184	; 0xb8
 80065c4:	e7db      	b.n	800657e <_svfprintf_r+0xa72>
 80065c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80065cc:	3310      	adds	r3, #16
 80065ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80065d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065d2:	3301      	adds	r3, #1
 80065d4:	2b07      	cmp	r3, #7
 80065d6:	9322      	str	r3, [sp, #136]	; 0x88
 80065d8:	dc02      	bgt.n	80065e0 <_svfprintf_r+0xad4>
 80065da:	3408      	adds	r4, #8
 80065dc:	3e10      	subs	r6, #16
 80065de:	e7d6      	b.n	800658e <_svfprintf_r+0xa82>
 80065e0:	aa21      	add	r2, sp, #132	; 0x84
 80065e2:	4649      	mov	r1, r9
 80065e4:	4650      	mov	r0, sl
 80065e6:	f001 fded 	bl	80081c4 <__ssprint_r>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f040 81eb 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80065f0:	ac2e      	add	r4, sp, #184	; 0xb8
 80065f2:	e7f3      	b.n	80065dc <_svfprintf_r+0xad0>
 80065f4:	0800cebf 	.word	0x0800cebf
 80065f8:	0800ced0 	.word	0x0800ced0
 80065fc:	0800cee2 	.word	0x0800cee2
 8006600:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006602:	2b00      	cmp	r3, #0
 8006604:	dc7a      	bgt.n	80066fc <_svfprintf_r+0xbf0>
 8006606:	4b9b      	ldr	r3, [pc, #620]	; (8006874 <_svfprintf_r+0xd68>)
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	2301      	movs	r3, #1
 800660c:	6063      	str	r3, [r4, #4]
 800660e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006610:	3301      	adds	r3, #1
 8006612:	9323      	str	r3, [sp, #140]	; 0x8c
 8006614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006616:	3301      	adds	r3, #1
 8006618:	2b07      	cmp	r3, #7
 800661a:	9322      	str	r3, [sp, #136]	; 0x88
 800661c:	dc44      	bgt.n	80066a8 <_svfprintf_r+0xb9c>
 800661e:	3408      	adds	r4, #8
 8006620:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006622:	b923      	cbnz	r3, 800662e <_svfprintf_r+0xb22>
 8006624:	9b07      	ldr	r3, [sp, #28]
 8006626:	b913      	cbnz	r3, 800662e <_svfprintf_r+0xb22>
 8006628:	07e8      	lsls	r0, r5, #31
 800662a:	f57f ad9c 	bpl.w	8006166 <_svfprintf_r+0x65a>
 800662e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800663a:	4413      	add	r3, r2
 800663c:	9323      	str	r3, [sp, #140]	; 0x8c
 800663e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006640:	3301      	adds	r3, #1
 8006642:	2b07      	cmp	r3, #7
 8006644:	9322      	str	r3, [sp, #136]	; 0x88
 8006646:	dc39      	bgt.n	80066bc <_svfprintf_r+0xbb0>
 8006648:	f104 0308 	add.w	r3, r4, #8
 800664c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800664e:	2e00      	cmp	r6, #0
 8006650:	da19      	bge.n	8006686 <_svfprintf_r+0xb7a>
 8006652:	2410      	movs	r4, #16
 8006654:	4f88      	ldr	r7, [pc, #544]	; (8006878 <_svfprintf_r+0xd6c>)
 8006656:	4276      	negs	r6, r6
 8006658:	2e10      	cmp	r6, #16
 800665a:	601f      	str	r7, [r3, #0]
 800665c:	dc38      	bgt.n	80066d0 <_svfprintf_r+0xbc4>
 800665e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006660:	605e      	str	r6, [r3, #4]
 8006662:	4416      	add	r6, r2
 8006664:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006666:	9623      	str	r6, [sp, #140]	; 0x8c
 8006668:	3201      	adds	r2, #1
 800666a:	2a07      	cmp	r2, #7
 800666c:	f103 0308 	add.w	r3, r3, #8
 8006670:	9222      	str	r2, [sp, #136]	; 0x88
 8006672:	dd08      	ble.n	8006686 <_svfprintf_r+0xb7a>
 8006674:	aa21      	add	r2, sp, #132	; 0x84
 8006676:	4649      	mov	r1, r9
 8006678:	4650      	mov	r0, sl
 800667a:	f001 fda3 	bl	80081c4 <__ssprint_r>
 800667e:	2800      	cmp	r0, #0
 8006680:	f040 81a1 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8006684:	ab2e      	add	r3, sp, #184	; 0xb8
 8006686:	9a07      	ldr	r2, [sp, #28]
 8006688:	9907      	ldr	r1, [sp, #28]
 800668a:	605a      	str	r2, [r3, #4]
 800668c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800668e:	f8c3 8000 	str.w	r8, [r3]
 8006692:	440a      	add	r2, r1
 8006694:	9223      	str	r2, [sp, #140]	; 0x8c
 8006696:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006698:	3201      	adds	r2, #1
 800669a:	2a07      	cmp	r2, #7
 800669c:	9222      	str	r2, [sp, #136]	; 0x88
 800669e:	f73f ad59 	bgt.w	8006154 <_svfprintf_r+0x648>
 80066a2:	f103 0408 	add.w	r4, r3, #8
 80066a6:	e55e      	b.n	8006166 <_svfprintf_r+0x65a>
 80066a8:	aa21      	add	r2, sp, #132	; 0x84
 80066aa:	4649      	mov	r1, r9
 80066ac:	4650      	mov	r0, sl
 80066ae:	f001 fd89 	bl	80081c4 <__ssprint_r>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f040 8187 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80066b8:	ac2e      	add	r4, sp, #184	; 0xb8
 80066ba:	e7b1      	b.n	8006620 <_svfprintf_r+0xb14>
 80066bc:	aa21      	add	r2, sp, #132	; 0x84
 80066be:	4649      	mov	r1, r9
 80066c0:	4650      	mov	r0, sl
 80066c2:	f001 fd7f 	bl	80081c4 <__ssprint_r>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f040 817d 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80066cc:	ab2e      	add	r3, sp, #184	; 0xb8
 80066ce:	e7bd      	b.n	800664c <_svfprintf_r+0xb40>
 80066d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80066d2:	605c      	str	r4, [r3, #4]
 80066d4:	3210      	adds	r2, #16
 80066d6:	9223      	str	r2, [sp, #140]	; 0x8c
 80066d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066da:	3201      	adds	r2, #1
 80066dc:	2a07      	cmp	r2, #7
 80066de:	9222      	str	r2, [sp, #136]	; 0x88
 80066e0:	dc02      	bgt.n	80066e8 <_svfprintf_r+0xbdc>
 80066e2:	3308      	adds	r3, #8
 80066e4:	3e10      	subs	r6, #16
 80066e6:	e7b7      	b.n	8006658 <_svfprintf_r+0xb4c>
 80066e8:	aa21      	add	r2, sp, #132	; 0x84
 80066ea:	4649      	mov	r1, r9
 80066ec:	4650      	mov	r0, sl
 80066ee:	f001 fd69 	bl	80081c4 <__ssprint_r>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	f040 8167 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80066f8:	ab2e      	add	r3, sp, #184	; 0xb8
 80066fa:	e7f3      	b.n	80066e4 <_svfprintf_r+0xbd8>
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	42bb      	cmp	r3, r7
 8006700:	bfa8      	it	ge
 8006702:	463b      	movge	r3, r7
 8006704:	2b00      	cmp	r3, #0
 8006706:	461e      	mov	r6, r3
 8006708:	dd0b      	ble.n	8006722 <_svfprintf_r+0xc16>
 800670a:	6063      	str	r3, [r4, #4]
 800670c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800670e:	f8c4 8000 	str.w	r8, [r4]
 8006712:	4433      	add	r3, r6
 8006714:	9323      	str	r3, [sp, #140]	; 0x8c
 8006716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006718:	3301      	adds	r3, #1
 800671a:	2b07      	cmp	r3, #7
 800671c:	9322      	str	r3, [sp, #136]	; 0x88
 800671e:	dc5f      	bgt.n	80067e0 <_svfprintf_r+0xcd4>
 8006720:	3408      	adds	r4, #8
 8006722:	2e00      	cmp	r6, #0
 8006724:	bfb4      	ite	lt
 8006726:	463e      	movlt	r6, r7
 8006728:	1bbe      	subge	r6, r7, r6
 800672a:	2e00      	cmp	r6, #0
 800672c:	dd0f      	ble.n	800674e <_svfprintf_r+0xc42>
 800672e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8006878 <_svfprintf_r+0xd6c>
 8006732:	2e10      	cmp	r6, #16
 8006734:	f8c4 b000 	str.w	fp, [r4]
 8006738:	dc5c      	bgt.n	80067f4 <_svfprintf_r+0xce8>
 800673a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800673c:	6066      	str	r6, [r4, #4]
 800673e:	441e      	add	r6, r3
 8006740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006742:	9623      	str	r6, [sp, #140]	; 0x8c
 8006744:	3301      	adds	r3, #1
 8006746:	2b07      	cmp	r3, #7
 8006748:	9322      	str	r3, [sp, #136]	; 0x88
 800674a:	dc6a      	bgt.n	8006822 <_svfprintf_r+0xd16>
 800674c:	3408      	adds	r4, #8
 800674e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006750:	9a07      	ldr	r2, [sp, #28]
 8006752:	4293      	cmp	r3, r2
 8006754:	db01      	blt.n	800675a <_svfprintf_r+0xc4e>
 8006756:	07e9      	lsls	r1, r5, #31
 8006758:	d50d      	bpl.n	8006776 <_svfprintf_r+0xc6a>
 800675a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800675c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006766:	4413      	add	r3, r2
 8006768:	9323      	str	r3, [sp, #140]	; 0x8c
 800676a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676c:	3301      	adds	r3, #1
 800676e:	2b07      	cmp	r3, #7
 8006770:	9322      	str	r3, [sp, #136]	; 0x88
 8006772:	dc60      	bgt.n	8006836 <_svfprintf_r+0xd2a>
 8006774:	3408      	adds	r4, #8
 8006776:	9b07      	ldr	r3, [sp, #28]
 8006778:	9a07      	ldr	r2, [sp, #28]
 800677a:	1bde      	subs	r6, r3, r7
 800677c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	429e      	cmp	r6, r3
 8006782:	bfa8      	it	ge
 8006784:	461e      	movge	r6, r3
 8006786:	2e00      	cmp	r6, #0
 8006788:	dd0b      	ble.n	80067a2 <_svfprintf_r+0xc96>
 800678a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800678c:	4447      	add	r7, r8
 800678e:	4433      	add	r3, r6
 8006790:	9323      	str	r3, [sp, #140]	; 0x8c
 8006792:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006794:	6027      	str	r7, [r4, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	2b07      	cmp	r3, #7
 800679a:	6066      	str	r6, [r4, #4]
 800679c:	9322      	str	r3, [sp, #136]	; 0x88
 800679e:	dc54      	bgt.n	800684a <_svfprintf_r+0xd3e>
 80067a0:	3408      	adds	r4, #8
 80067a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067a4:	9a07      	ldr	r2, [sp, #28]
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	eba2 0303 	sub.w	r3, r2, r3
 80067ac:	bfb4      	ite	lt
 80067ae:	461e      	movlt	r6, r3
 80067b0:	1b9e      	subge	r6, r3, r6
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	f77f acd7 	ble.w	8006166 <_svfprintf_r+0x65a>
 80067b8:	f04f 0810 	mov.w	r8, #16
 80067bc:	4f2e      	ldr	r7, [pc, #184]	; (8006878 <_svfprintf_r+0xd6c>)
 80067be:	2e10      	cmp	r6, #16
 80067c0:	6027      	str	r7, [r4, #0]
 80067c2:	f77f aee7 	ble.w	8006594 <_svfprintf_r+0xa88>
 80067c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80067cc:	3310      	adds	r3, #16
 80067ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80067d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067d2:	3301      	adds	r3, #1
 80067d4:	2b07      	cmp	r3, #7
 80067d6:	9322      	str	r3, [sp, #136]	; 0x88
 80067d8:	dc41      	bgt.n	800685e <_svfprintf_r+0xd52>
 80067da:	3408      	adds	r4, #8
 80067dc:	3e10      	subs	r6, #16
 80067de:	e7ee      	b.n	80067be <_svfprintf_r+0xcb2>
 80067e0:	aa21      	add	r2, sp, #132	; 0x84
 80067e2:	4649      	mov	r1, r9
 80067e4:	4650      	mov	r0, sl
 80067e6:	f001 fced 	bl	80081c4 <__ssprint_r>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	f040 80eb 	bne.w	80069c6 <_svfprintf_r+0xeba>
 80067f0:	ac2e      	add	r4, sp, #184	; 0xb8
 80067f2:	e796      	b.n	8006722 <_svfprintf_r+0xc16>
 80067f4:	2310      	movs	r3, #16
 80067f6:	6063      	str	r3, [r4, #4]
 80067f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067fa:	3310      	adds	r3, #16
 80067fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80067fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006800:	3301      	adds	r3, #1
 8006802:	2b07      	cmp	r3, #7
 8006804:	9322      	str	r3, [sp, #136]	; 0x88
 8006806:	dc02      	bgt.n	800680e <_svfprintf_r+0xd02>
 8006808:	3408      	adds	r4, #8
 800680a:	3e10      	subs	r6, #16
 800680c:	e791      	b.n	8006732 <_svfprintf_r+0xc26>
 800680e:	aa21      	add	r2, sp, #132	; 0x84
 8006810:	4649      	mov	r1, r9
 8006812:	4650      	mov	r0, sl
 8006814:	f001 fcd6 	bl	80081c4 <__ssprint_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	f040 80d4 	bne.w	80069c6 <_svfprintf_r+0xeba>
 800681e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006820:	e7f3      	b.n	800680a <_svfprintf_r+0xcfe>
 8006822:	aa21      	add	r2, sp, #132	; 0x84
 8006824:	4649      	mov	r1, r9
 8006826:	4650      	mov	r0, sl
 8006828:	f001 fccc 	bl	80081c4 <__ssprint_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	f040 80ca 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8006832:	ac2e      	add	r4, sp, #184	; 0xb8
 8006834:	e78b      	b.n	800674e <_svfprintf_r+0xc42>
 8006836:	aa21      	add	r2, sp, #132	; 0x84
 8006838:	4649      	mov	r1, r9
 800683a:	4650      	mov	r0, sl
 800683c:	f001 fcc2 	bl	80081c4 <__ssprint_r>
 8006840:	2800      	cmp	r0, #0
 8006842:	f040 80c0 	bne.w	80069c6 <_svfprintf_r+0xeba>
 8006846:	ac2e      	add	r4, sp, #184	; 0xb8
 8006848:	e795      	b.n	8006776 <_svfprintf_r+0xc6a>
 800684a:	aa21      	add	r2, sp, #132	; 0x84
 800684c:	4649      	mov	r1, r9
 800684e:	4650      	mov	r0, sl
 8006850:	f001 fcb8 	bl	80081c4 <__ssprint_r>
 8006854:	2800      	cmp	r0, #0
 8006856:	f040 80b6 	bne.w	80069c6 <_svfprintf_r+0xeba>
 800685a:	ac2e      	add	r4, sp, #184	; 0xb8
 800685c:	e7a1      	b.n	80067a2 <_svfprintf_r+0xc96>
 800685e:	aa21      	add	r2, sp, #132	; 0x84
 8006860:	4649      	mov	r1, r9
 8006862:	4650      	mov	r0, sl
 8006864:	f001 fcae 	bl	80081c4 <__ssprint_r>
 8006868:	2800      	cmp	r0, #0
 800686a:	f040 80ac 	bne.w	80069c6 <_svfprintf_r+0xeba>
 800686e:	ac2e      	add	r4, sp, #184	; 0xb8
 8006870:	e7b4      	b.n	80067dc <_svfprintf_r+0xcd0>
 8006872:	bf00      	nop
 8006874:	0800ced0 	.word	0x0800ced0
 8006878:	0800cee2 	.word	0x0800cee2
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	2b01      	cmp	r3, #1
 8006880:	dc01      	bgt.n	8006886 <_svfprintf_r+0xd7a>
 8006882:	07ea      	lsls	r2, r5, #31
 8006884:	d576      	bpl.n	8006974 <_svfprintf_r+0xe68>
 8006886:	2301      	movs	r3, #1
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800688c:	f8c4 8000 	str.w	r8, [r4]
 8006890:	3301      	adds	r3, #1
 8006892:	9323      	str	r3, [sp, #140]	; 0x8c
 8006894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006896:	3301      	adds	r3, #1
 8006898:	2b07      	cmp	r3, #7
 800689a:	9322      	str	r3, [sp, #136]	; 0x88
 800689c:	dc36      	bgt.n	800690c <_svfprintf_r+0xe00>
 800689e:	3408      	adds	r4, #8
 80068a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ac:	4413      	add	r3, r2
 80068ae:	9323      	str	r3, [sp, #140]	; 0x8c
 80068b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068b2:	3301      	adds	r3, #1
 80068b4:	2b07      	cmp	r3, #7
 80068b6:	9322      	str	r3, [sp, #136]	; 0x88
 80068b8:	dc31      	bgt.n	800691e <_svfprintf_r+0xe12>
 80068ba:	3408      	adds	r4, #8
 80068bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80068c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80068c4:	f7fa f86c 	bl	80009a0 <__aeabi_dcmpeq>
 80068c8:	9b07      	ldr	r3, [sp, #28]
 80068ca:	1e5e      	subs	r6, r3, #1
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d12f      	bne.n	8006930 <_svfprintf_r+0xe24>
 80068d0:	f108 0301 	add.w	r3, r8, #1
 80068d4:	e884 0048 	stmia.w	r4, {r3, r6}
 80068d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068da:	9a07      	ldr	r2, [sp, #28]
 80068dc:	3b01      	subs	r3, #1
 80068de:	4413      	add	r3, r2
 80068e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80068e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068e4:	3301      	adds	r3, #1
 80068e6:	2b07      	cmp	r3, #7
 80068e8:	9322      	str	r3, [sp, #136]	; 0x88
 80068ea:	dd4a      	ble.n	8006982 <_svfprintf_r+0xe76>
 80068ec:	aa21      	add	r2, sp, #132	; 0x84
 80068ee:	4649      	mov	r1, r9
 80068f0:	4650      	mov	r0, sl
 80068f2:	f001 fc67 	bl	80081c4 <__ssprint_r>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d165      	bne.n	80069c6 <_svfprintf_r+0xeba>
 80068fa:	ac2e      	add	r4, sp, #184	; 0xb8
 80068fc:	ab1d      	add	r3, sp, #116	; 0x74
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006902:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006904:	6063      	str	r3, [r4, #4]
 8006906:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006908:	4413      	add	r3, r2
 800690a:	e41c      	b.n	8006146 <_svfprintf_r+0x63a>
 800690c:	aa21      	add	r2, sp, #132	; 0x84
 800690e:	4649      	mov	r1, r9
 8006910:	4650      	mov	r0, sl
 8006912:	f001 fc57 	bl	80081c4 <__ssprint_r>
 8006916:	2800      	cmp	r0, #0
 8006918:	d155      	bne.n	80069c6 <_svfprintf_r+0xeba>
 800691a:	ac2e      	add	r4, sp, #184	; 0xb8
 800691c:	e7c0      	b.n	80068a0 <_svfprintf_r+0xd94>
 800691e:	aa21      	add	r2, sp, #132	; 0x84
 8006920:	4649      	mov	r1, r9
 8006922:	4650      	mov	r0, sl
 8006924:	f001 fc4e 	bl	80081c4 <__ssprint_r>
 8006928:	2800      	cmp	r0, #0
 800692a:	d14c      	bne.n	80069c6 <_svfprintf_r+0xeba>
 800692c:	ac2e      	add	r4, sp, #184	; 0xb8
 800692e:	e7c5      	b.n	80068bc <_svfprintf_r+0xdb0>
 8006930:	2e00      	cmp	r6, #0
 8006932:	dde3      	ble.n	80068fc <_svfprintf_r+0xdf0>
 8006934:	f04f 0810 	mov.w	r8, #16
 8006938:	4f58      	ldr	r7, [pc, #352]	; (8006a9c <_svfprintf_r+0xf90>)
 800693a:	2e10      	cmp	r6, #16
 800693c:	6027      	str	r7, [r4, #0]
 800693e:	dc04      	bgt.n	800694a <_svfprintf_r+0xe3e>
 8006940:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006942:	6066      	str	r6, [r4, #4]
 8006944:	441e      	add	r6, r3
 8006946:	9623      	str	r6, [sp, #140]	; 0x8c
 8006948:	e7cb      	b.n	80068e2 <_svfprintf_r+0xdd6>
 800694a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800694c:	f8c4 8004 	str.w	r8, [r4, #4]
 8006950:	3310      	adds	r3, #16
 8006952:	9323      	str	r3, [sp, #140]	; 0x8c
 8006954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006956:	3301      	adds	r3, #1
 8006958:	2b07      	cmp	r3, #7
 800695a:	9322      	str	r3, [sp, #136]	; 0x88
 800695c:	dc02      	bgt.n	8006964 <_svfprintf_r+0xe58>
 800695e:	3408      	adds	r4, #8
 8006960:	3e10      	subs	r6, #16
 8006962:	e7ea      	b.n	800693a <_svfprintf_r+0xe2e>
 8006964:	aa21      	add	r2, sp, #132	; 0x84
 8006966:	4649      	mov	r1, r9
 8006968:	4650      	mov	r0, sl
 800696a:	f001 fc2b 	bl	80081c4 <__ssprint_r>
 800696e:	bb50      	cbnz	r0, 80069c6 <_svfprintf_r+0xeba>
 8006970:	ac2e      	add	r4, sp, #184	; 0xb8
 8006972:	e7f5      	b.n	8006960 <_svfprintf_r+0xe54>
 8006974:	2301      	movs	r3, #1
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800697a:	f8c4 8000 	str.w	r8, [r4]
 800697e:	3301      	adds	r3, #1
 8006980:	e7ae      	b.n	80068e0 <_svfprintf_r+0xdd4>
 8006982:	3408      	adds	r4, #8
 8006984:	e7ba      	b.n	80068fc <_svfprintf_r+0xdf0>
 8006986:	3408      	adds	r4, #8
 8006988:	f7ff bbed 	b.w	8006166 <_svfprintf_r+0x65a>
 800698c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800698e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006990:	1a9d      	subs	r5, r3, r2
 8006992:	2d00      	cmp	r5, #0
 8006994:	f77f abea 	ble.w	800616c <_svfprintf_r+0x660>
 8006998:	2610      	movs	r6, #16
 800699a:	4b41      	ldr	r3, [pc, #260]	; (8006aa0 <_svfprintf_r+0xf94>)
 800699c:	2d10      	cmp	r5, #16
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	dc1b      	bgt.n	80069da <_svfprintf_r+0xece>
 80069a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069a4:	6065      	str	r5, [r4, #4]
 80069a6:	441d      	add	r5, r3
 80069a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069aa:	9523      	str	r5, [sp, #140]	; 0x8c
 80069ac:	3301      	adds	r3, #1
 80069ae:	2b07      	cmp	r3, #7
 80069b0:	9322      	str	r3, [sp, #136]	; 0x88
 80069b2:	f77f abdb 	ble.w	800616c <_svfprintf_r+0x660>
 80069b6:	aa21      	add	r2, sp, #132	; 0x84
 80069b8:	4649      	mov	r1, r9
 80069ba:	4650      	mov	r0, sl
 80069bc:	f001 fc02 	bl	80081c4 <__ssprint_r>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	f43f abd3 	beq.w	800616c <_svfprintf_r+0x660>
 80069c6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80069ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d0:	bf18      	it	ne
 80069d2:	f04f 33ff 	movne.w	r3, #4294967295
 80069d6:	f7ff b8bd 	b.w	8005b54 <_svfprintf_r+0x48>
 80069da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069dc:	6066      	str	r6, [r4, #4]
 80069de:	3310      	adds	r3, #16
 80069e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80069e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069e4:	3301      	adds	r3, #1
 80069e6:	2b07      	cmp	r3, #7
 80069e8:	9322      	str	r3, [sp, #136]	; 0x88
 80069ea:	dc02      	bgt.n	80069f2 <_svfprintf_r+0xee6>
 80069ec:	3408      	adds	r4, #8
 80069ee:	3d10      	subs	r5, #16
 80069f0:	e7d3      	b.n	800699a <_svfprintf_r+0xe8e>
 80069f2:	aa21      	add	r2, sp, #132	; 0x84
 80069f4:	4649      	mov	r1, r9
 80069f6:	4650      	mov	r0, sl
 80069f8:	f001 fbe4 	bl	80081c4 <__ssprint_r>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d1e2      	bne.n	80069c6 <_svfprintf_r+0xeba>
 8006a00:	ac2e      	add	r4, sp, #184	; 0xb8
 8006a02:	e7f4      	b.n	80069ee <_svfprintf_r+0xee2>
 8006a04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0dd      	beq.n	80069c6 <_svfprintf_r+0xeba>
 8006a0a:	aa21      	add	r2, sp, #132	; 0x84
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	4650      	mov	r0, sl
 8006a10:	f001 fbd8 	bl	80081c4 <__ssprint_r>
 8006a14:	e7d7      	b.n	80069c6 <_svfprintf_r+0xeba>
 8006a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006a1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006a1e:	f7f9 fff1 	bl	8000a04 <__aeabi_dcmpun>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f43f aa3d 	beq.w	8005ea2 <_svfprintf_r+0x396>
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <_svfprintf_r+0xf98>)
 8006a2a:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <_svfprintf_r+0xf9c>)
 8006a2c:	f7ff ba2d 	b.w	8005e8a <_svfprintf_r+0x37e>
 8006a30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a32:	eba3 0308 	sub.w	r3, r3, r8
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	f7ff baaf 	b.w	8005f9a <_svfprintf_r+0x48e>
 8006a3c:	ea56 0207 	orrs.w	r2, r6, r7
 8006a40:	950f      	str	r5, [sp, #60]	; 0x3c
 8006a42:	f43f ac2b 	beq.w	800629c <_svfprintf_r+0x790>
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	f43f ac9d 	beq.w	8006386 <_svfprintf_r+0x87a>
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	f43f acbd 	beq.w	80063cc <_svfprintf_r+0x8c0>
 8006a52:	ab2e      	add	r3, sp, #184	; 0xb8
 8006a54:	08f1      	lsrs	r1, r6, #3
 8006a56:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006a5a:	08f8      	lsrs	r0, r7, #3
 8006a5c:	f006 0207 	and.w	r2, r6, #7
 8006a60:	4607      	mov	r7, r0
 8006a62:	460e      	mov	r6, r1
 8006a64:	3230      	adds	r2, #48	; 0x30
 8006a66:	ea56 0107 	orrs.w	r1, r6, r7
 8006a6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8006a6e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006a72:	f47f ac86 	bne.w	8006382 <_svfprintf_r+0x876>
 8006a76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a78:	07c9      	lsls	r1, r1, #31
 8006a7a:	d506      	bpl.n	8006a8a <_svfprintf_r+0xf7e>
 8006a7c:	2a30      	cmp	r2, #48	; 0x30
 8006a7e:	d004      	beq.n	8006a8a <_svfprintf_r+0xf7e>
 8006a80:	2230      	movs	r2, #48	; 0x30
 8006a82:	f808 2c01 	strb.w	r2, [r8, #-1]
 8006a86:	f1a3 0802 	sub.w	r8, r3, #2
 8006a8a:	ab2e      	add	r3, sp, #184	; 0xb8
 8006a8c:	465e      	mov	r6, fp
 8006a8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a90:	eba3 0b08 	sub.w	fp, r3, r8
 8006a94:	2700      	movs	r7, #0
 8006a96:	f7ff bace 	b.w	8006036 <_svfprintf_r+0x52a>
 8006a9a:	bf00      	nop
 8006a9c:	0800cee2 	.word	0x0800cee2
 8006aa0:	0800ced2 	.word	0x0800ced2
 8006aa4:	0800cea6 	.word	0x0800cea6
 8006aa8:	0800ceaa 	.word	0x0800ceaa

08006aac <__ascii_wctomb>:
 8006aac:	b149      	cbz	r1, 8006ac2 <__ascii_wctomb+0x16>
 8006aae:	2aff      	cmp	r2, #255	; 0xff
 8006ab0:	bf8b      	itete	hi
 8006ab2:	238a      	movhi	r3, #138	; 0x8a
 8006ab4:	700a      	strbls	r2, [r1, #0]
 8006ab6:	6003      	strhi	r3, [r0, #0]
 8006ab8:	2001      	movls	r0, #1
 8006aba:	bf88      	it	hi
 8006abc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ac0:	4770      	bx	lr
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4770      	bx	lr

08006ac6 <quorem>:
 8006ac6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aca:	6903      	ldr	r3, [r0, #16]
 8006acc:	690c      	ldr	r4, [r1, #16]
 8006ace:	4680      	mov	r8, r0
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	f300 8082 	bgt.w	8006bda <quorem+0x114>
 8006ad6:	3c01      	subs	r4, #1
 8006ad8:	f101 0714 	add.w	r7, r1, #20
 8006adc:	f100 0614 	add.w	r6, r0, #20
 8006ae0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006ae4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006ae8:	3501      	adds	r5, #1
 8006aea:	fbb0 f5f5 	udiv	r5, r0, r5
 8006aee:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006af2:	eb06 030e 	add.w	r3, r6, lr
 8006af6:	eb07 090e 	add.w	r9, r7, lr
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	b38d      	cbz	r5, 8006b62 <quorem+0x9c>
 8006afe:	f04f 0a00 	mov.w	sl, #0
 8006b02:	4638      	mov	r0, r7
 8006b04:	46b4      	mov	ip, r6
 8006b06:	46d3      	mov	fp, sl
 8006b08:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b0c:	b293      	uxth	r3, r2
 8006b0e:	fb05 a303 	mla	r3, r5, r3, sl
 8006b12:	0c12      	lsrs	r2, r2, #16
 8006b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b18:	fb05 a202 	mla	r2, r5, r2, sl
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	ebab 0303 	sub.w	r3, fp, r3
 8006b22:	f8bc b000 	ldrh.w	fp, [ip]
 8006b26:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006b2a:	445b      	add	r3, fp
 8006b2c:	fa1f fb82 	uxth.w	fp, r2
 8006b30:	f8dc 2000 	ldr.w	r2, [ip]
 8006b34:	4581      	cmp	r9, r0
 8006b36:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006b3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b44:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006b48:	f84c 3b04 	str.w	r3, [ip], #4
 8006b4c:	d2dc      	bcs.n	8006b08 <quorem+0x42>
 8006b4e:	f856 300e 	ldr.w	r3, [r6, lr]
 8006b52:	b933      	cbnz	r3, 8006b62 <quorem+0x9c>
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	3b04      	subs	r3, #4
 8006b58:	429e      	cmp	r6, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	d331      	bcc.n	8006bc2 <quorem+0xfc>
 8006b5e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b62:	4640      	mov	r0, r8
 8006b64:	f001 fa55 	bl	8008012 <__mcmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	db26      	blt.n	8006bba <quorem+0xf4>
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f04f 0e00 	mov.w	lr, #0
 8006b72:	3501      	adds	r5, #1
 8006b74:	f857 1b04 	ldr.w	r1, [r7], #4
 8006b78:	f8d0 c000 	ldr.w	ip, [r0]
 8006b7c:	b28b      	uxth	r3, r1
 8006b7e:	ebae 0303 	sub.w	r3, lr, r3
 8006b82:	fa1f f28c 	uxth.w	r2, ip
 8006b86:	4413      	add	r3, r2
 8006b88:	0c0a      	lsrs	r2, r1, #16
 8006b8a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b98:	45b9      	cmp	r9, r7
 8006b9a:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006b9e:	f840 3b04 	str.w	r3, [r0], #4
 8006ba2:	d2e7      	bcs.n	8006b74 <quorem+0xae>
 8006ba4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006ba8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006bac:	b92a      	cbnz	r2, 8006bba <quorem+0xf4>
 8006bae:	3b04      	subs	r3, #4
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	d30b      	bcc.n	8006bce <quorem+0x108>
 8006bb6:	f8c8 4010 	str.w	r4, [r8, #16]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	b003      	add	sp, #12
 8006bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	2a00      	cmp	r2, #0
 8006bc8:	d1c9      	bne.n	8006b5e <quorem+0x98>
 8006bca:	3c01      	subs	r4, #1
 8006bcc:	e7c4      	b.n	8006b58 <quorem+0x92>
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	3b04      	subs	r3, #4
 8006bd2:	2a00      	cmp	r2, #0
 8006bd4:	d1ef      	bne.n	8006bb6 <quorem+0xf0>
 8006bd6:	3c01      	subs	r4, #1
 8006bd8:	e7ea      	b.n	8006bb0 <quorem+0xea>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e7ee      	b.n	8006bbc <quorem+0xf6>
	...

08006be0 <_dtoa_r>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006be6:	b095      	sub	sp, #84	; 0x54
 8006be8:	4604      	mov	r4, r0
 8006bea:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006bec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bf0:	b93e      	cbnz	r6, 8006c02 <_dtoa_r+0x22>
 8006bf2:	2010      	movs	r0, #16
 8006bf4:	f000 fdd6 	bl	80077a4 <malloc>
 8006bf8:	6260      	str	r0, [r4, #36]	; 0x24
 8006bfa:	6046      	str	r6, [r0, #4]
 8006bfc:	6086      	str	r6, [r0, #8]
 8006bfe:	6006      	str	r6, [r0, #0]
 8006c00:	60c6      	str	r6, [r0, #12]
 8006c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c04:	6819      	ldr	r1, [r3, #0]
 8006c06:	b151      	cbz	r1, 8006c1e <_dtoa_r+0x3e>
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4093      	lsls	r3, r2
 8006c0e:	604a      	str	r2, [r1, #4]
 8006c10:	608b      	str	r3, [r1, #8]
 8006c12:	4620      	mov	r0, r4
 8006c14:	f001 f828 	bl	8007c68 <_Bfree>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfb7      	itett	lt
 8006c24:	2301      	movlt	r3, #1
 8006c26:	2300      	movge	r3, #0
 8006c28:	602b      	strlt	r3, [r5, #0]
 8006c2a:	9b03      	ldrlt	r3, [sp, #12]
 8006c2c:	bfae      	itee	ge
 8006c2e:	602b      	strge	r3, [r5, #0]
 8006c30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c34:	9303      	strlt	r3, [sp, #12]
 8006c36:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006c3a:	4bab      	ldr	r3, [pc, #684]	; (8006ee8 <_dtoa_r+0x308>)
 8006c3c:	ea33 0309 	bics.w	r3, r3, r9
 8006c40:	d11b      	bne.n	8006c7a <_dtoa_r+0x9a>
 8006c42:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	9b02      	ldr	r3, [sp, #8]
 8006c4c:	b923      	cbnz	r3, 8006c58 <_dtoa_r+0x78>
 8006c4e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f000 8583 	beq.w	800775e <_dtoa_r+0xb7e>
 8006c58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c5a:	b953      	cbnz	r3, 8006c72 <_dtoa_r+0x92>
 8006c5c:	4ba3      	ldr	r3, [pc, #652]	; (8006eec <_dtoa_r+0x30c>)
 8006c5e:	e021      	b.n	8006ca4 <_dtoa_r+0xc4>
 8006c60:	4ba3      	ldr	r3, [pc, #652]	; (8006ef0 <_dtoa_r+0x310>)
 8006c62:	9306      	str	r3, [sp, #24]
 8006c64:	3308      	adds	r3, #8
 8006c66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	9806      	ldr	r0, [sp, #24]
 8006c6c:	b015      	add	sp, #84	; 0x54
 8006c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c72:	4b9e      	ldr	r3, [pc, #632]	; (8006eec <_dtoa_r+0x30c>)
 8006c74:	9306      	str	r3, [sp, #24]
 8006c76:	3303      	adds	r3, #3
 8006c78:	e7f5      	b.n	8006c66 <_dtoa_r+0x86>
 8006c7a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	f7f9 fe8b 	bl	80009a0 <__aeabi_dcmpeq>
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	b160      	cbz	r0, 8006ca8 <_dtoa_r+0xc8>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 855e 	beq.w	8007758 <_dtoa_r+0xb78>
 8006c9c:	4b95      	ldr	r3, [pc, #596]	; (8006ef4 <_dtoa_r+0x314>)
 8006c9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	9306      	str	r3, [sp, #24]
 8006ca6:	e7e0      	b.n	8006c6a <_dtoa_r+0x8a>
 8006ca8:	ab12      	add	r3, sp, #72	; 0x48
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	ab13      	add	r3, sp, #76	; 0x4c
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f001 fa25 	bl	8008104 <__d2b>
 8006cba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cbe:	4682      	mov	sl, r0
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	d07d      	beq.n	8006dc0 <_dtoa_r+0x1e0>
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cca:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006cce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006cd2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cd6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4b86      	ldr	r3, [pc, #536]	; (8006ef8 <_dtoa_r+0x318>)
 8006cde:	f7f9 fa43 	bl	8000168 <__aeabi_dsub>
 8006ce2:	a37b      	add	r3, pc, #492	; (adr r3, 8006ed0 <_dtoa_r+0x2f0>)
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	f7f9 fbf2 	bl	80004d0 <__aeabi_dmul>
 8006cec:	a37a      	add	r3, pc, #488	; (adr r3, 8006ed8 <_dtoa_r+0x2f8>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f7f9 fa3b 	bl	800016c <__adddf3>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	f7f9 fb82 	bl	8000404 <__aeabi_i2d>
 8006d00:	a377      	add	r3, pc, #476	; (adr r3, 8006ee0 <_dtoa_r+0x300>)
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f7f9 fbe3 	bl	80004d0 <__aeabi_dmul>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4630      	mov	r0, r6
 8006d10:	4639      	mov	r1, r7
 8006d12:	f7f9 fa2b 	bl	800016c <__adddf3>
 8006d16:	4606      	mov	r6, r0
 8006d18:	460f      	mov	r7, r1
 8006d1a:	f7f9 fe89 	bl	8000a30 <__aeabi_d2iz>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	4683      	mov	fp, r0
 8006d22:	2300      	movs	r3, #0
 8006d24:	4630      	mov	r0, r6
 8006d26:	4639      	mov	r1, r7
 8006d28:	f7f9 fe44 	bl	80009b4 <__aeabi_dcmplt>
 8006d2c:	b158      	cbz	r0, 8006d46 <_dtoa_r+0x166>
 8006d2e:	4658      	mov	r0, fp
 8006d30:	f7f9 fb68 	bl	8000404 <__aeabi_i2d>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7f9 fe30 	bl	80009a0 <__aeabi_dcmpeq>
 8006d40:	b908      	cbnz	r0, 8006d46 <_dtoa_r+0x166>
 8006d42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d46:	f1bb 0f16 	cmp.w	fp, #22
 8006d4a:	d858      	bhi.n	8006dfe <_dtoa_r+0x21e>
 8006d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d50:	496a      	ldr	r1, [pc, #424]	; (8006efc <_dtoa_r+0x31c>)
 8006d52:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d5a:	f7f9 fe49 	bl	80009f0 <__aeabi_dcmpgt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d04f      	beq.n	8006e02 <_dtoa_r+0x222>
 8006d62:	2300      	movs	r3, #0
 8006d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d68:	930d      	str	r3, [sp, #52]	; 0x34
 8006d6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d6c:	1b5d      	subs	r5, r3, r5
 8006d6e:	1e6b      	subs	r3, r5, #1
 8006d70:	9307      	str	r3, [sp, #28]
 8006d72:	bf43      	ittte	mi
 8006d74:	2300      	movmi	r3, #0
 8006d76:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d7a:	9307      	strmi	r3, [sp, #28]
 8006d7c:	f04f 0800 	movpl.w	r8, #0
 8006d80:	f1bb 0f00 	cmp.w	fp, #0
 8006d84:	db3f      	blt.n	8006e06 <_dtoa_r+0x226>
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006d8c:	445b      	add	r3, fp
 8006d8e:	9307      	str	r3, [sp, #28]
 8006d90:	2300      	movs	r3, #0
 8006d92:	9308      	str	r3, [sp, #32]
 8006d94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d96:	2b09      	cmp	r3, #9
 8006d98:	f200 80b4 	bhi.w	8006f04 <_dtoa_r+0x324>
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	bfc4      	itt	gt
 8006da0:	3b04      	subgt	r3, #4
 8006da2:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006da4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006da6:	bfc8      	it	gt
 8006da8:	2600      	movgt	r6, #0
 8006daa:	f1a3 0302 	sub.w	r3, r3, #2
 8006dae:	bfd8      	it	le
 8006db0:	2601      	movle	r6, #1
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	f200 80b2 	bhi.w	8006f1c <_dtoa_r+0x33c>
 8006db8:	e8df f003 	tbb	[pc, r3]
 8006dbc:	782d8684 	.word	0x782d8684
 8006dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dc2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006dc4:	441d      	add	r5, r3
 8006dc6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	dd11      	ble.n	8006df2 <_dtoa_r+0x212>
 8006dce:	9a02      	ldr	r2, [sp, #8]
 8006dd0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006dd4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006dd8:	fa22 f000 	lsr.w	r0, r2, r0
 8006ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8006de0:	4318      	orrs	r0, r3
 8006de2:	f7f9 faff 	bl	80003e4 <__aeabi_ui2d>
 8006de6:	2301      	movs	r3, #1
 8006de8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006dec:	3d01      	subs	r5, #1
 8006dee:	9310      	str	r3, [sp, #64]	; 0x40
 8006df0:	e773      	b.n	8006cda <_dtoa_r+0xfa>
 8006df2:	f1c3 0020 	rsb	r0, r3, #32
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	fa03 f000 	lsl.w	r0, r3, r0
 8006dfc:	e7f1      	b.n	8006de2 <_dtoa_r+0x202>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7b2      	b.n	8006d68 <_dtoa_r+0x188>
 8006e02:	900d      	str	r0, [sp, #52]	; 0x34
 8006e04:	e7b1      	b.n	8006d6a <_dtoa_r+0x18a>
 8006e06:	f1cb 0300 	rsb	r3, fp, #0
 8006e0a:	9308      	str	r3, [sp, #32]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	eba8 080b 	sub.w	r8, r8, fp
 8006e12:	930c      	str	r3, [sp, #48]	; 0x30
 8006e14:	e7be      	b.n	8006d94 <_dtoa_r+0x1b4>
 8006e16:	2301      	movs	r3, #1
 8006e18:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f340 8080 	ble.w	8006f22 <_dtoa_r+0x342>
 8006e22:	4699      	mov	r9, r3
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	2200      	movs	r2, #0
 8006e28:	2104      	movs	r1, #4
 8006e2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e2c:	606a      	str	r2, [r5, #4]
 8006e2e:	f101 0214 	add.w	r2, r1, #20
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d97a      	bls.n	8006f2c <_dtoa_r+0x34c>
 8006e36:	6869      	ldr	r1, [r5, #4]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 fee1 	bl	8007c00 <_Balloc>
 8006e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e40:	6028      	str	r0, [r5, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f1b9 0f0e 	cmp.w	r9, #14
 8006e48:	9306      	str	r3, [sp, #24]
 8006e4a:	f200 80f0 	bhi.w	800702e <_dtoa_r+0x44e>
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	f000 80ed 	beq.w	800702e <_dtoa_r+0x44e>
 8006e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e58:	f1bb 0f00 	cmp.w	fp, #0
 8006e5c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006e60:	dd79      	ble.n	8006f56 <_dtoa_r+0x376>
 8006e62:	4a26      	ldr	r2, [pc, #152]	; (8006efc <_dtoa_r+0x31c>)
 8006e64:	f00b 030f 	and.w	r3, fp, #15
 8006e68:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006e6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e70:	06f0      	lsls	r0, r6, #27
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e7a:	d55c      	bpl.n	8006f36 <_dtoa_r+0x356>
 8006e7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006e80:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <_dtoa_r+0x320>)
 8006e82:	2503      	movs	r5, #3
 8006e84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e88:	f7f9 fc4c 	bl	8000724 <__aeabi_ddiv>
 8006e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e90:	f006 060f 	and.w	r6, r6, #15
 8006e94:	4f1a      	ldr	r7, [pc, #104]	; (8006f00 <_dtoa_r+0x320>)
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	d14f      	bne.n	8006f3a <_dtoa_r+0x35a>
 8006e9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea2:	f7f9 fc3f 	bl	8000724 <__aeabi_ddiv>
 8006ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eaa:	e06e      	b.n	8006f8a <_dtoa_r+0x3aa>
 8006eac:	2301      	movs	r3, #1
 8006eae:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006eb2:	445b      	add	r3, fp
 8006eb4:	f103 0901 	add.w	r9, r3, #1
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	464b      	mov	r3, r9
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	bfb8      	it	lt
 8006ec0:	2301      	movlt	r3, #1
 8006ec2:	e7b0      	b.n	8006e26 <_dtoa_r+0x246>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e7a7      	b.n	8006e18 <_dtoa_r+0x238>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e7f0      	b.n	8006eae <_dtoa_r+0x2ce>
 8006ecc:	f3af 8000 	nop.w
 8006ed0:	636f4361 	.word	0x636f4361
 8006ed4:	3fd287a7 	.word	0x3fd287a7
 8006ed8:	8b60c8b3 	.word	0x8b60c8b3
 8006edc:	3fc68a28 	.word	0x3fc68a28
 8006ee0:	509f79fb 	.word	0x509f79fb
 8006ee4:	3fd34413 	.word	0x3fd34413
 8006ee8:	7ff00000 	.word	0x7ff00000
 8006eec:	0800cffc 	.word	0x0800cffc
 8006ef0:	0800cff3 	.word	0x0800cff3
 8006ef4:	0800ced1 	.word	0x0800ced1
 8006ef8:	3ff80000 	.word	0x3ff80000
 8006efc:	0800d028 	.word	0x0800d028
 8006f00:	0800d000 	.word	0x0800d000
 8006f04:	2601      	movs	r6, #1
 8006f06:	2300      	movs	r3, #0
 8006f08:	9609      	str	r6, [sp, #36]	; 0x24
 8006f0a:	931e      	str	r3, [sp, #120]	; 0x78
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f10:	2200      	movs	r2, #0
 8006f12:	9304      	str	r3, [sp, #16]
 8006f14:	4699      	mov	r9, r3
 8006f16:	2312      	movs	r3, #18
 8006f18:	921f      	str	r2, [sp, #124]	; 0x7c
 8006f1a:	e784      	b.n	8006e26 <_dtoa_r+0x246>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	e7f4      	b.n	8006f0c <_dtoa_r+0x32c>
 8006f22:	2301      	movs	r3, #1
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	4699      	mov	r9, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	e7f5      	b.n	8006f18 <_dtoa_r+0x338>
 8006f2c:	686a      	ldr	r2, [r5, #4]
 8006f2e:	0049      	lsls	r1, r1, #1
 8006f30:	3201      	adds	r2, #1
 8006f32:	606a      	str	r2, [r5, #4]
 8006f34:	e77b      	b.n	8006e2e <_dtoa_r+0x24e>
 8006f36:	2502      	movs	r5, #2
 8006f38:	e7ac      	b.n	8006e94 <_dtoa_r+0x2b4>
 8006f3a:	07f1      	lsls	r1, r6, #31
 8006f3c:	d508      	bpl.n	8006f50 <_dtoa_r+0x370>
 8006f3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f46:	f7f9 fac3 	bl	80004d0 <__aeabi_dmul>
 8006f4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f4e:	3501      	adds	r5, #1
 8006f50:	1076      	asrs	r6, r6, #1
 8006f52:	3708      	adds	r7, #8
 8006f54:	e79f      	b.n	8006e96 <_dtoa_r+0x2b6>
 8006f56:	f000 80a5 	beq.w	80070a4 <_dtoa_r+0x4c4>
 8006f5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006f5e:	f1cb 0600 	rsb	r6, fp, #0
 8006f62:	4ba2      	ldr	r3, [pc, #648]	; (80071ec <_dtoa_r+0x60c>)
 8006f64:	f006 020f 	and.w	r2, r6, #15
 8006f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 faae 	bl	80004d0 <__aeabi_dmul>
 8006f74:	2502      	movs	r5, #2
 8006f76:	2300      	movs	r3, #0
 8006f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f7c:	4f9c      	ldr	r7, [pc, #624]	; (80071f0 <_dtoa_r+0x610>)
 8006f7e:	1136      	asrs	r6, r6, #4
 8006f80:	2e00      	cmp	r6, #0
 8006f82:	f040 8084 	bne.w	800708e <_dtoa_r+0x4ae>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d18d      	bne.n	8006ea6 <_dtoa_r+0x2c6>
 8006f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 808b 	beq.w	80070a8 <_dtoa_r+0x4c8>
 8006f92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4b94      	ldr	r3, [pc, #592]	; (80071f4 <_dtoa_r+0x614>)
 8006fa2:	f7f9 fd07 	bl	80009b4 <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d07e      	beq.n	80070a8 <_dtoa_r+0x4c8>
 8006faa:	f1b9 0f00 	cmp.w	r9, #0
 8006fae:	d07b      	beq.n	80070a8 <_dtoa_r+0x4c8>
 8006fb0:	9b04      	ldr	r3, [sp, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dd37      	ble.n	8007026 <_dtoa_r+0x446>
 8006fb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4b8e      	ldr	r3, [pc, #568]	; (80071f8 <_dtoa_r+0x618>)
 8006fbe:	f7f9 fa87 	bl	80004d0 <__aeabi_dmul>
 8006fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc6:	9e04      	ldr	r6, [sp, #16]
 8006fc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006fcc:	3501      	adds	r5, #1
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7f9 fa18 	bl	8000404 <__aeabi_i2d>
 8006fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd8:	f7f9 fa7a 	bl	80004d0 <__aeabi_dmul>
 8006fdc:	4b87      	ldr	r3, [pc, #540]	; (80071fc <_dtoa_r+0x61c>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f7f9 f8c4 	bl	800016c <__adddf3>
 8006fe4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fea:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8006fee:	950b      	str	r5, [sp, #44]	; 0x2c
 8006ff0:	2e00      	cmp	r6, #0
 8006ff2:	d15c      	bne.n	80070ae <_dtoa_r+0x4ce>
 8006ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4b81      	ldr	r3, [pc, #516]	; (8007200 <_dtoa_r+0x620>)
 8006ffc:	f7f9 f8b4 	bl	8000168 <__aeabi_dsub>
 8007000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007002:	462b      	mov	r3, r5
 8007004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007008:	f7f9 fcf2 	bl	80009f0 <__aeabi_dcmpgt>
 800700c:	2800      	cmp	r0, #0
 800700e:	f040 82f7 	bne.w	8007600 <_dtoa_r+0xa20>
 8007012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007018:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800701c:	f7f9 fcca 	bl	80009b4 <__aeabi_dcmplt>
 8007020:	2800      	cmp	r0, #0
 8007022:	f040 82eb 	bne.w	80075fc <_dtoa_r+0xa1c>
 8007026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800702a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800702e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007030:	2b00      	cmp	r3, #0
 8007032:	f2c0 8150 	blt.w	80072d6 <_dtoa_r+0x6f6>
 8007036:	f1bb 0f0e 	cmp.w	fp, #14
 800703a:	f300 814c 	bgt.w	80072d6 <_dtoa_r+0x6f6>
 800703e:	4b6b      	ldr	r3, [pc, #428]	; (80071ec <_dtoa_r+0x60c>)
 8007040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800704c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800704e:	2b00      	cmp	r3, #0
 8007050:	f280 80da 	bge.w	8007208 <_dtoa_r+0x628>
 8007054:	f1b9 0f00 	cmp.w	r9, #0
 8007058:	f300 80d6 	bgt.w	8007208 <_dtoa_r+0x628>
 800705c:	f040 82cd 	bne.w	80075fa <_dtoa_r+0xa1a>
 8007060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007064:	2200      	movs	r2, #0
 8007066:	4b66      	ldr	r3, [pc, #408]	; (8007200 <_dtoa_r+0x620>)
 8007068:	f7f9 fa32 	bl	80004d0 <__aeabi_dmul>
 800706c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007070:	f7f9 fcb4 	bl	80009dc <__aeabi_dcmpge>
 8007074:	464e      	mov	r6, r9
 8007076:	464f      	mov	r7, r9
 8007078:	2800      	cmp	r0, #0
 800707a:	f040 82a4 	bne.w	80075c6 <_dtoa_r+0x9e6>
 800707e:	9b06      	ldr	r3, [sp, #24]
 8007080:	9a06      	ldr	r2, [sp, #24]
 8007082:	1c5d      	adds	r5, r3, #1
 8007084:	2331      	movs	r3, #49	; 0x31
 8007086:	f10b 0b01 	add.w	fp, fp, #1
 800708a:	7013      	strb	r3, [r2, #0]
 800708c:	e29f      	b.n	80075ce <_dtoa_r+0x9ee>
 800708e:	07f2      	lsls	r2, r6, #31
 8007090:	d505      	bpl.n	800709e <_dtoa_r+0x4be>
 8007092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007096:	f7f9 fa1b 	bl	80004d0 <__aeabi_dmul>
 800709a:	2301      	movs	r3, #1
 800709c:	3501      	adds	r5, #1
 800709e:	1076      	asrs	r6, r6, #1
 80070a0:	3708      	adds	r7, #8
 80070a2:	e76d      	b.n	8006f80 <_dtoa_r+0x3a0>
 80070a4:	2502      	movs	r5, #2
 80070a6:	e770      	b.n	8006f8a <_dtoa_r+0x3aa>
 80070a8:	465f      	mov	r7, fp
 80070aa:	464e      	mov	r6, r9
 80070ac:	e78f      	b.n	8006fce <_dtoa_r+0x3ee>
 80070ae:	9a06      	ldr	r2, [sp, #24]
 80070b0:	4b4e      	ldr	r3, [pc, #312]	; (80071ec <_dtoa_r+0x60c>)
 80070b2:	4432      	add	r2, r6
 80070b4:	9211      	str	r2, [sp, #68]	; 0x44
 80070b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b8:	1e71      	subs	r1, r6, #1
 80070ba:	2a00      	cmp	r2, #0
 80070bc:	d048      	beq.n	8007150 <_dtoa_r+0x570>
 80070be:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	2000      	movs	r0, #0
 80070c8:	494e      	ldr	r1, [pc, #312]	; (8007204 <_dtoa_r+0x624>)
 80070ca:	f7f9 fb2b 	bl	8000724 <__aeabi_ddiv>
 80070ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070d2:	f7f9 f849 	bl	8000168 <__aeabi_dsub>
 80070d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80070da:	9d06      	ldr	r5, [sp, #24]
 80070dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e0:	f7f9 fca6 	bl	8000a30 <__aeabi_d2iz>
 80070e4:	4606      	mov	r6, r0
 80070e6:	f7f9 f98d 	bl	8000404 <__aeabi_i2d>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f2:	f7f9 f839 	bl	8000168 <__aeabi_dsub>
 80070f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070fa:	3630      	adds	r6, #48	; 0x30
 80070fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007104:	f7f9 fc56 	bl	80009b4 <__aeabi_dcmplt>
 8007108:	2800      	cmp	r0, #0
 800710a:	d164      	bne.n	80071d6 <_dtoa_r+0x5f6>
 800710c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007110:	2000      	movs	r0, #0
 8007112:	4938      	ldr	r1, [pc, #224]	; (80071f4 <_dtoa_r+0x614>)
 8007114:	f7f9 f828 	bl	8000168 <__aeabi_dsub>
 8007118:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800711c:	f7f9 fc4a 	bl	80009b4 <__aeabi_dcmplt>
 8007120:	2800      	cmp	r0, #0
 8007122:	f040 80b9 	bne.w	8007298 <_dtoa_r+0x6b8>
 8007126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007128:	429d      	cmp	r5, r3
 800712a:	f43f af7c 	beq.w	8007026 <_dtoa_r+0x446>
 800712e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007132:	2200      	movs	r2, #0
 8007134:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <_dtoa_r+0x618>)
 8007136:	f7f9 f9cb 	bl	80004d0 <__aeabi_dmul>
 800713a:	2200      	movs	r2, #0
 800713c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007144:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <_dtoa_r+0x618>)
 8007146:	f7f9 f9c3 	bl	80004d0 <__aeabi_dmul>
 800714a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800714e:	e7c5      	b.n	80070dc <_dtoa_r+0x4fc>
 8007150:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007158:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800715c:	f7f9 f9b8 	bl	80004d0 <__aeabi_dmul>
 8007160:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007164:	9d06      	ldr	r5, [sp, #24]
 8007166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716a:	f7f9 fc61 	bl	8000a30 <__aeabi_d2iz>
 800716e:	4606      	mov	r6, r0
 8007170:	f7f9 f948 	bl	8000404 <__aeabi_i2d>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800717c:	f7f8 fff4 	bl	8000168 <__aeabi_dsub>
 8007180:	3630      	adds	r6, #48	; 0x30
 8007182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007184:	f805 6b01 	strb.w	r6, [r5], #1
 8007188:	42ab      	cmp	r3, r5
 800718a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	d124      	bne.n	80071de <_dtoa_r+0x5fe>
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <_dtoa_r+0x624>)
 8007196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800719a:	f7f8 ffe7 	bl	800016c <__adddf3>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a6:	f7f9 fc23 	bl	80009f0 <__aeabi_dcmpgt>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d174      	bne.n	8007298 <_dtoa_r+0x6b8>
 80071ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071b2:	2000      	movs	r0, #0
 80071b4:	4913      	ldr	r1, [pc, #76]	; (8007204 <_dtoa_r+0x624>)
 80071b6:	f7f8 ffd7 	bl	8000168 <__aeabi_dsub>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c2:	f7f9 fbf7 	bl	80009b4 <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f af2d 	beq.w	8007026 <_dtoa_r+0x446>
 80071cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071d0:	1e6a      	subs	r2, r5, #1
 80071d2:	2b30      	cmp	r3, #48	; 0x30
 80071d4:	d001      	beq.n	80071da <_dtoa_r+0x5fa>
 80071d6:	46bb      	mov	fp, r7
 80071d8:	e04d      	b.n	8007276 <_dtoa_r+0x696>
 80071da:	4615      	mov	r5, r2
 80071dc:	e7f6      	b.n	80071cc <_dtoa_r+0x5ec>
 80071de:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <_dtoa_r+0x618>)
 80071e0:	f7f9 f976 	bl	80004d0 <__aeabi_dmul>
 80071e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071e8:	e7bd      	b.n	8007166 <_dtoa_r+0x586>
 80071ea:	bf00      	nop
 80071ec:	0800d028 	.word	0x0800d028
 80071f0:	0800d000 	.word	0x0800d000
 80071f4:	3ff00000 	.word	0x3ff00000
 80071f8:	40240000 	.word	0x40240000
 80071fc:	401c0000 	.word	0x401c0000
 8007200:	40140000 	.word	0x40140000
 8007204:	3fe00000 	.word	0x3fe00000
 8007208:	9d06      	ldr	r5, [sp, #24]
 800720a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800720e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007212:	4630      	mov	r0, r6
 8007214:	4639      	mov	r1, r7
 8007216:	f7f9 fa85 	bl	8000724 <__aeabi_ddiv>
 800721a:	f7f9 fc09 	bl	8000a30 <__aeabi_d2iz>
 800721e:	4680      	mov	r8, r0
 8007220:	f7f9 f8f0 	bl	8000404 <__aeabi_i2d>
 8007224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007228:	f7f9 f952 	bl	80004d0 <__aeabi_dmul>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7f8 ff98 	bl	8000168 <__aeabi_dsub>
 8007238:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800723c:	f805 6b01 	strb.w	r6, [r5], #1
 8007240:	9e06      	ldr	r6, [sp, #24]
 8007242:	4602      	mov	r2, r0
 8007244:	1bae      	subs	r6, r5, r6
 8007246:	45b1      	cmp	r9, r6
 8007248:	460b      	mov	r3, r1
 800724a:	d137      	bne.n	80072bc <_dtoa_r+0x6dc>
 800724c:	f7f8 ff8e 	bl	800016c <__adddf3>
 8007250:	4606      	mov	r6, r0
 8007252:	460f      	mov	r7, r1
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800725c:	f7f9 fbaa 	bl	80009b4 <__aeabi_dcmplt>
 8007260:	b9c8      	cbnz	r0, 8007296 <_dtoa_r+0x6b6>
 8007262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007266:	4632      	mov	r2, r6
 8007268:	463b      	mov	r3, r7
 800726a:	f7f9 fb99 	bl	80009a0 <__aeabi_dcmpeq>
 800726e:	b110      	cbz	r0, 8007276 <_dtoa_r+0x696>
 8007270:	f018 0f01 	tst.w	r8, #1
 8007274:	d10f      	bne.n	8007296 <_dtoa_r+0x6b6>
 8007276:	4651      	mov	r1, sl
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fcf5 	bl	8007c68 <_Bfree>
 800727e:	2300      	movs	r3, #0
 8007280:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007282:	702b      	strb	r3, [r5, #0]
 8007284:	f10b 0301 	add.w	r3, fp, #1
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800728c:	2b00      	cmp	r3, #0
 800728e:	f43f acec 	beq.w	8006c6a <_dtoa_r+0x8a>
 8007292:	601d      	str	r5, [r3, #0]
 8007294:	e4e9      	b.n	8006c6a <_dtoa_r+0x8a>
 8007296:	465f      	mov	r7, fp
 8007298:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800729c:	1e6b      	subs	r3, r5, #1
 800729e:	2a39      	cmp	r2, #57	; 0x39
 80072a0:	d106      	bne.n	80072b0 <_dtoa_r+0x6d0>
 80072a2:	9a06      	ldr	r2, [sp, #24]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d107      	bne.n	80072b8 <_dtoa_r+0x6d8>
 80072a8:	2330      	movs	r3, #48	; 0x30
 80072aa:	7013      	strb	r3, [r2, #0]
 80072ac:	4613      	mov	r3, r2
 80072ae:	3701      	adds	r7, #1
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	3201      	adds	r2, #1
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	e78e      	b.n	80071d6 <_dtoa_r+0x5f6>
 80072b8:	461d      	mov	r5, r3
 80072ba:	e7ed      	b.n	8007298 <_dtoa_r+0x6b8>
 80072bc:	2200      	movs	r2, #0
 80072be:	4bb5      	ldr	r3, [pc, #724]	; (8007594 <_dtoa_r+0x9b4>)
 80072c0:	f7f9 f906 	bl	80004d0 <__aeabi_dmul>
 80072c4:	2200      	movs	r2, #0
 80072c6:	2300      	movs	r3, #0
 80072c8:	4606      	mov	r6, r0
 80072ca:	460f      	mov	r7, r1
 80072cc:	f7f9 fb68 	bl	80009a0 <__aeabi_dcmpeq>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d09c      	beq.n	800720e <_dtoa_r+0x62e>
 80072d4:	e7cf      	b.n	8007276 <_dtoa_r+0x696>
 80072d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d8:	2a00      	cmp	r2, #0
 80072da:	f000 8129 	beq.w	8007530 <_dtoa_r+0x950>
 80072de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072e0:	2a01      	cmp	r2, #1
 80072e2:	f300 810e 	bgt.w	8007502 <_dtoa_r+0x922>
 80072e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072e8:	2a00      	cmp	r2, #0
 80072ea:	f000 8106 	beq.w	80074fa <_dtoa_r+0x91a>
 80072ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072f2:	4645      	mov	r5, r8
 80072f4:	9e08      	ldr	r6, [sp, #32]
 80072f6:	9a07      	ldr	r2, [sp, #28]
 80072f8:	2101      	movs	r1, #1
 80072fa:	441a      	add	r2, r3
 80072fc:	4620      	mov	r0, r4
 80072fe:	4498      	add	r8, r3
 8007300:	9207      	str	r2, [sp, #28]
 8007302:	f000 fd51 	bl	8007da8 <__i2b>
 8007306:	4607      	mov	r7, r0
 8007308:	2d00      	cmp	r5, #0
 800730a:	dd0b      	ble.n	8007324 <_dtoa_r+0x744>
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd08      	ble.n	8007324 <_dtoa_r+0x744>
 8007312:	42ab      	cmp	r3, r5
 8007314:	bfa8      	it	ge
 8007316:	462b      	movge	r3, r5
 8007318:	9a07      	ldr	r2, [sp, #28]
 800731a:	eba8 0803 	sub.w	r8, r8, r3
 800731e:	1aed      	subs	r5, r5, r3
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	9307      	str	r3, [sp, #28]
 8007324:	9b08      	ldr	r3, [sp, #32]
 8007326:	b1fb      	cbz	r3, 8007368 <_dtoa_r+0x788>
 8007328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8104 	beq.w	8007538 <_dtoa_r+0x958>
 8007330:	2e00      	cmp	r6, #0
 8007332:	dd11      	ble.n	8007358 <_dtoa_r+0x778>
 8007334:	4639      	mov	r1, r7
 8007336:	4632      	mov	r2, r6
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fdcb 	bl	8007ed4 <__pow5mult>
 800733e:	4652      	mov	r2, sl
 8007340:	4601      	mov	r1, r0
 8007342:	4607      	mov	r7, r0
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fd38 	bl	8007dba <__multiply>
 800734a:	4651      	mov	r1, sl
 800734c:	900a      	str	r0, [sp, #40]	; 0x28
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fc8a 	bl	8007c68 <_Bfree>
 8007354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007356:	469a      	mov	sl, r3
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	1b9a      	subs	r2, r3, r6
 800735c:	d004      	beq.n	8007368 <_dtoa_r+0x788>
 800735e:	4651      	mov	r1, sl
 8007360:	4620      	mov	r0, r4
 8007362:	f000 fdb7 	bl	8007ed4 <__pow5mult>
 8007366:	4682      	mov	sl, r0
 8007368:	2101      	movs	r1, #1
 800736a:	4620      	mov	r0, r4
 800736c:	f000 fd1c 	bl	8007da8 <__i2b>
 8007370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007372:	4606      	mov	r6, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	f340 80e1 	ble.w	800753c <_dtoa_r+0x95c>
 800737a:	461a      	mov	r2, r3
 800737c:	4601      	mov	r1, r0
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fda8 	bl	8007ed4 <__pow5mult>
 8007384:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007386:	4606      	mov	r6, r0
 8007388:	2b01      	cmp	r3, #1
 800738a:	f340 80da 	ble.w	8007542 <_dtoa_r+0x962>
 800738e:	2300      	movs	r3, #0
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	6933      	ldr	r3, [r6, #16]
 8007394:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007398:	6918      	ldr	r0, [r3, #16]
 800739a:	f000 fcb7 	bl	8007d0c <__hi0bits>
 800739e:	f1c0 0020 	rsb	r0, r0, #32
 80073a2:	9b07      	ldr	r3, [sp, #28]
 80073a4:	4418      	add	r0, r3
 80073a6:	f010 001f 	ands.w	r0, r0, #31
 80073aa:	f000 80f0 	beq.w	800758e <_dtoa_r+0x9ae>
 80073ae:	f1c0 0320 	rsb	r3, r0, #32
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	f340 80e2 	ble.w	800757c <_dtoa_r+0x99c>
 80073b8:	9b07      	ldr	r3, [sp, #28]
 80073ba:	f1c0 001c 	rsb	r0, r0, #28
 80073be:	4480      	add	r8, r0
 80073c0:	4405      	add	r5, r0
 80073c2:	4403      	add	r3, r0
 80073c4:	9307      	str	r3, [sp, #28]
 80073c6:	f1b8 0f00 	cmp.w	r8, #0
 80073ca:	dd05      	ble.n	80073d8 <_dtoa_r+0x7f8>
 80073cc:	4651      	mov	r1, sl
 80073ce:	4642      	mov	r2, r8
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 fdcd 	bl	8007f70 <__lshift>
 80073d6:	4682      	mov	sl, r0
 80073d8:	9b07      	ldr	r3, [sp, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	dd05      	ble.n	80073ea <_dtoa_r+0x80a>
 80073de:	4631      	mov	r1, r6
 80073e0:	461a      	mov	r2, r3
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 fdc4 	bl	8007f70 <__lshift>
 80073e8:	4606      	mov	r6, r0
 80073ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80d3 	beq.w	8007598 <_dtoa_r+0x9b8>
 80073f2:	4631      	mov	r1, r6
 80073f4:	4650      	mov	r0, sl
 80073f6:	f000 fe0c 	bl	8008012 <__mcmp>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f280 80cc 	bge.w	8007598 <_dtoa_r+0x9b8>
 8007400:	2300      	movs	r3, #0
 8007402:	4651      	mov	r1, sl
 8007404:	220a      	movs	r2, #10
 8007406:	4620      	mov	r0, r4
 8007408:	f000 fc45 	bl	8007c96 <__multadd>
 800740c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007412:	4682      	mov	sl, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 81a9 	beq.w	800776c <_dtoa_r+0xb8c>
 800741a:	2300      	movs	r3, #0
 800741c:	4639      	mov	r1, r7
 800741e:	220a      	movs	r2, #10
 8007420:	4620      	mov	r0, r4
 8007422:	f000 fc38 	bl	8007c96 <__multadd>
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	4607      	mov	r7, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	dc03      	bgt.n	8007436 <_dtoa_r+0x856>
 800742e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007430:	2b02      	cmp	r3, #2
 8007432:	f300 80b9 	bgt.w	80075a8 <_dtoa_r+0x9c8>
 8007436:	2d00      	cmp	r5, #0
 8007438:	dd05      	ble.n	8007446 <_dtoa_r+0x866>
 800743a:	4639      	mov	r1, r7
 800743c:	462a      	mov	r2, r5
 800743e:	4620      	mov	r0, r4
 8007440:	f000 fd96 	bl	8007f70 <__lshift>
 8007444:	4607      	mov	r7, r0
 8007446:	9b08      	ldr	r3, [sp, #32]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8110 	beq.w	800766e <_dtoa_r+0xa8e>
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fbd5 	bl	8007c00 <_Balloc>
 8007456:	4605      	mov	r5, r0
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	f107 010c 	add.w	r1, r7, #12
 800745e:	3202      	adds	r2, #2
 8007460:	0092      	lsls	r2, r2, #2
 8007462:	300c      	adds	r0, #12
 8007464:	f7fe fb08 	bl	8005a78 <memcpy>
 8007468:	2201      	movs	r2, #1
 800746a:	4629      	mov	r1, r5
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fd7f 	bl	8007f70 <__lshift>
 8007472:	9707      	str	r7, [sp, #28]
 8007474:	4607      	mov	r7, r0
 8007476:	9b02      	ldr	r3, [sp, #8]
 8007478:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	4631      	mov	r1, r6
 8007484:	4650      	mov	r0, sl
 8007486:	f7ff fb1e 	bl	8006ac6 <quorem>
 800748a:	9907      	ldr	r1, [sp, #28]
 800748c:	4605      	mov	r5, r0
 800748e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007492:	4650      	mov	r0, sl
 8007494:	f000 fdbd 	bl	8008012 <__mcmp>
 8007498:	463a      	mov	r2, r7
 800749a:	9002      	str	r0, [sp, #8]
 800749c:	4631      	mov	r1, r6
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 fdd1 	bl	8008046 <__mdiff>
 80074a4:	68c3      	ldr	r3, [r0, #12]
 80074a6:	4602      	mov	r2, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f040 80e2 	bne.w	8007672 <_dtoa_r+0xa92>
 80074ae:	4601      	mov	r1, r0
 80074b0:	9009      	str	r0, [sp, #36]	; 0x24
 80074b2:	4650      	mov	r0, sl
 80074b4:	f000 fdad 	bl	8008012 <__mcmp>
 80074b8:	4603      	mov	r3, r0
 80074ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074bc:	4611      	mov	r1, r2
 80074be:	4620      	mov	r0, r4
 80074c0:	9309      	str	r3, [sp, #36]	; 0x24
 80074c2:	f000 fbd1 	bl	8007c68 <_Bfree>
 80074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f040 80d4 	bne.w	8007676 <_dtoa_r+0xa96>
 80074ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	f040 80d0 	bne.w	8007676 <_dtoa_r+0xa96>
 80074d6:	9a08      	ldr	r2, [sp, #32]
 80074d8:	2a00      	cmp	r2, #0
 80074da:	f040 80cc 	bne.w	8007676 <_dtoa_r+0xa96>
 80074de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074e2:	f000 80e8 	beq.w	80076b6 <_dtoa_r+0xad6>
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dd01      	ble.n	80074f0 <_dtoa_r+0x910>
 80074ec:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80074f0:	f108 0501 	add.w	r5, r8, #1
 80074f4:	f888 9000 	strb.w	r9, [r8]
 80074f8:	e06b      	b.n	80075d2 <_dtoa_r+0x9f2>
 80074fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074fc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007500:	e6f7      	b.n	80072f2 <_dtoa_r+0x712>
 8007502:	9b08      	ldr	r3, [sp, #32]
 8007504:	f109 36ff 	add.w	r6, r9, #4294967295
 8007508:	42b3      	cmp	r3, r6
 800750a:	bfb7      	itett	lt
 800750c:	9b08      	ldrlt	r3, [sp, #32]
 800750e:	1b9e      	subge	r6, r3, r6
 8007510:	1af2      	sublt	r2, r6, r3
 8007512:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007514:	bfbf      	itttt	lt
 8007516:	9608      	strlt	r6, [sp, #32]
 8007518:	189b      	addlt	r3, r3, r2
 800751a:	930c      	strlt	r3, [sp, #48]	; 0x30
 800751c:	2600      	movlt	r6, #0
 800751e:	f1b9 0f00 	cmp.w	r9, #0
 8007522:	bfb9      	ittee	lt
 8007524:	eba8 0509 	sublt.w	r5, r8, r9
 8007528:	2300      	movlt	r3, #0
 800752a:	4645      	movge	r5, r8
 800752c:	464b      	movge	r3, r9
 800752e:	e6e2      	b.n	80072f6 <_dtoa_r+0x716>
 8007530:	9e08      	ldr	r6, [sp, #32]
 8007532:	4645      	mov	r5, r8
 8007534:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007536:	e6e7      	b.n	8007308 <_dtoa_r+0x728>
 8007538:	9a08      	ldr	r2, [sp, #32]
 800753a:	e710      	b.n	800735e <_dtoa_r+0x77e>
 800753c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800753e:	2b01      	cmp	r3, #1
 8007540:	dc18      	bgt.n	8007574 <_dtoa_r+0x994>
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	b9b3      	cbnz	r3, 8007574 <_dtoa_r+0x994>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800754c:	b9a3      	cbnz	r3, 8007578 <_dtoa_r+0x998>
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007554:	0d1b      	lsrs	r3, r3, #20
 8007556:	051b      	lsls	r3, r3, #20
 8007558:	b12b      	cbz	r3, 8007566 <_dtoa_r+0x986>
 800755a:	9b07      	ldr	r3, [sp, #28]
 800755c:	f108 0801 	add.w	r8, r8, #1
 8007560:	3301      	adds	r3, #1
 8007562:	9307      	str	r3, [sp, #28]
 8007564:	2301      	movs	r3, #1
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	f47f af11 	bne.w	8007392 <_dtoa_r+0x7b2>
 8007570:	2001      	movs	r0, #1
 8007572:	e716      	b.n	80073a2 <_dtoa_r+0x7c2>
 8007574:	2300      	movs	r3, #0
 8007576:	e7f6      	b.n	8007566 <_dtoa_r+0x986>
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	e7f4      	b.n	8007566 <_dtoa_r+0x986>
 800757c:	f43f af23 	beq.w	80073c6 <_dtoa_r+0x7e6>
 8007580:	9a07      	ldr	r2, [sp, #28]
 8007582:	331c      	adds	r3, #28
 8007584:	441a      	add	r2, r3
 8007586:	4498      	add	r8, r3
 8007588:	441d      	add	r5, r3
 800758a:	4613      	mov	r3, r2
 800758c:	e71a      	b.n	80073c4 <_dtoa_r+0x7e4>
 800758e:	4603      	mov	r3, r0
 8007590:	e7f6      	b.n	8007580 <_dtoa_r+0x9a0>
 8007592:	bf00      	nop
 8007594:	40240000 	.word	0x40240000
 8007598:	f1b9 0f00 	cmp.w	r9, #0
 800759c:	dc33      	bgt.n	8007606 <_dtoa_r+0xa26>
 800759e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	dd30      	ble.n	8007606 <_dtoa_r+0xa26>
 80075a4:	f8cd 9010 	str.w	r9, [sp, #16]
 80075a8:	9b04      	ldr	r3, [sp, #16]
 80075aa:	b963      	cbnz	r3, 80075c6 <_dtoa_r+0x9e6>
 80075ac:	4631      	mov	r1, r6
 80075ae:	2205      	movs	r2, #5
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 fb70 	bl	8007c96 <__multadd>
 80075b6:	4601      	mov	r1, r0
 80075b8:	4606      	mov	r6, r0
 80075ba:	4650      	mov	r0, sl
 80075bc:	f000 fd29 	bl	8008012 <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f73f ad5c 	bgt.w	800707e <_dtoa_r+0x49e>
 80075c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075c8:	9d06      	ldr	r5, [sp, #24]
 80075ca:	ea6f 0b03 	mvn.w	fp, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	4631      	mov	r1, r6
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fb47 	bl	8007c68 <_Bfree>
 80075da:	2f00      	cmp	r7, #0
 80075dc:	f43f ae4b 	beq.w	8007276 <_dtoa_r+0x696>
 80075e0:	9b07      	ldr	r3, [sp, #28]
 80075e2:	b12b      	cbz	r3, 80075f0 <_dtoa_r+0xa10>
 80075e4:	42bb      	cmp	r3, r7
 80075e6:	d003      	beq.n	80075f0 <_dtoa_r+0xa10>
 80075e8:	4619      	mov	r1, r3
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 fb3c 	bl	8007c68 <_Bfree>
 80075f0:	4639      	mov	r1, r7
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fb38 	bl	8007c68 <_Bfree>
 80075f8:	e63d      	b.n	8007276 <_dtoa_r+0x696>
 80075fa:	2600      	movs	r6, #0
 80075fc:	4637      	mov	r7, r6
 80075fe:	e7e2      	b.n	80075c6 <_dtoa_r+0x9e6>
 8007600:	46bb      	mov	fp, r7
 8007602:	4637      	mov	r7, r6
 8007604:	e53b      	b.n	800707e <_dtoa_r+0x49e>
 8007606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007608:	f8cd 9010 	str.w	r9, [sp, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f47f af12 	bne.w	8007436 <_dtoa_r+0x856>
 8007612:	9d06      	ldr	r5, [sp, #24]
 8007614:	4631      	mov	r1, r6
 8007616:	4650      	mov	r0, sl
 8007618:	f7ff fa55 	bl	8006ac6 <quorem>
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007622:	f805 9b01 	strb.w	r9, [r5], #1
 8007626:	9a04      	ldr	r2, [sp, #16]
 8007628:	1aeb      	subs	r3, r5, r3
 800762a:	429a      	cmp	r2, r3
 800762c:	f300 8081 	bgt.w	8007732 <_dtoa_r+0xb52>
 8007630:	9b06      	ldr	r3, [sp, #24]
 8007632:	2a01      	cmp	r2, #1
 8007634:	bfac      	ite	ge
 8007636:	189b      	addge	r3, r3, r2
 8007638:	3301      	addlt	r3, #1
 800763a:	4698      	mov	r8, r3
 800763c:	2300      	movs	r3, #0
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	4651      	mov	r1, sl
 8007642:	2201      	movs	r2, #1
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fc93 	bl	8007f70 <__lshift>
 800764a:	4631      	mov	r1, r6
 800764c:	4682      	mov	sl, r0
 800764e:	f000 fce0 	bl	8008012 <__mcmp>
 8007652:	2800      	cmp	r0, #0
 8007654:	dc34      	bgt.n	80076c0 <_dtoa_r+0xae0>
 8007656:	d102      	bne.n	800765e <_dtoa_r+0xa7e>
 8007658:	f019 0f01 	tst.w	r9, #1
 800765c:	d130      	bne.n	80076c0 <_dtoa_r+0xae0>
 800765e:	4645      	mov	r5, r8
 8007660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007664:	1e6a      	subs	r2, r5, #1
 8007666:	2b30      	cmp	r3, #48	; 0x30
 8007668:	d1b3      	bne.n	80075d2 <_dtoa_r+0x9f2>
 800766a:	4615      	mov	r5, r2
 800766c:	e7f8      	b.n	8007660 <_dtoa_r+0xa80>
 800766e:	4638      	mov	r0, r7
 8007670:	e6ff      	b.n	8007472 <_dtoa_r+0x892>
 8007672:	2301      	movs	r3, #1
 8007674:	e722      	b.n	80074bc <_dtoa_r+0x8dc>
 8007676:	9a02      	ldr	r2, [sp, #8]
 8007678:	2a00      	cmp	r2, #0
 800767a:	db04      	blt.n	8007686 <_dtoa_r+0xaa6>
 800767c:	d128      	bne.n	80076d0 <_dtoa_r+0xaf0>
 800767e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007680:	bb32      	cbnz	r2, 80076d0 <_dtoa_r+0xaf0>
 8007682:	9a08      	ldr	r2, [sp, #32]
 8007684:	bb22      	cbnz	r2, 80076d0 <_dtoa_r+0xaf0>
 8007686:	2b00      	cmp	r3, #0
 8007688:	f77f af32 	ble.w	80074f0 <_dtoa_r+0x910>
 800768c:	4651      	mov	r1, sl
 800768e:	2201      	movs	r2, #1
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fc6d 	bl	8007f70 <__lshift>
 8007696:	4631      	mov	r1, r6
 8007698:	4682      	mov	sl, r0
 800769a:	f000 fcba 	bl	8008012 <__mcmp>
 800769e:	2800      	cmp	r0, #0
 80076a0:	dc05      	bgt.n	80076ae <_dtoa_r+0xace>
 80076a2:	f47f af25 	bne.w	80074f0 <_dtoa_r+0x910>
 80076a6:	f019 0f01 	tst.w	r9, #1
 80076aa:	f43f af21 	beq.w	80074f0 <_dtoa_r+0x910>
 80076ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076b2:	f47f af1b 	bne.w	80074ec <_dtoa_r+0x90c>
 80076b6:	2339      	movs	r3, #57	; 0x39
 80076b8:	f108 0801 	add.w	r8, r8, #1
 80076bc:	f808 3c01 	strb.w	r3, [r8, #-1]
 80076c0:	4645      	mov	r5, r8
 80076c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076c6:	1e6a      	subs	r2, r5, #1
 80076c8:	2b39      	cmp	r3, #57	; 0x39
 80076ca:	d03a      	beq.n	8007742 <_dtoa_r+0xb62>
 80076cc:	3301      	adds	r3, #1
 80076ce:	e03f      	b.n	8007750 <_dtoa_r+0xb70>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f108 0501 	add.w	r5, r8, #1
 80076d6:	dd05      	ble.n	80076e4 <_dtoa_r+0xb04>
 80076d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076dc:	d0eb      	beq.n	80076b6 <_dtoa_r+0xad6>
 80076de:	f109 0901 	add.w	r9, r9, #1
 80076e2:	e707      	b.n	80074f4 <_dtoa_r+0x914>
 80076e4:	9b06      	ldr	r3, [sp, #24]
 80076e6:	9a04      	ldr	r2, [sp, #16]
 80076e8:	1aeb      	subs	r3, r5, r3
 80076ea:	4293      	cmp	r3, r2
 80076ec:	46a8      	mov	r8, r5
 80076ee:	f805 9c01 	strb.w	r9, [r5, #-1]
 80076f2:	d0a5      	beq.n	8007640 <_dtoa_r+0xa60>
 80076f4:	4651      	mov	r1, sl
 80076f6:	2300      	movs	r3, #0
 80076f8:	220a      	movs	r2, #10
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 facb 	bl	8007c96 <__multadd>
 8007700:	9b07      	ldr	r3, [sp, #28]
 8007702:	4682      	mov	sl, r0
 8007704:	42bb      	cmp	r3, r7
 8007706:	f04f 020a 	mov.w	r2, #10
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	9907      	ldr	r1, [sp, #28]
 8007710:	4620      	mov	r0, r4
 8007712:	d104      	bne.n	800771e <_dtoa_r+0xb3e>
 8007714:	f000 fabf 	bl	8007c96 <__multadd>
 8007718:	9007      	str	r0, [sp, #28]
 800771a:	4607      	mov	r7, r0
 800771c:	e6b1      	b.n	8007482 <_dtoa_r+0x8a2>
 800771e:	f000 faba 	bl	8007c96 <__multadd>
 8007722:	2300      	movs	r3, #0
 8007724:	9007      	str	r0, [sp, #28]
 8007726:	220a      	movs	r2, #10
 8007728:	4639      	mov	r1, r7
 800772a:	4620      	mov	r0, r4
 800772c:	f000 fab3 	bl	8007c96 <__multadd>
 8007730:	e7f3      	b.n	800771a <_dtoa_r+0xb3a>
 8007732:	4651      	mov	r1, sl
 8007734:	2300      	movs	r3, #0
 8007736:	220a      	movs	r2, #10
 8007738:	4620      	mov	r0, r4
 800773a:	f000 faac 	bl	8007c96 <__multadd>
 800773e:	4682      	mov	sl, r0
 8007740:	e768      	b.n	8007614 <_dtoa_r+0xa34>
 8007742:	9b06      	ldr	r3, [sp, #24]
 8007744:	4293      	cmp	r3, r2
 8007746:	d105      	bne.n	8007754 <_dtoa_r+0xb74>
 8007748:	2331      	movs	r3, #49	; 0x31
 800774a:	9a06      	ldr	r2, [sp, #24]
 800774c:	f10b 0b01 	add.w	fp, fp, #1
 8007750:	7013      	strb	r3, [r2, #0]
 8007752:	e73e      	b.n	80075d2 <_dtoa_r+0x9f2>
 8007754:	4615      	mov	r5, r2
 8007756:	e7b4      	b.n	80076c2 <_dtoa_r+0xae2>
 8007758:	4b09      	ldr	r3, [pc, #36]	; (8007780 <_dtoa_r+0xba0>)
 800775a:	f7ff baa3 	b.w	8006ca4 <_dtoa_r+0xc4>
 800775e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007760:	2b00      	cmp	r3, #0
 8007762:	f47f aa7d 	bne.w	8006c60 <_dtoa_r+0x80>
 8007766:	4b07      	ldr	r3, [pc, #28]	; (8007784 <_dtoa_r+0xba4>)
 8007768:	f7ff ba9c 	b.w	8006ca4 <_dtoa_r+0xc4>
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f73f af4f 	bgt.w	8007612 <_dtoa_r+0xa32>
 8007774:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007776:	2b02      	cmp	r3, #2
 8007778:	f77f af4b 	ble.w	8007612 <_dtoa_r+0xa32>
 800777c:	e714      	b.n	80075a8 <_dtoa_r+0x9c8>
 800777e:	bf00      	nop
 8007780:	0800ced0 	.word	0x0800ced0
 8007784:	0800cff3 	.word	0x0800cff3

08007788 <_localeconv_r>:
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <_localeconv_r+0x14>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a18      	ldr	r0, [r3, #32]
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <_localeconv_r+0x18>)
 8007790:	2800      	cmp	r0, #0
 8007792:	bf08      	it	eq
 8007794:	4618      	moveq	r0, r3
 8007796:	30f0      	adds	r0, #240	; 0xf0
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	20000194 	.word	0x20000194
 80077a0:	20000028 	.word	0x20000028

080077a4 <malloc>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <malloc+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f000 b803 	b.w	80077b4 <_malloc_r>
 80077ae:	bf00      	nop
 80077b0:	20000194 	.word	0x20000194

080077b4 <_malloc_r>:
 80077b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	f101 040b 	add.w	r4, r1, #11
 80077bc:	2c16      	cmp	r4, #22
 80077be:	4681      	mov	r9, r0
 80077c0:	d907      	bls.n	80077d2 <_malloc_r+0x1e>
 80077c2:	f034 0407 	bics.w	r4, r4, #7
 80077c6:	d505      	bpl.n	80077d4 <_malloc_r+0x20>
 80077c8:	230c      	movs	r3, #12
 80077ca:	f8c9 3000 	str.w	r3, [r9]
 80077ce:	2600      	movs	r6, #0
 80077d0:	e131      	b.n	8007a36 <_malloc_r+0x282>
 80077d2:	2410      	movs	r4, #16
 80077d4:	428c      	cmp	r4, r1
 80077d6:	d3f7      	bcc.n	80077c8 <_malloc_r+0x14>
 80077d8:	4648      	mov	r0, r9
 80077da:	f000 fa05 	bl	8007be8 <__malloc_lock>
 80077de:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80077e2:	4d9b      	ldr	r5, [pc, #620]	; (8007a50 <_malloc_r+0x29c>)
 80077e4:	d236      	bcs.n	8007854 <_malloc_r+0xa0>
 80077e6:	f104 0208 	add.w	r2, r4, #8
 80077ea:	442a      	add	r2, r5
 80077ec:	6856      	ldr	r6, [r2, #4]
 80077ee:	f1a2 0108 	sub.w	r1, r2, #8
 80077f2:	428e      	cmp	r6, r1
 80077f4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80077f8:	d102      	bne.n	8007800 <_malloc_r+0x4c>
 80077fa:	68d6      	ldr	r6, [r2, #12]
 80077fc:	42b2      	cmp	r2, r6
 80077fe:	d010      	beq.n	8007822 <_malloc_r+0x6e>
 8007800:	6873      	ldr	r3, [r6, #4]
 8007802:	68f2      	ldr	r2, [r6, #12]
 8007804:	68b1      	ldr	r1, [r6, #8]
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	60ca      	str	r2, [r1, #12]
 800780c:	4433      	add	r3, r6
 800780e:	6091      	str	r1, [r2, #8]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	605a      	str	r2, [r3, #4]
 8007818:	4648      	mov	r0, r9
 800781a:	f000 f9eb 	bl	8007bf4 <__malloc_unlock>
 800781e:	3608      	adds	r6, #8
 8007820:	e109      	b.n	8007a36 <_malloc_r+0x282>
 8007822:	3302      	adds	r3, #2
 8007824:	4a8b      	ldr	r2, [pc, #556]	; (8007a54 <_malloc_r+0x2a0>)
 8007826:	692e      	ldr	r6, [r5, #16]
 8007828:	4611      	mov	r1, r2
 800782a:	4296      	cmp	r6, r2
 800782c:	d06d      	beq.n	800790a <_malloc_r+0x156>
 800782e:	6870      	ldr	r0, [r6, #4]
 8007830:	f020 0003 	bic.w	r0, r0, #3
 8007834:	1b07      	subs	r7, r0, r4
 8007836:	2f0f      	cmp	r7, #15
 8007838:	dd47      	ble.n	80078ca <_malloc_r+0x116>
 800783a:	1933      	adds	r3, r6, r4
 800783c:	f044 0401 	orr.w	r4, r4, #1
 8007840:	6074      	str	r4, [r6, #4]
 8007842:	616b      	str	r3, [r5, #20]
 8007844:	612b      	str	r3, [r5, #16]
 8007846:	60da      	str	r2, [r3, #12]
 8007848:	609a      	str	r2, [r3, #8]
 800784a:	f047 0201 	orr.w	r2, r7, #1
 800784e:	605a      	str	r2, [r3, #4]
 8007850:	5037      	str	r7, [r6, r0]
 8007852:	e7e1      	b.n	8007818 <_malloc_r+0x64>
 8007854:	0a63      	lsrs	r3, r4, #9
 8007856:	d02a      	beq.n	80078ae <_malloc_r+0xfa>
 8007858:	2b04      	cmp	r3, #4
 800785a:	d812      	bhi.n	8007882 <_malloc_r+0xce>
 800785c:	09a3      	lsrs	r3, r4, #6
 800785e:	3338      	adds	r3, #56	; 0x38
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8007866:	6856      	ldr	r6, [r2, #4]
 8007868:	f1a2 0008 	sub.w	r0, r2, #8
 800786c:	4286      	cmp	r6, r0
 800786e:	d006      	beq.n	800787e <_malloc_r+0xca>
 8007870:	6872      	ldr	r2, [r6, #4]
 8007872:	f022 0203 	bic.w	r2, r2, #3
 8007876:	1b11      	subs	r1, r2, r4
 8007878:	290f      	cmp	r1, #15
 800787a:	dd1c      	ble.n	80078b6 <_malloc_r+0x102>
 800787c:	3b01      	subs	r3, #1
 800787e:	3301      	adds	r3, #1
 8007880:	e7d0      	b.n	8007824 <_malloc_r+0x70>
 8007882:	2b14      	cmp	r3, #20
 8007884:	d801      	bhi.n	800788a <_malloc_r+0xd6>
 8007886:	335b      	adds	r3, #91	; 0x5b
 8007888:	e7ea      	b.n	8007860 <_malloc_r+0xac>
 800788a:	2b54      	cmp	r3, #84	; 0x54
 800788c:	d802      	bhi.n	8007894 <_malloc_r+0xe0>
 800788e:	0b23      	lsrs	r3, r4, #12
 8007890:	336e      	adds	r3, #110	; 0x6e
 8007892:	e7e5      	b.n	8007860 <_malloc_r+0xac>
 8007894:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007898:	d802      	bhi.n	80078a0 <_malloc_r+0xec>
 800789a:	0be3      	lsrs	r3, r4, #15
 800789c:	3377      	adds	r3, #119	; 0x77
 800789e:	e7df      	b.n	8007860 <_malloc_r+0xac>
 80078a0:	f240 5254 	movw	r2, #1364	; 0x554
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d804      	bhi.n	80078b2 <_malloc_r+0xfe>
 80078a8:	0ca3      	lsrs	r3, r4, #18
 80078aa:	337c      	adds	r3, #124	; 0x7c
 80078ac:	e7d8      	b.n	8007860 <_malloc_r+0xac>
 80078ae:	233f      	movs	r3, #63	; 0x3f
 80078b0:	e7d6      	b.n	8007860 <_malloc_r+0xac>
 80078b2:	237e      	movs	r3, #126	; 0x7e
 80078b4:	e7d4      	b.n	8007860 <_malloc_r+0xac>
 80078b6:	2900      	cmp	r1, #0
 80078b8:	68f1      	ldr	r1, [r6, #12]
 80078ba:	db04      	blt.n	80078c6 <_malloc_r+0x112>
 80078bc:	68b3      	ldr	r3, [r6, #8]
 80078be:	60d9      	str	r1, [r3, #12]
 80078c0:	608b      	str	r3, [r1, #8]
 80078c2:	18b3      	adds	r3, r6, r2
 80078c4:	e7a4      	b.n	8007810 <_malloc_r+0x5c>
 80078c6:	460e      	mov	r6, r1
 80078c8:	e7d0      	b.n	800786c <_malloc_r+0xb8>
 80078ca:	2f00      	cmp	r7, #0
 80078cc:	616a      	str	r2, [r5, #20]
 80078ce:	612a      	str	r2, [r5, #16]
 80078d0:	db05      	blt.n	80078de <_malloc_r+0x12a>
 80078d2:	4430      	add	r0, r6
 80078d4:	6843      	ldr	r3, [r0, #4]
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	6043      	str	r3, [r0, #4]
 80078dc:	e79c      	b.n	8007818 <_malloc_r+0x64>
 80078de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80078e2:	d244      	bcs.n	800796e <_malloc_r+0x1ba>
 80078e4:	2201      	movs	r2, #1
 80078e6:	08c0      	lsrs	r0, r0, #3
 80078e8:	1087      	asrs	r7, r0, #2
 80078ea:	fa02 f707 	lsl.w	r7, r2, r7
 80078ee:	686a      	ldr	r2, [r5, #4]
 80078f0:	3001      	adds	r0, #1
 80078f2:	433a      	orrs	r2, r7
 80078f4:	606a      	str	r2, [r5, #4]
 80078f6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80078fa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80078fe:	3a08      	subs	r2, #8
 8007900:	60f2      	str	r2, [r6, #12]
 8007902:	60b7      	str	r7, [r6, #8]
 8007904:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8007908:	60fe      	str	r6, [r7, #12]
 800790a:	2001      	movs	r0, #1
 800790c:	109a      	asrs	r2, r3, #2
 800790e:	fa00 f202 	lsl.w	r2, r0, r2
 8007912:	6868      	ldr	r0, [r5, #4]
 8007914:	4282      	cmp	r2, r0
 8007916:	f200 809f 	bhi.w	8007a58 <_malloc_r+0x2a4>
 800791a:	4202      	tst	r2, r0
 800791c:	d106      	bne.n	800792c <_malloc_r+0x178>
 800791e:	f023 0303 	bic.w	r3, r3, #3
 8007922:	0052      	lsls	r2, r2, #1
 8007924:	4202      	tst	r2, r0
 8007926:	f103 0304 	add.w	r3, r3, #4
 800792a:	d0fa      	beq.n	8007922 <_malloc_r+0x16e>
 800792c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8007930:	46e0      	mov	r8, ip
 8007932:	469e      	mov	lr, r3
 8007934:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8007938:	4546      	cmp	r6, r8
 800793a:	d153      	bne.n	80079e4 <_malloc_r+0x230>
 800793c:	f10e 0e01 	add.w	lr, lr, #1
 8007940:	f01e 0f03 	tst.w	lr, #3
 8007944:	f108 0808 	add.w	r8, r8, #8
 8007948:	d1f4      	bne.n	8007934 <_malloc_r+0x180>
 800794a:	0798      	lsls	r0, r3, #30
 800794c:	d179      	bne.n	8007a42 <_malloc_r+0x28e>
 800794e:	686b      	ldr	r3, [r5, #4]
 8007950:	ea23 0302 	bic.w	r3, r3, r2
 8007954:	606b      	str	r3, [r5, #4]
 8007956:	6868      	ldr	r0, [r5, #4]
 8007958:	0052      	lsls	r2, r2, #1
 800795a:	4282      	cmp	r2, r0
 800795c:	d87c      	bhi.n	8007a58 <_malloc_r+0x2a4>
 800795e:	2a00      	cmp	r2, #0
 8007960:	d07a      	beq.n	8007a58 <_malloc_r+0x2a4>
 8007962:	4673      	mov	r3, lr
 8007964:	4202      	tst	r2, r0
 8007966:	d1e1      	bne.n	800792c <_malloc_r+0x178>
 8007968:	3304      	adds	r3, #4
 800796a:	0052      	lsls	r2, r2, #1
 800796c:	e7fa      	b.n	8007964 <_malloc_r+0x1b0>
 800796e:	0a42      	lsrs	r2, r0, #9
 8007970:	2a04      	cmp	r2, #4
 8007972:	d815      	bhi.n	80079a0 <_malloc_r+0x1ec>
 8007974:	0982      	lsrs	r2, r0, #6
 8007976:	3238      	adds	r2, #56	; 0x38
 8007978:	1c57      	adds	r7, r2, #1
 800797a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800797e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8007982:	45be      	cmp	lr, r7
 8007984:	d126      	bne.n	80079d4 <_malloc_r+0x220>
 8007986:	2001      	movs	r0, #1
 8007988:	1092      	asrs	r2, r2, #2
 800798a:	fa00 f202 	lsl.w	r2, r0, r2
 800798e:	6868      	ldr	r0, [r5, #4]
 8007990:	4310      	orrs	r0, r2
 8007992:	6068      	str	r0, [r5, #4]
 8007994:	f8c6 e00c 	str.w	lr, [r6, #12]
 8007998:	60b7      	str	r7, [r6, #8]
 800799a:	f8ce 6008 	str.w	r6, [lr, #8]
 800799e:	e7b3      	b.n	8007908 <_malloc_r+0x154>
 80079a0:	2a14      	cmp	r2, #20
 80079a2:	d801      	bhi.n	80079a8 <_malloc_r+0x1f4>
 80079a4:	325b      	adds	r2, #91	; 0x5b
 80079a6:	e7e7      	b.n	8007978 <_malloc_r+0x1c4>
 80079a8:	2a54      	cmp	r2, #84	; 0x54
 80079aa:	d802      	bhi.n	80079b2 <_malloc_r+0x1fe>
 80079ac:	0b02      	lsrs	r2, r0, #12
 80079ae:	326e      	adds	r2, #110	; 0x6e
 80079b0:	e7e2      	b.n	8007978 <_malloc_r+0x1c4>
 80079b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80079b6:	d802      	bhi.n	80079be <_malloc_r+0x20a>
 80079b8:	0bc2      	lsrs	r2, r0, #15
 80079ba:	3277      	adds	r2, #119	; 0x77
 80079bc:	e7dc      	b.n	8007978 <_malloc_r+0x1c4>
 80079be:	f240 5754 	movw	r7, #1364	; 0x554
 80079c2:	42ba      	cmp	r2, r7
 80079c4:	bf9a      	itte	ls
 80079c6:	0c82      	lsrls	r2, r0, #18
 80079c8:	327c      	addls	r2, #124	; 0x7c
 80079ca:	227e      	movhi	r2, #126	; 0x7e
 80079cc:	e7d4      	b.n	8007978 <_malloc_r+0x1c4>
 80079ce:	68bf      	ldr	r7, [r7, #8]
 80079d0:	45be      	cmp	lr, r7
 80079d2:	d004      	beq.n	80079de <_malloc_r+0x22a>
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	f022 0203 	bic.w	r2, r2, #3
 80079da:	4290      	cmp	r0, r2
 80079dc:	d3f7      	bcc.n	80079ce <_malloc_r+0x21a>
 80079de:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80079e2:	e7d7      	b.n	8007994 <_malloc_r+0x1e0>
 80079e4:	6870      	ldr	r0, [r6, #4]
 80079e6:	68f7      	ldr	r7, [r6, #12]
 80079e8:	f020 0003 	bic.w	r0, r0, #3
 80079ec:	eba0 0a04 	sub.w	sl, r0, r4
 80079f0:	f1ba 0f0f 	cmp.w	sl, #15
 80079f4:	dd10      	ble.n	8007a18 <_malloc_r+0x264>
 80079f6:	68b2      	ldr	r2, [r6, #8]
 80079f8:	1933      	adds	r3, r6, r4
 80079fa:	f044 0401 	orr.w	r4, r4, #1
 80079fe:	6074      	str	r4, [r6, #4]
 8007a00:	60d7      	str	r7, [r2, #12]
 8007a02:	60ba      	str	r2, [r7, #8]
 8007a04:	f04a 0201 	orr.w	r2, sl, #1
 8007a08:	616b      	str	r3, [r5, #20]
 8007a0a:	612b      	str	r3, [r5, #16]
 8007a0c:	60d9      	str	r1, [r3, #12]
 8007a0e:	6099      	str	r1, [r3, #8]
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	f846 a000 	str.w	sl, [r6, r0]
 8007a16:	e6ff      	b.n	8007818 <_malloc_r+0x64>
 8007a18:	f1ba 0f00 	cmp.w	sl, #0
 8007a1c:	db0f      	blt.n	8007a3e <_malloc_r+0x28a>
 8007a1e:	4430      	add	r0, r6
 8007a20:	6843      	ldr	r3, [r0, #4]
 8007a22:	f043 0301 	orr.w	r3, r3, #1
 8007a26:	6043      	str	r3, [r0, #4]
 8007a28:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8007a2c:	4648      	mov	r0, r9
 8007a2e:	60df      	str	r7, [r3, #12]
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	f000 f8df 	bl	8007bf4 <__malloc_unlock>
 8007a36:	4630      	mov	r0, r6
 8007a38:	b003      	add	sp, #12
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	463e      	mov	r6, r7
 8007a40:	e77a      	b.n	8007938 <_malloc_r+0x184>
 8007a42:	f85c 0908 	ldr.w	r0, [ip], #-8
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4584      	cmp	ip, r0
 8007a4a:	f43f af7e 	beq.w	800794a <_malloc_r+0x196>
 8007a4e:	e782      	b.n	8007956 <_malloc_r+0x1a2>
 8007a50:	20000288 	.word	0x20000288
 8007a54:	20000290 	.word	0x20000290
 8007a58:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8007a5c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8007a60:	f026 0603 	bic.w	r6, r6, #3
 8007a64:	42b4      	cmp	r4, r6
 8007a66:	d803      	bhi.n	8007a70 <_malloc_r+0x2bc>
 8007a68:	1b33      	subs	r3, r6, r4
 8007a6a:	2b0f      	cmp	r3, #15
 8007a6c:	f300 8095 	bgt.w	8007b9a <_malloc_r+0x3e6>
 8007a70:	4a4f      	ldr	r2, [pc, #316]	; (8007bb0 <_malloc_r+0x3fc>)
 8007a72:	eb0b 0306 	add.w	r3, fp, r6
 8007a76:	6817      	ldr	r7, [r2, #0]
 8007a78:	4a4e      	ldr	r2, [pc, #312]	; (8007bb4 <_malloc_r+0x400>)
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	4427      	add	r7, r4
 8007a80:	3101      	adds	r1, #1
 8007a82:	d005      	beq.n	8007a90 <_malloc_r+0x2dc>
 8007a84:	494c      	ldr	r1, [pc, #304]	; (8007bb8 <_malloc_r+0x404>)
 8007a86:	3901      	subs	r1, #1
 8007a88:	440f      	add	r7, r1
 8007a8a:	3101      	adds	r1, #1
 8007a8c:	4249      	negs	r1, r1
 8007a8e:	400f      	ands	r7, r1
 8007a90:	4639      	mov	r1, r7
 8007a92:	4648      	mov	r0, r9
 8007a94:	9201      	str	r2, [sp, #4]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	f000 fb84 	bl	80081a4 <_sbrk_r>
 8007a9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	d055      	beq.n	8007b50 <_malloc_r+0x39c>
 8007aa4:	9b00      	ldr	r3, [sp, #0]
 8007aa6:	9a01      	ldr	r2, [sp, #4]
 8007aa8:	4283      	cmp	r3, r0
 8007aaa:	d901      	bls.n	8007ab0 <_malloc_r+0x2fc>
 8007aac:	45ab      	cmp	fp, r5
 8007aae:	d14f      	bne.n	8007b50 <_malloc_r+0x39c>
 8007ab0:	4842      	ldr	r0, [pc, #264]	; (8007bbc <_malloc_r+0x408>)
 8007ab2:	4543      	cmp	r3, r8
 8007ab4:	6801      	ldr	r1, [r0, #0]
 8007ab6:	4682      	mov	sl, r0
 8007ab8:	eb07 0e01 	add.w	lr, r7, r1
 8007abc:	f8c0 e000 	str.w	lr, [r0]
 8007ac0:	493f      	ldr	r1, [pc, #252]	; (8007bc0 <_malloc_r+0x40c>)
 8007ac2:	d113      	bne.n	8007aec <_malloc_r+0x338>
 8007ac4:	420b      	tst	r3, r1
 8007ac6:	d111      	bne.n	8007aec <_malloc_r+0x338>
 8007ac8:	68ab      	ldr	r3, [r5, #8]
 8007aca:	443e      	add	r6, r7
 8007acc:	f046 0601 	orr.w	r6, r6, #1
 8007ad0:	605e      	str	r6, [r3, #4]
 8007ad2:	4a3c      	ldr	r2, [pc, #240]	; (8007bc4 <_malloc_r+0x410>)
 8007ad4:	f8da 3000 	ldr.w	r3, [sl]
 8007ad8:	6811      	ldr	r1, [r2, #0]
 8007ada:	428b      	cmp	r3, r1
 8007adc:	bf88      	it	hi
 8007ade:	6013      	strhi	r3, [r2, #0]
 8007ae0:	4a39      	ldr	r2, [pc, #228]	; (8007bc8 <_malloc_r+0x414>)
 8007ae2:	6811      	ldr	r1, [r2, #0]
 8007ae4:	428b      	cmp	r3, r1
 8007ae6:	bf88      	it	hi
 8007ae8:	6013      	strhi	r3, [r2, #0]
 8007aea:	e031      	b.n	8007b50 <_malloc_r+0x39c>
 8007aec:	6810      	ldr	r0, [r2, #0]
 8007aee:	3001      	adds	r0, #1
 8007af0:	bf1b      	ittet	ne
 8007af2:	eba8 0303 	subne.w	r3, r8, r3
 8007af6:	4473      	addne	r3, lr
 8007af8:	f8c2 8000 	streq.w	r8, [r2]
 8007afc:	f8ca 3000 	strne.w	r3, [sl]
 8007b00:	f018 0007 	ands.w	r0, r8, #7
 8007b04:	bf1c      	itt	ne
 8007b06:	f1c0 0008 	rsbne	r0, r0, #8
 8007b0a:	4480      	addne	r8, r0
 8007b0c:	4b2a      	ldr	r3, [pc, #168]	; (8007bb8 <_malloc_r+0x404>)
 8007b0e:	4447      	add	r7, r8
 8007b10:	4418      	add	r0, r3
 8007b12:	400f      	ands	r7, r1
 8007b14:	1bc7      	subs	r7, r0, r7
 8007b16:	4639      	mov	r1, r7
 8007b18:	4648      	mov	r0, r9
 8007b1a:	f000 fb43 	bl	80081a4 <_sbrk_r>
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	bf04      	itt	eq
 8007b22:	4640      	moveq	r0, r8
 8007b24:	2700      	moveq	r7, #0
 8007b26:	f8da 3000 	ldr.w	r3, [sl]
 8007b2a:	eba0 0008 	sub.w	r0, r0, r8
 8007b2e:	443b      	add	r3, r7
 8007b30:	4407      	add	r7, r0
 8007b32:	f047 0701 	orr.w	r7, r7, #1
 8007b36:	45ab      	cmp	fp, r5
 8007b38:	f8c5 8008 	str.w	r8, [r5, #8]
 8007b3c:	f8ca 3000 	str.w	r3, [sl]
 8007b40:	f8c8 7004 	str.w	r7, [r8, #4]
 8007b44:	d0c5      	beq.n	8007ad2 <_malloc_r+0x31e>
 8007b46:	2e0f      	cmp	r6, #15
 8007b48:	d810      	bhi.n	8007b6c <_malloc_r+0x3b8>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007b50:	68ab      	ldr	r3, [r5, #8]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	f022 0203 	bic.w	r2, r2, #3
 8007b58:	4294      	cmp	r4, r2
 8007b5a:	eba2 0304 	sub.w	r3, r2, r4
 8007b5e:	d801      	bhi.n	8007b64 <_malloc_r+0x3b0>
 8007b60:	2b0f      	cmp	r3, #15
 8007b62:	dc1a      	bgt.n	8007b9a <_malloc_r+0x3e6>
 8007b64:	4648      	mov	r0, r9
 8007b66:	f000 f845 	bl	8007bf4 <__malloc_unlock>
 8007b6a:	e630      	b.n	80077ce <_malloc_r+0x1a>
 8007b6c:	2205      	movs	r2, #5
 8007b6e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007b72:	3e0c      	subs	r6, #12
 8007b74:	f026 0607 	bic.w	r6, r6, #7
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	4333      	orrs	r3, r6
 8007b7e:	f8cb 3004 	str.w	r3, [fp, #4]
 8007b82:	2e0f      	cmp	r6, #15
 8007b84:	eb0b 0306 	add.w	r3, fp, r6
 8007b88:	605a      	str	r2, [r3, #4]
 8007b8a:	609a      	str	r2, [r3, #8]
 8007b8c:	d9a1      	bls.n	8007ad2 <_malloc_r+0x31e>
 8007b8e:	f10b 0108 	add.w	r1, fp, #8
 8007b92:	4648      	mov	r0, r9
 8007b94:	f000 fc14 	bl	80083c0 <_free_r>
 8007b98:	e79b      	b.n	8007ad2 <_malloc_r+0x31e>
 8007b9a:	68ae      	ldr	r6, [r5, #8]
 8007b9c:	f044 0201 	orr.w	r2, r4, #1
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	4434      	add	r4, r6
 8007ba6:	6072      	str	r2, [r6, #4]
 8007ba8:	60ac      	str	r4, [r5, #8]
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	e634      	b.n	8007818 <_malloc_r+0x64>
 8007bae:	bf00      	nop
 8007bb0:	20000b28 	.word	0x20000b28
 8007bb4:	20000690 	.word	0x20000690
 8007bb8:	00000080 	.word	0x00000080
 8007bbc:	20000af8 	.word	0x20000af8
 8007bc0:	0000007f 	.word	0x0000007f
 8007bc4:	20000b20 	.word	0x20000b20
 8007bc8:	20000b24 	.word	0x20000b24

08007bcc <memchr>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	b2c9      	uxtb	r1, r1
 8007bd0:	4402      	add	r2, r0
 8007bd2:	4290      	cmp	r0, r2
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	d101      	bne.n	8007bdc <memchr+0x10>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	bd10      	pop	{r4, pc}
 8007bdc:	781c      	ldrb	r4, [r3, #0]
 8007bde:	3001      	adds	r0, #1
 8007be0:	428c      	cmp	r4, r1
 8007be2:	d1f6      	bne.n	8007bd2 <memchr+0x6>
 8007be4:	4618      	mov	r0, r3
 8007be6:	bd10      	pop	{r4, pc}

08007be8 <__malloc_lock>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__malloc_lock+0x8>)
 8007bea:	f000 bca5 	b.w	8008538 <__retarget_lock_acquire_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20001cc6 	.word	0x20001cc6

08007bf4 <__malloc_unlock>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__malloc_unlock+0x8>)
 8007bf6:	f000 bca0 	b.w	800853a <__retarget_lock_release_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	20001cc6 	.word	0x20001cc6

08007c00 <_Balloc>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c04:	4604      	mov	r4, r0
 8007c06:	460e      	mov	r6, r1
 8007c08:	b93d      	cbnz	r5, 8007c1a <_Balloc+0x1a>
 8007c0a:	2010      	movs	r0, #16
 8007c0c:	f7ff fdca 	bl	80077a4 <malloc>
 8007c10:	6260      	str	r0, [r4, #36]	; 0x24
 8007c12:	6045      	str	r5, [r0, #4]
 8007c14:	6085      	str	r5, [r0, #8]
 8007c16:	6005      	str	r5, [r0, #0]
 8007c18:	60c5      	str	r5, [r0, #12]
 8007c1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007c1c:	68eb      	ldr	r3, [r5, #12]
 8007c1e:	b183      	cbz	r3, 8007c42 <_Balloc+0x42>
 8007c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007c28:	b9b8      	cbnz	r0, 8007c5a <_Balloc+0x5a>
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	fa01 f506 	lsl.w	r5, r1, r6
 8007c30:	1d6a      	adds	r2, r5, #5
 8007c32:	0092      	lsls	r2, r2, #2
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 fb3f 	bl	80082b8 <_calloc_r>
 8007c3a:	b160      	cbz	r0, 8007c56 <_Balloc+0x56>
 8007c3c:	6046      	str	r6, [r0, #4]
 8007c3e:	6085      	str	r5, [r0, #8]
 8007c40:	e00e      	b.n	8007c60 <_Balloc+0x60>
 8007c42:	2221      	movs	r2, #33	; 0x21
 8007c44:	2104      	movs	r1, #4
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 fb36 	bl	80082b8 <_calloc_r>
 8007c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c4e:	60e8      	str	r0, [r5, #12]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e4      	bne.n	8007c20 <_Balloc+0x20>
 8007c56:	2000      	movs	r0, #0
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
 8007c5a:	6802      	ldr	r2, [r0, #0]
 8007c5c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007c60:	2300      	movs	r3, #0
 8007c62:	6103      	str	r3, [r0, #16]
 8007c64:	60c3      	str	r3, [r0, #12]
 8007c66:	bd70      	pop	{r4, r5, r6, pc}

08007c68 <_Bfree>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	b93c      	cbnz	r4, 8007c82 <_Bfree+0x1a>
 8007c72:	2010      	movs	r0, #16
 8007c74:	f7ff fd96 	bl	80077a4 <malloc>
 8007c78:	6270      	str	r0, [r6, #36]	; 0x24
 8007c7a:	6044      	str	r4, [r0, #4]
 8007c7c:	6084      	str	r4, [r0, #8]
 8007c7e:	6004      	str	r4, [r0, #0]
 8007c80:	60c4      	str	r4, [r0, #12]
 8007c82:	b13d      	cbz	r5, 8007c94 <_Bfree+0x2c>
 8007c84:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c86:	686a      	ldr	r2, [r5, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c8e:	6029      	str	r1, [r5, #0]
 8007c90:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007c94:	bd70      	pop	{r4, r5, r6, pc}

08007c96 <__multadd>:
 8007c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	461f      	mov	r7, r3
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	690d      	ldr	r5, [r1, #16]
 8007ca4:	f101 0e14 	add.w	lr, r1, #20
 8007ca8:	f8de 0000 	ldr.w	r0, [lr]
 8007cac:	3301      	adds	r3, #1
 8007cae:	b281      	uxth	r1, r0
 8007cb0:	fb02 7101 	mla	r1, r2, r1, r7
 8007cb4:	0c00      	lsrs	r0, r0, #16
 8007cb6:	0c0f      	lsrs	r7, r1, #16
 8007cb8:	fb02 7000 	mla	r0, r2, r0, r7
 8007cbc:	b289      	uxth	r1, r1
 8007cbe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007cc8:	f84e 1b04 	str.w	r1, [lr], #4
 8007ccc:	dcec      	bgt.n	8007ca8 <__multadd+0x12>
 8007cce:	b1d7      	cbz	r7, 8007d06 <__multadd+0x70>
 8007cd0:	68a3      	ldr	r3, [r4, #8]
 8007cd2:	429d      	cmp	r5, r3
 8007cd4:	db12      	blt.n	8007cfc <__multadd+0x66>
 8007cd6:	6861      	ldr	r1, [r4, #4]
 8007cd8:	4630      	mov	r0, r6
 8007cda:	3101      	adds	r1, #1
 8007cdc:	f7ff ff90 	bl	8007c00 <_Balloc>
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	6922      	ldr	r2, [r4, #16]
 8007ce4:	f104 010c 	add.w	r1, r4, #12
 8007ce8:	3202      	adds	r2, #2
 8007cea:	0092      	lsls	r2, r2, #2
 8007cec:	300c      	adds	r0, #12
 8007cee:	f7fd fec3 	bl	8005a78 <memcpy>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7ff ffb7 	bl	8007c68 <_Bfree>
 8007cfa:	4644      	mov	r4, r8
 8007cfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d00:	3501      	adds	r5, #1
 8007d02:	615f      	str	r7, [r3, #20]
 8007d04:	6125      	str	r5, [r4, #16]
 8007d06:	4620      	mov	r0, r4
 8007d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d0c <__hi0bits>:
 8007d0c:	0c02      	lsrs	r2, r0, #16
 8007d0e:	0412      	lsls	r2, r2, #16
 8007d10:	4603      	mov	r3, r0
 8007d12:	b9b2      	cbnz	r2, 8007d42 <__hi0bits+0x36>
 8007d14:	0403      	lsls	r3, r0, #16
 8007d16:	2010      	movs	r0, #16
 8007d18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d1c:	bf04      	itt	eq
 8007d1e:	021b      	lsleq	r3, r3, #8
 8007d20:	3008      	addeq	r0, #8
 8007d22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d26:	bf04      	itt	eq
 8007d28:	011b      	lsleq	r3, r3, #4
 8007d2a:	3004      	addeq	r0, #4
 8007d2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d30:	bf04      	itt	eq
 8007d32:	009b      	lsleq	r3, r3, #2
 8007d34:	3002      	addeq	r0, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	db06      	blt.n	8007d48 <__hi0bits+0x3c>
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	d503      	bpl.n	8007d46 <__hi0bits+0x3a>
 8007d3e:	3001      	adds	r0, #1
 8007d40:	4770      	bx	lr
 8007d42:	2000      	movs	r0, #0
 8007d44:	e7e8      	b.n	8007d18 <__hi0bits+0xc>
 8007d46:	2020      	movs	r0, #32
 8007d48:	4770      	bx	lr

08007d4a <__lo0bits>:
 8007d4a:	6803      	ldr	r3, [r0, #0]
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	f013 0207 	ands.w	r2, r3, #7
 8007d52:	d00b      	beq.n	8007d6c <__lo0bits+0x22>
 8007d54:	07da      	lsls	r2, r3, #31
 8007d56:	d423      	bmi.n	8007da0 <__lo0bits+0x56>
 8007d58:	0798      	lsls	r0, r3, #30
 8007d5a:	bf49      	itett	mi
 8007d5c:	085b      	lsrmi	r3, r3, #1
 8007d5e:	089b      	lsrpl	r3, r3, #2
 8007d60:	2001      	movmi	r0, #1
 8007d62:	600b      	strmi	r3, [r1, #0]
 8007d64:	bf5c      	itt	pl
 8007d66:	600b      	strpl	r3, [r1, #0]
 8007d68:	2002      	movpl	r0, #2
 8007d6a:	4770      	bx	lr
 8007d6c:	b298      	uxth	r0, r3
 8007d6e:	b9a8      	cbnz	r0, 8007d9c <__lo0bits+0x52>
 8007d70:	2010      	movs	r0, #16
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d78:	bf04      	itt	eq
 8007d7a:	0a1b      	lsreq	r3, r3, #8
 8007d7c:	3008      	addeq	r0, #8
 8007d7e:	071a      	lsls	r2, r3, #28
 8007d80:	bf04      	itt	eq
 8007d82:	091b      	lsreq	r3, r3, #4
 8007d84:	3004      	addeq	r0, #4
 8007d86:	079a      	lsls	r2, r3, #30
 8007d88:	bf04      	itt	eq
 8007d8a:	089b      	lsreq	r3, r3, #2
 8007d8c:	3002      	addeq	r0, #2
 8007d8e:	07da      	lsls	r2, r3, #31
 8007d90:	d402      	bmi.n	8007d98 <__lo0bits+0x4e>
 8007d92:	085b      	lsrs	r3, r3, #1
 8007d94:	d006      	beq.n	8007da4 <__lo0bits+0x5a>
 8007d96:	3001      	adds	r0, #1
 8007d98:	600b      	str	r3, [r1, #0]
 8007d9a:	4770      	bx	lr
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	e7e9      	b.n	8007d74 <__lo0bits+0x2a>
 8007da0:	2000      	movs	r0, #0
 8007da2:	4770      	bx	lr
 8007da4:	2020      	movs	r0, #32
 8007da6:	4770      	bx	lr

08007da8 <__i2b>:
 8007da8:	b510      	push	{r4, lr}
 8007daa:	460c      	mov	r4, r1
 8007dac:	2101      	movs	r1, #1
 8007dae:	f7ff ff27 	bl	8007c00 <_Balloc>
 8007db2:	2201      	movs	r2, #1
 8007db4:	6144      	str	r4, [r0, #20]
 8007db6:	6102      	str	r2, [r0, #16]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__multiply>:
 8007dba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbe:	4614      	mov	r4, r2
 8007dc0:	690a      	ldr	r2, [r1, #16]
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	bfbe      	ittt	lt
 8007dca:	460b      	movlt	r3, r1
 8007dcc:	46a1      	movlt	r9, r4
 8007dce:	461c      	movlt	r4, r3
 8007dd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007dd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007dd8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007ddc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007de0:	eb07 060a 	add.w	r6, r7, sl
 8007de4:	429e      	cmp	r6, r3
 8007de6:	bfc8      	it	gt
 8007de8:	3101      	addgt	r1, #1
 8007dea:	f7ff ff09 	bl	8007c00 <_Balloc>
 8007dee:	f100 0514 	add.w	r5, r0, #20
 8007df2:	462b      	mov	r3, r5
 8007df4:	2200      	movs	r2, #0
 8007df6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dfa:	4543      	cmp	r3, r8
 8007dfc:	d316      	bcc.n	8007e2c <__multiply+0x72>
 8007dfe:	f104 0214 	add.w	r2, r4, #20
 8007e02:	f109 0114 	add.w	r1, r9, #20
 8007e06:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007e0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	9c01      	ldr	r4, [sp, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	4294      	cmp	r4, r2
 8007e16:	d80c      	bhi.n	8007e32 <__multiply+0x78>
 8007e18:	2e00      	cmp	r6, #0
 8007e1a:	dd03      	ble.n	8007e24 <__multiply+0x6a>
 8007e1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d054      	beq.n	8007ece <__multiply+0x114>
 8007e24:	6106      	str	r6, [r0, #16]
 8007e26:	b003      	add	sp, #12
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	f843 2b04 	str.w	r2, [r3], #4
 8007e30:	e7e3      	b.n	8007dfa <__multiply+0x40>
 8007e32:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e36:	3204      	adds	r2, #4
 8007e38:	f1ba 0f00 	cmp.w	sl, #0
 8007e3c:	d020      	beq.n	8007e80 <__multiply+0xc6>
 8007e3e:	46ae      	mov	lr, r5
 8007e40:	4689      	mov	r9, r1
 8007e42:	f04f 0c00 	mov.w	ip, #0
 8007e46:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e4a:	f8be b000 	ldrh.w	fp, [lr]
 8007e4e:	b2a3      	uxth	r3, r4
 8007e50:	fb0a b303 	mla	r3, sl, r3, fp
 8007e54:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007e58:	f8de 4000 	ldr.w	r4, [lr]
 8007e5c:	4463      	add	r3, ip
 8007e5e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007e62:	fb0a c40b 	mla	r4, sl, fp, ip
 8007e66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e70:	454f      	cmp	r7, r9
 8007e72:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007e76:	f84e 3b04 	str.w	r3, [lr], #4
 8007e7a:	d8e4      	bhi.n	8007e46 <__multiply+0x8c>
 8007e7c:	f8ce c000 	str.w	ip, [lr]
 8007e80:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007e84:	f1b9 0f00 	cmp.w	r9, #0
 8007e88:	d01f      	beq.n	8007eca <__multiply+0x110>
 8007e8a:	46ae      	mov	lr, r5
 8007e8c:	468c      	mov	ip, r1
 8007e8e:	f04f 0a00 	mov.w	sl, #0
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	f8bc 4000 	ldrh.w	r4, [ip]
 8007e98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	fb09 b404 	mla	r4, r9, r4, fp
 8007ea2:	44a2      	add	sl, r4
 8007ea4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007ea8:	f84e 3b04 	str.w	r3, [lr], #4
 8007eac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007eb0:	f8be 4000 	ldrh.w	r4, [lr]
 8007eb4:	0c1b      	lsrs	r3, r3, #16
 8007eb6:	fb09 4303 	mla	r3, r9, r3, r4
 8007eba:	4567      	cmp	r7, ip
 8007ebc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007ec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ec4:	d8e6      	bhi.n	8007e94 <__multiply+0xda>
 8007ec6:	f8ce 3000 	str.w	r3, [lr]
 8007eca:	3504      	adds	r5, #4
 8007ecc:	e7a0      	b.n	8007e10 <__multiply+0x56>
 8007ece:	3e01      	subs	r6, #1
 8007ed0:	e7a2      	b.n	8007e18 <__multiply+0x5e>
	...

08007ed4 <__pow5mult>:
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	4615      	mov	r5, r2
 8007eda:	f012 0203 	ands.w	r2, r2, #3
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	d007      	beq.n	8007ef4 <__pow5mult+0x20>
 8007ee4:	4c21      	ldr	r4, [pc, #132]	; (8007f6c <__pow5mult+0x98>)
 8007ee6:	3a01      	subs	r2, #1
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eee:	f7ff fed2 	bl	8007c96 <__multadd>
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	10ad      	asrs	r5, r5, #2
 8007ef6:	d035      	beq.n	8007f64 <__pow5mult+0x90>
 8007ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007efa:	b93c      	cbnz	r4, 8007f0c <__pow5mult+0x38>
 8007efc:	2010      	movs	r0, #16
 8007efe:	f7ff fc51 	bl	80077a4 <malloc>
 8007f02:	6270      	str	r0, [r6, #36]	; 0x24
 8007f04:	6044      	str	r4, [r0, #4]
 8007f06:	6084      	str	r4, [r0, #8]
 8007f08:	6004      	str	r4, [r0, #0]
 8007f0a:	60c4      	str	r4, [r0, #12]
 8007f0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f14:	b94c      	cbnz	r4, 8007f2a <__pow5mult+0x56>
 8007f16:	f240 2171 	movw	r1, #625	; 0x271
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7ff ff44 	bl	8007da8 <__i2b>
 8007f20:	2300      	movs	r3, #0
 8007f22:	4604      	mov	r4, r0
 8007f24:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f28:	6003      	str	r3, [r0, #0]
 8007f2a:	f04f 0800 	mov.w	r8, #0
 8007f2e:	07eb      	lsls	r3, r5, #31
 8007f30:	d50a      	bpl.n	8007f48 <__pow5mult+0x74>
 8007f32:	4639      	mov	r1, r7
 8007f34:	4622      	mov	r2, r4
 8007f36:	4630      	mov	r0, r6
 8007f38:	f7ff ff3f 	bl	8007dba <__multiply>
 8007f3c:	4681      	mov	r9, r0
 8007f3e:	4639      	mov	r1, r7
 8007f40:	4630      	mov	r0, r6
 8007f42:	f7ff fe91 	bl	8007c68 <_Bfree>
 8007f46:	464f      	mov	r7, r9
 8007f48:	106d      	asrs	r5, r5, #1
 8007f4a:	d00b      	beq.n	8007f64 <__pow5mult+0x90>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	b938      	cbnz	r0, 8007f60 <__pow5mult+0x8c>
 8007f50:	4622      	mov	r2, r4
 8007f52:	4621      	mov	r1, r4
 8007f54:	4630      	mov	r0, r6
 8007f56:	f7ff ff30 	bl	8007dba <__multiply>
 8007f5a:	6020      	str	r0, [r4, #0]
 8007f5c:	f8c0 8000 	str.w	r8, [r0]
 8007f60:	4604      	mov	r4, r0
 8007f62:	e7e4      	b.n	8007f2e <__pow5mult+0x5a>
 8007f64:	4638      	mov	r0, r7
 8007f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	bf00      	nop
 8007f6c:	0800d0f0 	.word	0x0800d0f0

08007f70 <__lshift>:
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	460c      	mov	r4, r1
 8007f76:	4607      	mov	r7, r0
 8007f78:	4616      	mov	r6, r2
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f80:	eb0a 0903 	add.w	r9, sl, r3
 8007f84:	6849      	ldr	r1, [r1, #4]
 8007f86:	68a3      	ldr	r3, [r4, #8]
 8007f88:	f109 0501 	add.w	r5, r9, #1
 8007f8c:	42ab      	cmp	r3, r5
 8007f8e:	db31      	blt.n	8007ff4 <__lshift+0x84>
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff fe35 	bl	8007c00 <_Balloc>
 8007f96:	2200      	movs	r2, #0
 8007f98:	4680      	mov	r8, r0
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	f100 0314 	add.w	r3, r0, #20
 8007fa0:	4552      	cmp	r2, sl
 8007fa2:	db2a      	blt.n	8007ffa <__lshift+0x8a>
 8007fa4:	6920      	ldr	r0, [r4, #16]
 8007fa6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007faa:	f104 0114 	add.w	r1, r4, #20
 8007fae:	f016 021f 	ands.w	r2, r6, #31
 8007fb2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007fb6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007fba:	d022      	beq.n	8008002 <__lshift+0x92>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	f1c2 0c20 	rsb	ip, r2, #32
 8007fc2:	680e      	ldr	r6, [r1, #0]
 8007fc4:	4096      	lsls	r6, r2
 8007fc6:	4330      	orrs	r0, r6
 8007fc8:	f843 0b04 	str.w	r0, [r3], #4
 8007fcc:	f851 0b04 	ldr.w	r0, [r1], #4
 8007fd0:	458e      	cmp	lr, r1
 8007fd2:	fa20 f00c 	lsr.w	r0, r0, ip
 8007fd6:	d8f4      	bhi.n	8007fc2 <__lshift+0x52>
 8007fd8:	6018      	str	r0, [r3, #0]
 8007fda:	b108      	cbz	r0, 8007fe0 <__lshift+0x70>
 8007fdc:	f109 0502 	add.w	r5, r9, #2
 8007fe0:	3d01      	subs	r5, #1
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f8c8 5010 	str.w	r5, [r8, #16]
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f7ff fe3d 	bl	8007c68 <_Bfree>
 8007fee:	4640      	mov	r0, r8
 8007ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff4:	3101      	adds	r1, #1
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	e7c8      	b.n	8007f8c <__lshift+0x1c>
 8007ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007ffe:	3201      	adds	r2, #1
 8008000:	e7ce      	b.n	8007fa0 <__lshift+0x30>
 8008002:	3b04      	subs	r3, #4
 8008004:	f851 2b04 	ldr.w	r2, [r1], #4
 8008008:	458e      	cmp	lr, r1
 800800a:	f843 2f04 	str.w	r2, [r3, #4]!
 800800e:	d8f9      	bhi.n	8008004 <__lshift+0x94>
 8008010:	e7e6      	b.n	8007fe0 <__lshift+0x70>

08008012 <__mcmp>:
 8008012:	6903      	ldr	r3, [r0, #16]
 8008014:	690a      	ldr	r2, [r1, #16]
 8008016:	b530      	push	{r4, r5, lr}
 8008018:	1a9b      	subs	r3, r3, r2
 800801a:	d10c      	bne.n	8008036 <__mcmp+0x24>
 800801c:	0092      	lsls	r2, r2, #2
 800801e:	3014      	adds	r0, #20
 8008020:	3114      	adds	r1, #20
 8008022:	1884      	adds	r4, r0, r2
 8008024:	4411      	add	r1, r2
 8008026:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800802a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800802e:	4295      	cmp	r5, r2
 8008030:	d003      	beq.n	800803a <__mcmp+0x28>
 8008032:	d305      	bcc.n	8008040 <__mcmp+0x2e>
 8008034:	2301      	movs	r3, #1
 8008036:	4618      	mov	r0, r3
 8008038:	bd30      	pop	{r4, r5, pc}
 800803a:	42a0      	cmp	r0, r4
 800803c:	d3f3      	bcc.n	8008026 <__mcmp+0x14>
 800803e:	e7fa      	b.n	8008036 <__mcmp+0x24>
 8008040:	f04f 33ff 	mov.w	r3, #4294967295
 8008044:	e7f7      	b.n	8008036 <__mcmp+0x24>

08008046 <__mdiff>:
 8008046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800804a:	460d      	mov	r5, r1
 800804c:	4607      	mov	r7, r0
 800804e:	4611      	mov	r1, r2
 8008050:	4628      	mov	r0, r5
 8008052:	4614      	mov	r4, r2
 8008054:	f7ff ffdd 	bl	8008012 <__mcmp>
 8008058:	1e06      	subs	r6, r0, #0
 800805a:	d108      	bne.n	800806e <__mdiff+0x28>
 800805c:	4631      	mov	r1, r6
 800805e:	4638      	mov	r0, r7
 8008060:	f7ff fdce 	bl	8007c00 <_Balloc>
 8008064:	2301      	movs	r3, #1
 8008066:	6146      	str	r6, [r0, #20]
 8008068:	6103      	str	r3, [r0, #16]
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	bfa4      	itt	ge
 8008070:	4623      	movge	r3, r4
 8008072:	462c      	movge	r4, r5
 8008074:	4638      	mov	r0, r7
 8008076:	6861      	ldr	r1, [r4, #4]
 8008078:	bfa6      	itte	ge
 800807a:	461d      	movge	r5, r3
 800807c:	2600      	movge	r6, #0
 800807e:	2601      	movlt	r6, #1
 8008080:	f7ff fdbe 	bl	8007c00 <_Balloc>
 8008084:	f04f 0c00 	mov.w	ip, #0
 8008088:	60c6      	str	r6, [r0, #12]
 800808a:	692b      	ldr	r3, [r5, #16]
 800808c:	6926      	ldr	r6, [r4, #16]
 800808e:	f104 0214 	add.w	r2, r4, #20
 8008092:	f105 0914 	add.w	r9, r5, #20
 8008096:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800809a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800809e:	f100 0114 	add.w	r1, r0, #20
 80080a2:	f852 ab04 	ldr.w	sl, [r2], #4
 80080a6:	f859 5b04 	ldr.w	r5, [r9], #4
 80080aa:	fa1f f38a 	uxth.w	r3, sl
 80080ae:	4463      	add	r3, ip
 80080b0:	b2ac      	uxth	r4, r5
 80080b2:	1b1b      	subs	r3, r3, r4
 80080b4:	0c2c      	lsrs	r4, r5, #16
 80080b6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80080ba:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80080be:	b29b      	uxth	r3, r3
 80080c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80080c4:	45c8      	cmp	r8, r9
 80080c6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80080ca:	4696      	mov	lr, r2
 80080cc:	f841 4b04 	str.w	r4, [r1], #4
 80080d0:	d8e7      	bhi.n	80080a2 <__mdiff+0x5c>
 80080d2:	45be      	cmp	lr, r7
 80080d4:	d305      	bcc.n	80080e2 <__mdiff+0x9c>
 80080d6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80080da:	b18b      	cbz	r3, 8008100 <__mdiff+0xba>
 80080dc:	6106      	str	r6, [r0, #16]
 80080de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80080e6:	b2a2      	uxth	r2, r4
 80080e8:	4462      	add	r2, ip
 80080ea:	1413      	asrs	r3, r2, #16
 80080ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80080f0:	b292      	uxth	r2, r2
 80080f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80080fa:	f841 2b04 	str.w	r2, [r1], #4
 80080fe:	e7e8      	b.n	80080d2 <__mdiff+0x8c>
 8008100:	3e01      	subs	r6, #1
 8008102:	e7e8      	b.n	80080d6 <__mdiff+0x90>

08008104 <__d2b>:
 8008104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008108:	461c      	mov	r4, r3
 800810a:	2101      	movs	r1, #1
 800810c:	4690      	mov	r8, r2
 800810e:	9e08      	ldr	r6, [sp, #32]
 8008110:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008112:	f7ff fd75 	bl	8007c00 <_Balloc>
 8008116:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800811a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800811e:	4607      	mov	r7, r0
 8008120:	bb34      	cbnz	r4, 8008170 <__d2b+0x6c>
 8008122:	9201      	str	r2, [sp, #4]
 8008124:	f1b8 0f00 	cmp.w	r8, #0
 8008128:	d027      	beq.n	800817a <__d2b+0x76>
 800812a:	a802      	add	r0, sp, #8
 800812c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8008130:	f7ff fe0b 	bl	8007d4a <__lo0bits>
 8008134:	9900      	ldr	r1, [sp, #0]
 8008136:	b1f0      	cbz	r0, 8008176 <__d2b+0x72>
 8008138:	9a01      	ldr	r2, [sp, #4]
 800813a:	f1c0 0320 	rsb	r3, r0, #32
 800813e:	fa02 f303 	lsl.w	r3, r2, r3
 8008142:	430b      	orrs	r3, r1
 8008144:	40c2      	lsrs	r2, r0
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf14      	ite	ne
 8008150:	2102      	movne	r1, #2
 8008152:	2101      	moveq	r1, #1
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	6139      	str	r1, [r7, #16]
 8008158:	b1c4      	cbz	r4, 800818c <__d2b+0x88>
 800815a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800815e:	4404      	add	r4, r0
 8008160:	6034      	str	r4, [r6, #0]
 8008162:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008166:	6028      	str	r0, [r5, #0]
 8008168:	4638      	mov	r0, r7
 800816a:	b002      	add	sp, #8
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008170:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008174:	e7d5      	b.n	8008122 <__d2b+0x1e>
 8008176:	6179      	str	r1, [r7, #20]
 8008178:	e7e7      	b.n	800814a <__d2b+0x46>
 800817a:	a801      	add	r0, sp, #4
 800817c:	f7ff fde5 	bl	8007d4a <__lo0bits>
 8008180:	2101      	movs	r1, #1
 8008182:	9b01      	ldr	r3, [sp, #4]
 8008184:	6139      	str	r1, [r7, #16]
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	3020      	adds	r0, #32
 800818a:	e7e5      	b.n	8008158 <__d2b+0x54>
 800818c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008190:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008194:	6030      	str	r0, [r6, #0]
 8008196:	6918      	ldr	r0, [r3, #16]
 8008198:	f7ff fdb8 	bl	8007d0c <__hi0bits>
 800819c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80081a0:	e7e1      	b.n	8008166 <__d2b+0x62>
	...

080081a4 <_sbrk_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	2300      	movs	r3, #0
 80081a8:	4c05      	ldr	r4, [pc, #20]	; (80081c0 <_sbrk_r+0x1c>)
 80081aa:	4605      	mov	r5, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	f001 fb7a 	bl	80098a8 <_sbrk>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_sbrk_r+0x1a>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	b103      	cbz	r3, 80081be <_sbrk_r+0x1a>
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	20001ccc 	.word	0x20001ccc

080081c4 <__ssprint_r>:
 80081c4:	6893      	ldr	r3, [r2, #8]
 80081c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	4681      	mov	r9, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	4617      	mov	r7, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d060      	beq.n	8008296 <__ssprint_r+0xd2>
 80081d4:	f04f 0b00 	mov.w	fp, #0
 80081d8:	465e      	mov	r6, fp
 80081da:	f8d2 a000 	ldr.w	sl, [r2]
 80081de:	b356      	cbz	r6, 8008236 <__ssprint_r+0x72>
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	429e      	cmp	r6, r3
 80081e4:	d344      	bcc.n	8008270 <__ssprint_r+0xac>
 80081e6:	89a2      	ldrh	r2, [r4, #12]
 80081e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081ec:	d03e      	beq.n	800826c <__ssprint_r+0xa8>
 80081ee:	2302      	movs	r3, #2
 80081f0:	6825      	ldr	r5, [r4, #0]
 80081f2:	6921      	ldr	r1, [r4, #16]
 80081f4:	eba5 0801 	sub.w	r8, r5, r1
 80081f8:	6965      	ldr	r5, [r4, #20]
 80081fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8008202:	f108 0301 	add.w	r3, r8, #1
 8008206:	4433      	add	r3, r6
 8008208:	429d      	cmp	r5, r3
 800820a:	bf38      	it	cc
 800820c:	461d      	movcc	r5, r3
 800820e:	0553      	lsls	r3, r2, #21
 8008210:	d546      	bpl.n	80082a0 <__ssprint_r+0xdc>
 8008212:	4629      	mov	r1, r5
 8008214:	4648      	mov	r0, r9
 8008216:	f7ff facd 	bl	80077b4 <_malloc_r>
 800821a:	b998      	cbnz	r0, 8008244 <__ssprint_r+0x80>
 800821c:	230c      	movs	r3, #12
 800821e:	f8c9 3000 	str.w	r3, [r9]
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	e031      	b.n	800829a <__ssprint_r+0xd6>
 8008236:	f8da b000 	ldr.w	fp, [sl]
 800823a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800823e:	f10a 0a08 	add.w	sl, sl, #8
 8008242:	e7cc      	b.n	80081de <__ssprint_r+0x1a>
 8008244:	4642      	mov	r2, r8
 8008246:	6921      	ldr	r1, [r4, #16]
 8008248:	9001      	str	r0, [sp, #4]
 800824a:	f7fd fc15 	bl	8005a78 <memcpy>
 800824e:	89a2      	ldrh	r2, [r4, #12]
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800825a:	81a2      	strh	r2, [r4, #12]
 800825c:	6123      	str	r3, [r4, #16]
 800825e:	4443      	add	r3, r8
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	4633      	mov	r3, r6
 8008264:	6165      	str	r5, [r4, #20]
 8008266:	eba5 0508 	sub.w	r5, r5, r8
 800826a:	60a5      	str	r5, [r4, #8]
 800826c:	429e      	cmp	r6, r3
 800826e:	d200      	bcs.n	8008272 <__ssprint_r+0xae>
 8008270:	4633      	mov	r3, r6
 8008272:	461a      	mov	r2, r3
 8008274:	4659      	mov	r1, fp
 8008276:	6820      	ldr	r0, [r4, #0]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f000 f95f 	bl	800853c <memmove>
 800827e:	68a2      	ldr	r2, [r4, #8]
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	1ad2      	subs	r2, r2, r3
 8008284:	60a2      	str	r2, [r4, #8]
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	4413      	add	r3, r2
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	1b9e      	subs	r6, r3, r6
 8008290:	60be      	str	r6, [r7, #8]
 8008292:	2e00      	cmp	r6, #0
 8008294:	d1cf      	bne.n	8008236 <__ssprint_r+0x72>
 8008296:	2000      	movs	r0, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	b003      	add	sp, #12
 800829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a0:	462a      	mov	r2, r5
 80082a2:	4648      	mov	r0, r9
 80082a4:	f000 f964 	bl	8008570 <_realloc_r>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d1d6      	bne.n	800825c <__ssprint_r+0x98>
 80082ae:	6921      	ldr	r1, [r4, #16]
 80082b0:	4648      	mov	r0, r9
 80082b2:	f000 f885 	bl	80083c0 <_free_r>
 80082b6:	e7b1      	b.n	800821c <__ssprint_r+0x58>

080082b8 <_calloc_r>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	4351      	muls	r1, r2
 80082bc:	f7ff fa7a 	bl	80077b4 <_malloc_r>
 80082c0:	4604      	mov	r4, r0
 80082c2:	b198      	cbz	r0, 80082ec <_calloc_r+0x34>
 80082c4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80082c8:	f022 0203 	bic.w	r2, r2, #3
 80082cc:	3a04      	subs	r2, #4
 80082ce:	2a24      	cmp	r2, #36	; 0x24
 80082d0:	d81b      	bhi.n	800830a <_calloc_r+0x52>
 80082d2:	2a13      	cmp	r2, #19
 80082d4:	d917      	bls.n	8008306 <_calloc_r+0x4e>
 80082d6:	2100      	movs	r1, #0
 80082d8:	2a1b      	cmp	r2, #27
 80082da:	6001      	str	r1, [r0, #0]
 80082dc:	6041      	str	r1, [r0, #4]
 80082de:	d807      	bhi.n	80082f0 <_calloc_r+0x38>
 80082e0:	f100 0308 	add.w	r3, r0, #8
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	605a      	str	r2, [r3, #4]
 80082ea:	609a      	str	r2, [r3, #8]
 80082ec:	4620      	mov	r0, r4
 80082ee:	bd10      	pop	{r4, pc}
 80082f0:	2a24      	cmp	r2, #36	; 0x24
 80082f2:	6081      	str	r1, [r0, #8]
 80082f4:	60c1      	str	r1, [r0, #12]
 80082f6:	bf11      	iteee	ne
 80082f8:	f100 0310 	addne.w	r3, r0, #16
 80082fc:	6101      	streq	r1, [r0, #16]
 80082fe:	f100 0318 	addeq.w	r3, r0, #24
 8008302:	6141      	streq	r1, [r0, #20]
 8008304:	e7ee      	b.n	80082e4 <_calloc_r+0x2c>
 8008306:	4603      	mov	r3, r0
 8008308:	e7ec      	b.n	80082e4 <_calloc_r+0x2c>
 800830a:	2100      	movs	r1, #0
 800830c:	f7fd fbbf 	bl	8005a8e <memset>
 8008310:	e7ec      	b.n	80082ec <_calloc_r+0x34>
	...

08008314 <_malloc_trim_r>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	4689      	mov	r9, r1
 800831a:	4f25      	ldr	r7, [pc, #148]	; (80083b0 <_malloc_trim_r+0x9c>)
 800831c:	4606      	mov	r6, r0
 800831e:	f7ff fc63 	bl	8007be8 <__malloc_lock>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80083bc <_malloc_trim_r+0xa8>
 8008328:	685d      	ldr	r5, [r3, #4]
 800832a:	f1a8 0411 	sub.w	r4, r8, #17
 800832e:	f025 0503 	bic.w	r5, r5, #3
 8008332:	eba4 0409 	sub.w	r4, r4, r9
 8008336:	442c      	add	r4, r5
 8008338:	fbb4 f4f8 	udiv	r4, r4, r8
 800833c:	3c01      	subs	r4, #1
 800833e:	fb08 f404 	mul.w	r4, r8, r4
 8008342:	4544      	cmp	r4, r8
 8008344:	da05      	bge.n	8008352 <_malloc_trim_r+0x3e>
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff fc54 	bl	8007bf4 <__malloc_unlock>
 800834c:	2000      	movs	r0, #0
 800834e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008352:	2100      	movs	r1, #0
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff ff25 	bl	80081a4 <_sbrk_r>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	442b      	add	r3, r5
 800835e:	4298      	cmp	r0, r3
 8008360:	d1f1      	bne.n	8008346 <_malloc_trim_r+0x32>
 8008362:	4261      	negs	r1, r4
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff ff1d 	bl	80081a4 <_sbrk_r>
 800836a:	3001      	adds	r0, #1
 800836c:	d110      	bne.n	8008390 <_malloc_trim_r+0x7c>
 800836e:	2100      	movs	r1, #0
 8008370:	4630      	mov	r0, r6
 8008372:	f7ff ff17 	bl	80081a4 <_sbrk_r>
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	1a83      	subs	r3, r0, r2
 800837a:	2b0f      	cmp	r3, #15
 800837c:	dde3      	ble.n	8008346 <_malloc_trim_r+0x32>
 800837e:	490d      	ldr	r1, [pc, #52]	; (80083b4 <_malloc_trim_r+0xa0>)
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	6809      	ldr	r1, [r1, #0]
 8008386:	6053      	str	r3, [r2, #4]
 8008388:	1a40      	subs	r0, r0, r1
 800838a:	490b      	ldr	r1, [pc, #44]	; (80083b8 <_malloc_trim_r+0xa4>)
 800838c:	6008      	str	r0, [r1, #0]
 800838e:	e7da      	b.n	8008346 <_malloc_trim_r+0x32>
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4a09      	ldr	r2, [pc, #36]	; (80083b8 <_malloc_trim_r+0xa4>)
 8008394:	1b2d      	subs	r5, r5, r4
 8008396:	f045 0501 	orr.w	r5, r5, #1
 800839a:	605d      	str	r5, [r3, #4]
 800839c:	6813      	ldr	r3, [r2, #0]
 800839e:	4630      	mov	r0, r6
 80083a0:	1b1c      	subs	r4, r3, r4
 80083a2:	6014      	str	r4, [r2, #0]
 80083a4:	f7ff fc26 	bl	8007bf4 <__malloc_unlock>
 80083a8:	2001      	movs	r0, #1
 80083aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ae:	bf00      	nop
 80083b0:	20000288 	.word	0x20000288
 80083b4:	20000690 	.word	0x20000690
 80083b8:	20000af8 	.word	0x20000af8
 80083bc:	00000080 	.word	0x00000080

080083c0 <_free_r>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	4604      	mov	r4, r0
 80083c6:	4688      	mov	r8, r1
 80083c8:	2900      	cmp	r1, #0
 80083ca:	f000 80ab 	beq.w	8008524 <_free_r+0x164>
 80083ce:	f7ff fc0b 	bl	8007be8 <__malloc_lock>
 80083d2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80083d6:	4d54      	ldr	r5, [pc, #336]	; (8008528 <_free_r+0x168>)
 80083d8:	f022 0001 	bic.w	r0, r2, #1
 80083dc:	f1a8 0308 	sub.w	r3, r8, #8
 80083e0:	181f      	adds	r7, r3, r0
 80083e2:	68a9      	ldr	r1, [r5, #8]
 80083e4:	687e      	ldr	r6, [r7, #4]
 80083e6:	428f      	cmp	r7, r1
 80083e8:	f026 0603 	bic.w	r6, r6, #3
 80083ec:	f002 0201 	and.w	r2, r2, #1
 80083f0:	d11b      	bne.n	800842a <_free_r+0x6a>
 80083f2:	4430      	add	r0, r6
 80083f4:	b93a      	cbnz	r2, 8008406 <_free_r+0x46>
 80083f6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	6899      	ldr	r1, [r3, #8]
 80083fe:	4410      	add	r0, r2
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	60ca      	str	r2, [r1, #12]
 8008404:	6091      	str	r1, [r2, #8]
 8008406:	f040 0201 	orr.w	r2, r0, #1
 800840a:	605a      	str	r2, [r3, #4]
 800840c:	60ab      	str	r3, [r5, #8]
 800840e:	4b47      	ldr	r3, [pc, #284]	; (800852c <_free_r+0x16c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4298      	cmp	r0, r3
 8008414:	d304      	bcc.n	8008420 <_free_r+0x60>
 8008416:	4b46      	ldr	r3, [pc, #280]	; (8008530 <_free_r+0x170>)
 8008418:	4620      	mov	r0, r4
 800841a:	6819      	ldr	r1, [r3, #0]
 800841c:	f7ff ff7a 	bl	8008314 <_malloc_trim_r>
 8008420:	4620      	mov	r0, r4
 8008422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008426:	f7ff bbe5 	b.w	8007bf4 <__malloc_unlock>
 800842a:	607e      	str	r6, [r7, #4]
 800842c:	2a00      	cmp	r2, #0
 800842e:	d139      	bne.n	80084a4 <_free_r+0xe4>
 8008430:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008434:	f105 0e08 	add.w	lr, r5, #8
 8008438:	1a5b      	subs	r3, r3, r1
 800843a:	4408      	add	r0, r1
 800843c:	6899      	ldr	r1, [r3, #8]
 800843e:	4571      	cmp	r1, lr
 8008440:	d032      	beq.n	80084a8 <_free_r+0xe8>
 8008442:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008446:	f8c1 e00c 	str.w	lr, [r1, #12]
 800844a:	f8ce 1008 	str.w	r1, [lr, #8]
 800844e:	19b9      	adds	r1, r7, r6
 8008450:	6849      	ldr	r1, [r1, #4]
 8008452:	07c9      	lsls	r1, r1, #31
 8008454:	d40a      	bmi.n	800846c <_free_r+0xac>
 8008456:	4430      	add	r0, r6
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	bb3a      	cbnz	r2, 80084ac <_free_r+0xec>
 800845c:	4e35      	ldr	r6, [pc, #212]	; (8008534 <_free_r+0x174>)
 800845e:	42b1      	cmp	r1, r6
 8008460:	d124      	bne.n	80084ac <_free_r+0xec>
 8008462:	2201      	movs	r2, #1
 8008464:	616b      	str	r3, [r5, #20]
 8008466:	612b      	str	r3, [r5, #16]
 8008468:	60d9      	str	r1, [r3, #12]
 800846a:	6099      	str	r1, [r3, #8]
 800846c:	f040 0101 	orr.w	r1, r0, #1
 8008470:	6059      	str	r1, [r3, #4]
 8008472:	5018      	str	r0, [r3, r0]
 8008474:	2a00      	cmp	r2, #0
 8008476:	d1d3      	bne.n	8008420 <_free_r+0x60>
 8008478:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800847c:	d21a      	bcs.n	80084b4 <_free_r+0xf4>
 800847e:	2201      	movs	r2, #1
 8008480:	08c0      	lsrs	r0, r0, #3
 8008482:	1081      	asrs	r1, r0, #2
 8008484:	408a      	lsls	r2, r1
 8008486:	6869      	ldr	r1, [r5, #4]
 8008488:	3001      	adds	r0, #1
 800848a:	430a      	orrs	r2, r1
 800848c:	606a      	str	r2, [r5, #4]
 800848e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8008492:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008496:	3a08      	subs	r2, #8
 8008498:	60da      	str	r2, [r3, #12]
 800849a:	6099      	str	r1, [r3, #8]
 800849c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80084a0:	60cb      	str	r3, [r1, #12]
 80084a2:	e7bd      	b.n	8008420 <_free_r+0x60>
 80084a4:	2200      	movs	r2, #0
 80084a6:	e7d2      	b.n	800844e <_free_r+0x8e>
 80084a8:	2201      	movs	r2, #1
 80084aa:	e7d0      	b.n	800844e <_free_r+0x8e>
 80084ac:	68fe      	ldr	r6, [r7, #12]
 80084ae:	60ce      	str	r6, [r1, #12]
 80084b0:	60b1      	str	r1, [r6, #8]
 80084b2:	e7db      	b.n	800846c <_free_r+0xac>
 80084b4:	0a42      	lsrs	r2, r0, #9
 80084b6:	2a04      	cmp	r2, #4
 80084b8:	d813      	bhi.n	80084e2 <_free_r+0x122>
 80084ba:	0982      	lsrs	r2, r0, #6
 80084bc:	3238      	adds	r2, #56	; 0x38
 80084be:	1c51      	adds	r1, r2, #1
 80084c0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80084c4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80084c8:	428e      	cmp	r6, r1
 80084ca:	d124      	bne.n	8008516 <_free_r+0x156>
 80084cc:	2001      	movs	r0, #1
 80084ce:	1092      	asrs	r2, r2, #2
 80084d0:	fa00 f202 	lsl.w	r2, r0, r2
 80084d4:	6868      	ldr	r0, [r5, #4]
 80084d6:	4302      	orrs	r2, r0
 80084d8:	606a      	str	r2, [r5, #4]
 80084da:	60de      	str	r6, [r3, #12]
 80084dc:	6099      	str	r1, [r3, #8]
 80084de:	60b3      	str	r3, [r6, #8]
 80084e0:	e7de      	b.n	80084a0 <_free_r+0xe0>
 80084e2:	2a14      	cmp	r2, #20
 80084e4:	d801      	bhi.n	80084ea <_free_r+0x12a>
 80084e6:	325b      	adds	r2, #91	; 0x5b
 80084e8:	e7e9      	b.n	80084be <_free_r+0xfe>
 80084ea:	2a54      	cmp	r2, #84	; 0x54
 80084ec:	d802      	bhi.n	80084f4 <_free_r+0x134>
 80084ee:	0b02      	lsrs	r2, r0, #12
 80084f0:	326e      	adds	r2, #110	; 0x6e
 80084f2:	e7e4      	b.n	80084be <_free_r+0xfe>
 80084f4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80084f8:	d802      	bhi.n	8008500 <_free_r+0x140>
 80084fa:	0bc2      	lsrs	r2, r0, #15
 80084fc:	3277      	adds	r2, #119	; 0x77
 80084fe:	e7de      	b.n	80084be <_free_r+0xfe>
 8008500:	f240 5154 	movw	r1, #1364	; 0x554
 8008504:	428a      	cmp	r2, r1
 8008506:	bf9a      	itte	ls
 8008508:	0c82      	lsrls	r2, r0, #18
 800850a:	327c      	addls	r2, #124	; 0x7c
 800850c:	227e      	movhi	r2, #126	; 0x7e
 800850e:	e7d6      	b.n	80084be <_free_r+0xfe>
 8008510:	6889      	ldr	r1, [r1, #8]
 8008512:	428e      	cmp	r6, r1
 8008514:	d004      	beq.n	8008520 <_free_r+0x160>
 8008516:	684a      	ldr	r2, [r1, #4]
 8008518:	f022 0203 	bic.w	r2, r2, #3
 800851c:	4290      	cmp	r0, r2
 800851e:	d3f7      	bcc.n	8008510 <_free_r+0x150>
 8008520:	68ce      	ldr	r6, [r1, #12]
 8008522:	e7da      	b.n	80084da <_free_r+0x11a>
 8008524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008528:	20000288 	.word	0x20000288
 800852c:	20000694 	.word	0x20000694
 8008530:	20000b28 	.word	0x20000b28
 8008534:	20000290 	.word	0x20000290

08008538 <__retarget_lock_acquire_recursive>:
 8008538:	4770      	bx	lr

0800853a <__retarget_lock_release_recursive>:
 800853a:	4770      	bx	lr

0800853c <memmove>:
 800853c:	4288      	cmp	r0, r1
 800853e:	b510      	push	{r4, lr}
 8008540:	eb01 0302 	add.w	r3, r1, r2
 8008544:	d803      	bhi.n	800854e <memmove+0x12>
 8008546:	1e42      	subs	r2, r0, #1
 8008548:	4299      	cmp	r1, r3
 800854a:	d10c      	bne.n	8008566 <memmove+0x2a>
 800854c:	bd10      	pop	{r4, pc}
 800854e:	4298      	cmp	r0, r3
 8008550:	d2f9      	bcs.n	8008546 <memmove+0xa>
 8008552:	1881      	adds	r1, r0, r2
 8008554:	1ad2      	subs	r2, r2, r3
 8008556:	42d3      	cmn	r3, r2
 8008558:	d100      	bne.n	800855c <memmove+0x20>
 800855a:	bd10      	pop	{r4, pc}
 800855c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008560:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008564:	e7f7      	b.n	8008556 <memmove+0x1a>
 8008566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800856e:	e7eb      	b.n	8008548 <memmove+0xc>

08008570 <_realloc_r>:
 8008570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	4682      	mov	sl, r0
 8008576:	460c      	mov	r4, r1
 8008578:	b929      	cbnz	r1, 8008586 <_realloc_r+0x16>
 800857a:	4611      	mov	r1, r2
 800857c:	b003      	add	sp, #12
 800857e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008582:	f7ff b917 	b.w	80077b4 <_malloc_r>
 8008586:	9201      	str	r2, [sp, #4]
 8008588:	f7ff fb2e 	bl	8007be8 <__malloc_lock>
 800858c:	9a01      	ldr	r2, [sp, #4]
 800858e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008592:	f102 080b 	add.w	r8, r2, #11
 8008596:	f1b8 0f16 	cmp.w	r8, #22
 800859a:	f1a4 0908 	sub.w	r9, r4, #8
 800859e:	f025 0603 	bic.w	r6, r5, #3
 80085a2:	d90a      	bls.n	80085ba <_realloc_r+0x4a>
 80085a4:	f038 0807 	bics.w	r8, r8, #7
 80085a8:	d509      	bpl.n	80085be <_realloc_r+0x4e>
 80085aa:	230c      	movs	r3, #12
 80085ac:	2700      	movs	r7, #0
 80085ae:	f8ca 3000 	str.w	r3, [sl]
 80085b2:	4638      	mov	r0, r7
 80085b4:	b003      	add	sp, #12
 80085b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ba:	f04f 0810 	mov.w	r8, #16
 80085be:	4590      	cmp	r8, r2
 80085c0:	d3f3      	bcc.n	80085aa <_realloc_r+0x3a>
 80085c2:	45b0      	cmp	r8, r6
 80085c4:	f340 8148 	ble.w	8008858 <_realloc_r+0x2e8>
 80085c8:	4ba9      	ldr	r3, [pc, #676]	; (8008870 <_realloc_r+0x300>)
 80085ca:	eb09 0106 	add.w	r1, r9, r6
 80085ce:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80085d2:	469b      	mov	fp, r3
 80085d4:	4571      	cmp	r1, lr
 80085d6:	684b      	ldr	r3, [r1, #4]
 80085d8:	d005      	beq.n	80085e6 <_realloc_r+0x76>
 80085da:	f023 0001 	bic.w	r0, r3, #1
 80085de:	4408      	add	r0, r1
 80085e0:	6840      	ldr	r0, [r0, #4]
 80085e2:	07c7      	lsls	r7, r0, #31
 80085e4:	d447      	bmi.n	8008676 <_realloc_r+0x106>
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	4571      	cmp	r1, lr
 80085ec:	eb06 0703 	add.w	r7, r6, r3
 80085f0:	d119      	bne.n	8008626 <_realloc_r+0xb6>
 80085f2:	f108 0010 	add.w	r0, r8, #16
 80085f6:	4287      	cmp	r7, r0
 80085f8:	db3f      	blt.n	800867a <_realloc_r+0x10a>
 80085fa:	eba7 0708 	sub.w	r7, r7, r8
 80085fe:	eb09 0308 	add.w	r3, r9, r8
 8008602:	f047 0701 	orr.w	r7, r7, #1
 8008606:	f8cb 3008 	str.w	r3, [fp, #8]
 800860a:	605f      	str	r7, [r3, #4]
 800860c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008610:	4650      	mov	r0, sl
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	ea43 0308 	orr.w	r3, r3, r8
 800861a:	f844 3c04 	str.w	r3, [r4, #-4]
 800861e:	f7ff fae9 	bl	8007bf4 <__malloc_unlock>
 8008622:	4627      	mov	r7, r4
 8008624:	e7c5      	b.n	80085b2 <_realloc_r+0x42>
 8008626:	45b8      	cmp	r8, r7
 8008628:	dc27      	bgt.n	800867a <_realloc_r+0x10a>
 800862a:	68cb      	ldr	r3, [r1, #12]
 800862c:	688a      	ldr	r2, [r1, #8]
 800862e:	60d3      	str	r3, [r2, #12]
 8008630:	609a      	str	r2, [r3, #8]
 8008632:	eba7 0008 	sub.w	r0, r7, r8
 8008636:	280f      	cmp	r0, #15
 8008638:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800863c:	eb09 0207 	add.w	r2, r9, r7
 8008640:	f240 810c 	bls.w	800885c <_realloc_r+0x2ec>
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	eb09 0108 	add.w	r1, r9, r8
 800864c:	ea43 0308 	orr.w	r3, r3, r8
 8008650:	f040 0001 	orr.w	r0, r0, #1
 8008654:	f8c9 3004 	str.w	r3, [r9, #4]
 8008658:	6048      	str	r0, [r1, #4]
 800865a:	6853      	ldr	r3, [r2, #4]
 800865c:	3108      	adds	r1, #8
 800865e:	f043 0301 	orr.w	r3, r3, #1
 8008662:	6053      	str	r3, [r2, #4]
 8008664:	4650      	mov	r0, sl
 8008666:	f7ff feab 	bl	80083c0 <_free_r>
 800866a:	4650      	mov	r0, sl
 800866c:	f7ff fac2 	bl	8007bf4 <__malloc_unlock>
 8008670:	f109 0708 	add.w	r7, r9, #8
 8008674:	e79d      	b.n	80085b2 <_realloc_r+0x42>
 8008676:	2300      	movs	r3, #0
 8008678:	4619      	mov	r1, r3
 800867a:	07e8      	lsls	r0, r5, #31
 800867c:	f100 8085 	bmi.w	800878a <_realloc_r+0x21a>
 8008680:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008684:	eba9 0505 	sub.w	r5, r9, r5
 8008688:	6868      	ldr	r0, [r5, #4]
 800868a:	f020 0003 	bic.w	r0, r0, #3
 800868e:	4430      	add	r0, r6
 8008690:	2900      	cmp	r1, #0
 8008692:	d077      	beq.n	8008784 <_realloc_r+0x214>
 8008694:	4571      	cmp	r1, lr
 8008696:	d151      	bne.n	800873c <_realloc_r+0x1cc>
 8008698:	4403      	add	r3, r0
 800869a:	f108 0110 	add.w	r1, r8, #16
 800869e:	428b      	cmp	r3, r1
 80086a0:	db70      	blt.n	8008784 <_realloc_r+0x214>
 80086a2:	462f      	mov	r7, r5
 80086a4:	68ea      	ldr	r2, [r5, #12]
 80086a6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80086aa:	60ca      	str	r2, [r1, #12]
 80086ac:	6091      	str	r1, [r2, #8]
 80086ae:	1f32      	subs	r2, r6, #4
 80086b0:	2a24      	cmp	r2, #36	; 0x24
 80086b2:	d83c      	bhi.n	800872e <_realloc_r+0x1be>
 80086b4:	2a13      	cmp	r2, #19
 80086b6:	d937      	bls.n	8008728 <_realloc_r+0x1b8>
 80086b8:	6821      	ldr	r1, [r4, #0]
 80086ba:	2a1b      	cmp	r2, #27
 80086bc:	60a9      	str	r1, [r5, #8]
 80086be:	6861      	ldr	r1, [r4, #4]
 80086c0:	60e9      	str	r1, [r5, #12]
 80086c2:	d81c      	bhi.n	80086fe <_realloc_r+0x18e>
 80086c4:	f105 0210 	add.w	r2, r5, #16
 80086c8:	f104 0108 	add.w	r1, r4, #8
 80086cc:	6808      	ldr	r0, [r1, #0]
 80086ce:	6010      	str	r0, [r2, #0]
 80086d0:	6848      	ldr	r0, [r1, #4]
 80086d2:	6050      	str	r0, [r2, #4]
 80086d4:	6889      	ldr	r1, [r1, #8]
 80086d6:	6091      	str	r1, [r2, #8]
 80086d8:	eba3 0308 	sub.w	r3, r3, r8
 80086dc:	eb05 0208 	add.w	r2, r5, r8
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	f8cb 2008 	str.w	r2, [fp, #8]
 80086e8:	6053      	str	r3, [r2, #4]
 80086ea:	686b      	ldr	r3, [r5, #4]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	ea43 0308 	orr.w	r3, r3, r8
 80086f4:	606b      	str	r3, [r5, #4]
 80086f6:	4650      	mov	r0, sl
 80086f8:	f7ff fa7c 	bl	8007bf4 <__malloc_unlock>
 80086fc:	e759      	b.n	80085b2 <_realloc_r+0x42>
 80086fe:	68a1      	ldr	r1, [r4, #8]
 8008700:	2a24      	cmp	r2, #36	; 0x24
 8008702:	6129      	str	r1, [r5, #16]
 8008704:	68e1      	ldr	r1, [r4, #12]
 8008706:	bf18      	it	ne
 8008708:	f105 0218 	addne.w	r2, r5, #24
 800870c:	6169      	str	r1, [r5, #20]
 800870e:	bf09      	itett	eq
 8008710:	6922      	ldreq	r2, [r4, #16]
 8008712:	f104 0110 	addne.w	r1, r4, #16
 8008716:	61aa      	streq	r2, [r5, #24]
 8008718:	6960      	ldreq	r0, [r4, #20]
 800871a:	bf02      	ittt	eq
 800871c:	f105 0220 	addeq.w	r2, r5, #32
 8008720:	f104 0118 	addeq.w	r1, r4, #24
 8008724:	61e8      	streq	r0, [r5, #28]
 8008726:	e7d1      	b.n	80086cc <_realloc_r+0x15c>
 8008728:	463a      	mov	r2, r7
 800872a:	4621      	mov	r1, r4
 800872c:	e7ce      	b.n	80086cc <_realloc_r+0x15c>
 800872e:	4621      	mov	r1, r4
 8008730:	4638      	mov	r0, r7
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	f7ff ff02 	bl	800853c <memmove>
 8008738:	9b01      	ldr	r3, [sp, #4]
 800873a:	e7cd      	b.n	80086d8 <_realloc_r+0x168>
 800873c:	18c7      	adds	r7, r0, r3
 800873e:	45b8      	cmp	r8, r7
 8008740:	dc20      	bgt.n	8008784 <_realloc_r+0x214>
 8008742:	68cb      	ldr	r3, [r1, #12]
 8008744:	688a      	ldr	r2, [r1, #8]
 8008746:	60d3      	str	r3, [r2, #12]
 8008748:	609a      	str	r2, [r3, #8]
 800874a:	4628      	mov	r0, r5
 800874c:	68eb      	ldr	r3, [r5, #12]
 800874e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008752:	60d3      	str	r3, [r2, #12]
 8008754:	609a      	str	r2, [r3, #8]
 8008756:	1f32      	subs	r2, r6, #4
 8008758:	2a24      	cmp	r2, #36	; 0x24
 800875a:	d843      	bhi.n	80087e4 <_realloc_r+0x274>
 800875c:	2a13      	cmp	r2, #19
 800875e:	d93f      	bls.n	80087e0 <_realloc_r+0x270>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	2a1b      	cmp	r2, #27
 8008764:	60ab      	str	r3, [r5, #8]
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	60eb      	str	r3, [r5, #12]
 800876a:	d824      	bhi.n	80087b6 <_realloc_r+0x246>
 800876c:	f105 0010 	add.w	r0, r5, #16
 8008770:	f104 0308 	add.w	r3, r4, #8
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	6002      	str	r2, [r0, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	6042      	str	r2, [r0, #4]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	6083      	str	r3, [r0, #8]
 8008780:	46a9      	mov	r9, r5
 8008782:	e756      	b.n	8008632 <_realloc_r+0xc2>
 8008784:	4580      	cmp	r8, r0
 8008786:	4607      	mov	r7, r0
 8008788:	dddf      	ble.n	800874a <_realloc_r+0x1da>
 800878a:	4611      	mov	r1, r2
 800878c:	4650      	mov	r0, sl
 800878e:	f7ff f811 	bl	80077b4 <_malloc_r>
 8008792:	4607      	mov	r7, r0
 8008794:	2800      	cmp	r0, #0
 8008796:	d0ae      	beq.n	80086f6 <_realloc_r+0x186>
 8008798:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800879c:	f1a0 0208 	sub.w	r2, r0, #8
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	444b      	add	r3, r9
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d120      	bne.n	80087ec <_realloc_r+0x27c>
 80087aa:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80087ae:	f027 0703 	bic.w	r7, r7, #3
 80087b2:	4437      	add	r7, r6
 80087b4:	e73d      	b.n	8008632 <_realloc_r+0xc2>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	2a24      	cmp	r2, #36	; 0x24
 80087ba:	612b      	str	r3, [r5, #16]
 80087bc:	68e3      	ldr	r3, [r4, #12]
 80087be:	bf18      	it	ne
 80087c0:	f105 0018 	addne.w	r0, r5, #24
 80087c4:	616b      	str	r3, [r5, #20]
 80087c6:	bf09      	itett	eq
 80087c8:	6923      	ldreq	r3, [r4, #16]
 80087ca:	f104 0310 	addne.w	r3, r4, #16
 80087ce:	61ab      	streq	r3, [r5, #24]
 80087d0:	6962      	ldreq	r2, [r4, #20]
 80087d2:	bf02      	ittt	eq
 80087d4:	f105 0020 	addeq.w	r0, r5, #32
 80087d8:	f104 0318 	addeq.w	r3, r4, #24
 80087dc:	61ea      	streq	r2, [r5, #28]
 80087de:	e7c9      	b.n	8008774 <_realloc_r+0x204>
 80087e0:	4623      	mov	r3, r4
 80087e2:	e7c7      	b.n	8008774 <_realloc_r+0x204>
 80087e4:	4621      	mov	r1, r4
 80087e6:	f7ff fea9 	bl	800853c <memmove>
 80087ea:	e7c9      	b.n	8008780 <_realloc_r+0x210>
 80087ec:	1f32      	subs	r2, r6, #4
 80087ee:	2a24      	cmp	r2, #36	; 0x24
 80087f0:	d82e      	bhi.n	8008850 <_realloc_r+0x2e0>
 80087f2:	2a13      	cmp	r2, #19
 80087f4:	d929      	bls.n	800884a <_realloc_r+0x2da>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	2a1b      	cmp	r2, #27
 80087fa:	6003      	str	r3, [r0, #0]
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	6043      	str	r3, [r0, #4]
 8008800:	d80e      	bhi.n	8008820 <_realloc_r+0x2b0>
 8008802:	f100 0308 	add.w	r3, r0, #8
 8008806:	f104 0208 	add.w	r2, r4, #8
 800880a:	6811      	ldr	r1, [r2, #0]
 800880c:	6019      	str	r1, [r3, #0]
 800880e:	6851      	ldr	r1, [r2, #4]
 8008810:	6059      	str	r1, [r3, #4]
 8008812:	6892      	ldr	r2, [r2, #8]
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	4621      	mov	r1, r4
 8008818:	4650      	mov	r0, sl
 800881a:	f7ff fdd1 	bl	80083c0 <_free_r>
 800881e:	e76a      	b.n	80086f6 <_realloc_r+0x186>
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	2a24      	cmp	r2, #36	; 0x24
 8008824:	6083      	str	r3, [r0, #8]
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	bf18      	it	ne
 800882a:	f104 0210 	addne.w	r2, r4, #16
 800882e:	60c3      	str	r3, [r0, #12]
 8008830:	bf09      	itett	eq
 8008832:	6923      	ldreq	r3, [r4, #16]
 8008834:	f100 0310 	addne.w	r3, r0, #16
 8008838:	6103      	streq	r3, [r0, #16]
 800883a:	6961      	ldreq	r1, [r4, #20]
 800883c:	bf02      	ittt	eq
 800883e:	f100 0318 	addeq.w	r3, r0, #24
 8008842:	f104 0218 	addeq.w	r2, r4, #24
 8008846:	6141      	streq	r1, [r0, #20]
 8008848:	e7df      	b.n	800880a <_realloc_r+0x29a>
 800884a:	4603      	mov	r3, r0
 800884c:	4622      	mov	r2, r4
 800884e:	e7dc      	b.n	800880a <_realloc_r+0x29a>
 8008850:	4621      	mov	r1, r4
 8008852:	f7ff fe73 	bl	800853c <memmove>
 8008856:	e7de      	b.n	8008816 <_realloc_r+0x2a6>
 8008858:	4637      	mov	r7, r6
 800885a:	e6ea      	b.n	8008632 <_realloc_r+0xc2>
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	431f      	orrs	r7, r3
 8008862:	f8c9 7004 	str.w	r7, [r9, #4]
 8008866:	6853      	ldr	r3, [r2, #4]
 8008868:	f043 0301 	orr.w	r3, r3, #1
 800886c:	6053      	str	r3, [r2, #4]
 800886e:	e6fc      	b.n	800866a <_realloc_r+0xfa>
 8008870:	20000288 	.word	0x20000288

08008874 <pow>:
 8008874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	b08f      	sub	sp, #60	; 0x3c
 800887a:	461d      	mov	r5, r3
 800887c:	4680      	mov	r8, r0
 800887e:	4689      	mov	r9, r1
 8008880:	4614      	mov	r4, r2
 8008882:	f000 f95d 	bl	8008b40 <__ieee754_pow>
 8008886:	4fa5      	ldr	r7, [pc, #660]	; (8008b1c <pow+0x2a8>)
 8008888:	e9cd 0100 	strd	r0, r1, [sp]
 800888c:	f997 3000 	ldrsb.w	r3, [r7]
 8008890:	463e      	mov	r6, r7
 8008892:	9302      	str	r3, [sp, #8]
 8008894:	3301      	adds	r3, #1
 8008896:	d05f      	beq.n	8008958 <pow+0xe4>
 8008898:	4622      	mov	r2, r4
 800889a:	462b      	mov	r3, r5
 800889c:	4620      	mov	r0, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	f7f8 f8b0 	bl	8000a04 <__aeabi_dcmpun>
 80088a4:	4682      	mov	sl, r0
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d156      	bne.n	8008958 <pow+0xe4>
 80088aa:	4642      	mov	r2, r8
 80088ac:	464b      	mov	r3, r9
 80088ae:	4640      	mov	r0, r8
 80088b0:	4649      	mov	r1, r9
 80088b2:	f7f8 f8a7 	bl	8000a04 <__aeabi_dcmpun>
 80088b6:	9003      	str	r0, [sp, #12]
 80088b8:	b1e8      	cbz	r0, 80088f6 <pow+0x82>
 80088ba:	2200      	movs	r2, #0
 80088bc:	2300      	movs	r3, #0
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f8 f86d 	bl	80009a0 <__aeabi_dcmpeq>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d046      	beq.n	8008958 <pow+0xe4>
 80088ca:	2301      	movs	r3, #1
 80088cc:	2200      	movs	r2, #0
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	4b93      	ldr	r3, [pc, #588]	; (8008b20 <pow+0x2ac>)
 80088d2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80088d6:	9305      	str	r3, [sp, #20]
 80088d8:	4b92      	ldr	r3, [pc, #584]	; (8008b24 <pow+0x2b0>)
 80088da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80088de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d031      	beq.n	8008950 <pow+0xdc>
 80088ec:	a804      	add	r0, sp, #16
 80088ee:	f000 fece 	bl	800968e <matherr>
 80088f2:	bb38      	cbnz	r0, 8008944 <pow+0xd0>
 80088f4:	e058      	b.n	80089a8 <pow+0x134>
 80088f6:	f04f 0a00 	mov.w	sl, #0
 80088fa:	f04f 0b00 	mov.w	fp, #0
 80088fe:	4652      	mov	r2, sl
 8008900:	465b      	mov	r3, fp
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f8 f84b 	bl	80009a0 <__aeabi_dcmpeq>
 800890a:	2800      	cmp	r0, #0
 800890c:	d051      	beq.n	80089b2 <pow+0x13e>
 800890e:	4652      	mov	r2, sl
 8008910:	465b      	mov	r3, fp
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f7f8 f843 	bl	80009a0 <__aeabi_dcmpeq>
 800891a:	4606      	mov	r6, r0
 800891c:	b308      	cbz	r0, 8008962 <pow+0xee>
 800891e:	2301      	movs	r3, #1
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	4b7f      	ldr	r3, [pc, #508]	; (8008b20 <pow+0x2ac>)
 8008924:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008930:	930c      	str	r3, [sp, #48]	; 0x30
 8008932:	9b02      	ldr	r3, [sp, #8]
 8008934:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0d7      	beq.n	80088ec <pow+0x78>
 800893c:	2200      	movs	r2, #0
 800893e:	4b79      	ldr	r3, [pc, #484]	; (8008b24 <pow+0x2b0>)
 8008940:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008946:	b11b      	cbz	r3, 8008950 <pow+0xdc>
 8008948:	f000 ffa8 	bl	800989c <__errno>
 800894c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800894e:	6003      	str	r3, [r0, #0]
 8008950:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8008954:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008958:	e9dd 0100 	ldrd	r0, r1, [sp]
 800895c:	b00f      	add	sp, #60	; 0x3c
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	4620      	mov	r0, r4
 8008964:	4629      	mov	r1, r5
 8008966:	f000 fe8c 	bl	8009682 <finite>
 800896a:	2800      	cmp	r0, #0
 800896c:	d0f4      	beq.n	8008958 <pow+0xe4>
 800896e:	4652      	mov	r2, sl
 8008970:	465b      	mov	r3, fp
 8008972:	4620      	mov	r0, r4
 8008974:	4629      	mov	r1, r5
 8008976:	f7f8 f81d 	bl	80009b4 <__aeabi_dcmplt>
 800897a:	2800      	cmp	r0, #0
 800897c:	d0ec      	beq.n	8008958 <pow+0xe4>
 800897e:	2301      	movs	r3, #1
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	4b67      	ldr	r3, [pc, #412]	; (8008b20 <pow+0x2ac>)
 8008984:	960c      	str	r6, [sp, #48]	; 0x30
 8008986:	9305      	str	r3, [sp, #20]
 8008988:	f997 3000 	ldrsb.w	r3, [r7]
 800898c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008990:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008994:	b913      	cbnz	r3, 800899c <pow+0x128>
 8008996:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800899a:	e7a7      	b.n	80088ec <pow+0x78>
 800899c:	2000      	movs	r0, #0
 800899e:	4962      	ldr	r1, [pc, #392]	; (8008b28 <pow+0x2b4>)
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80089a6:	d1a1      	bne.n	80088ec <pow+0x78>
 80089a8:	f000 ff78 	bl	800989c <__errno>
 80089ac:	2321      	movs	r3, #33	; 0x21
 80089ae:	6003      	str	r3, [r0, #0]
 80089b0:	e7c8      	b.n	8008944 <pow+0xd0>
 80089b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b6:	f000 fe64 	bl	8009682 <finite>
 80089ba:	9002      	str	r0, [sp, #8]
 80089bc:	2800      	cmp	r0, #0
 80089be:	d17f      	bne.n	8008ac0 <pow+0x24c>
 80089c0:	4640      	mov	r0, r8
 80089c2:	4649      	mov	r1, r9
 80089c4:	f000 fe5d 	bl	8009682 <finite>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d079      	beq.n	8008ac0 <pow+0x24c>
 80089cc:	4620      	mov	r0, r4
 80089ce:	4629      	mov	r1, r5
 80089d0:	f000 fe57 	bl	8009682 <finite>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d073      	beq.n	8008ac0 <pow+0x24c>
 80089d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7f8 f810 	bl	8000a04 <__aeabi_dcmpun>
 80089e4:	f997 7000 	ldrsb.w	r7, [r7]
 80089e8:	4b4d      	ldr	r3, [pc, #308]	; (8008b20 <pow+0x2ac>)
 80089ea:	b1a0      	cbz	r0, 8008a16 <pow+0x1a2>
 80089ec:	2201      	movs	r2, #1
 80089ee:	9305      	str	r3, [sp, #20]
 80089f0:	9b02      	ldr	r3, [sp, #8]
 80089f2:	9204      	str	r2, [sp, #16]
 80089f4:	930c      	str	r3, [sp, #48]	; 0x30
 80089f6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80089fa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80089fe:	2f00      	cmp	r7, #0
 8008a00:	d0c9      	beq.n	8008996 <pow+0x122>
 8008a02:	4652      	mov	r2, sl
 8008a04:	465b      	mov	r3, fp
 8008a06:	4650      	mov	r0, sl
 8008a08:	4659      	mov	r1, fp
 8008a0a:	f7f7 fe8b 	bl	8000724 <__aeabi_ddiv>
 8008a0e:	2f02      	cmp	r7, #2
 8008a10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a14:	e7c7      	b.n	80089a6 <pow+0x132>
 8008a16:	2203      	movs	r2, #3
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	9204      	str	r2, [sp, #16]
 8008a1c:	900c      	str	r0, [sp, #48]	; 0x30
 8008a1e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008a22:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008a26:	bb57      	cbnz	r7, 8008a7e <pow+0x20a>
 8008a28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008a2c:	4b3f      	ldr	r3, [pc, #252]	; (8008b2c <pow+0x2b8>)
 8008a2e:	4640      	mov	r0, r8
 8008a30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a34:	4649      	mov	r1, r9
 8008a36:	4652      	mov	r2, sl
 8008a38:	465b      	mov	r3, fp
 8008a3a:	f7f7 ffbb 	bl	80009b4 <__aeabi_dcmplt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d064      	beq.n	8008b0c <pow+0x298>
 8008a42:	2200      	movs	r2, #0
 8008a44:	4b3a      	ldr	r3, [pc, #232]	; (8008b30 <pow+0x2bc>)
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f7 fd41 	bl	80004d0 <__aeabi_dmul>
 8008a4e:	4604      	mov	r4, r0
 8008a50:	460d      	mov	r5, r1
 8008a52:	f000 fe25 	bl	80096a0 <rint>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f7 ff9f 	bl	80009a0 <__aeabi_dcmpeq>
 8008a62:	b920      	cbnz	r0, 8008a6e <pow+0x1fa>
 8008a64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008a68:	4b32      	ldr	r3, [pc, #200]	; (8008b34 <pow+0x2c0>)
 8008a6a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a6e:	f996 3000 	ldrsb.w	r3, [r6]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d14a      	bne.n	8008b0c <pow+0x298>
 8008a76:	f000 ff11 	bl	800989c <__errno>
 8008a7a:	2322      	movs	r3, #34	; 0x22
 8008a7c:	e797      	b.n	80089ae <pow+0x13a>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4b2d      	ldr	r3, [pc, #180]	; (8008b38 <pow+0x2c4>)
 8008a82:	4640      	mov	r0, r8
 8008a84:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	465b      	mov	r3, fp
 8008a8e:	f7f7 ff91 	bl	80009b4 <__aeabi_dcmplt>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d0eb      	beq.n	8008a6e <pow+0x1fa>
 8008a96:	2200      	movs	r2, #0
 8008a98:	4b25      	ldr	r3, [pc, #148]	; (8008b30 <pow+0x2bc>)
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7f7 fd17 	bl	80004d0 <__aeabi_dmul>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	f000 fdfb 	bl	80096a0 <rint>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f7 ff75 	bl	80009a0 <__aeabi_dcmpeq>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1d9      	bne.n	8008a6e <pow+0x1fa>
 8008aba:	2200      	movs	r2, #0
 8008abc:	4b1a      	ldr	r3, [pc, #104]	; (8008b28 <pow+0x2b4>)
 8008abe:	e7d4      	b.n	8008a6a <pow+0x1f6>
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f7f7 ff6a 	bl	80009a0 <__aeabi_dcmpeq>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f43f af43 	beq.w	8008958 <pow+0xe4>
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f000 fdd4 	bl	8009682 <finite>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f43f af3c 	beq.w	8008958 <pow+0xe4>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	f000 fdcd 	bl	8009682 <finite>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f43f af35 	beq.w	8008958 <pow+0xe4>
 8008aee:	2304      	movs	r3, #4
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <pow+0x2ac>)
 8008af4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008af8:	9305      	str	r3, [sp, #20]
 8008afa:	2300      	movs	r3, #0
 8008afc:	2400      	movs	r4, #0
 8008afe:	930c      	str	r3, [sp, #48]	; 0x30
 8008b00:	2300      	movs	r3, #0
 8008b02:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008b06:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8008b0a:	e7b0      	b.n	8008a6e <pow+0x1fa>
 8008b0c:	a804      	add	r0, sp, #16
 8008b0e:	f000 fdbe 	bl	800968e <matherr>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	f47f af16 	bne.w	8008944 <pow+0xd0>
 8008b18:	e7ad      	b.n	8008a76 <pow+0x202>
 8008b1a:	bf00      	nop
 8008b1c:	20000698 	.word	0x20000698
 8008b20:	0800d0fc 	.word	0x0800d0fc
 8008b24:	3ff00000 	.word	0x3ff00000
 8008b28:	fff00000 	.word	0xfff00000
 8008b2c:	47efffff 	.word	0x47efffff
 8008b30:	3fe00000 	.word	0x3fe00000
 8008b34:	c7efffff 	.word	0xc7efffff
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	00000000 	.word	0x00000000

08008b40 <__ieee754_pow>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	b093      	sub	sp, #76	; 0x4c
 8008b46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b4a:	9e03      	ldr	r6, [sp, #12]
 8008b4c:	9a02      	ldr	r2, [sp, #8]
 8008b4e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008b52:	ea55 0302 	orrs.w	r3, r5, r2
 8008b56:	4607      	mov	r7, r0
 8008b58:	4688      	mov	r8, r1
 8008b5a:	4682      	mov	sl, r0
 8008b5c:	4689      	mov	r9, r1
 8008b5e:	f000 849e 	beq.w	800949e <__ieee754_pow+0x95e>
 8008b62:	4b77      	ldr	r3, [pc, #476]	; (8008d40 <__ieee754_pow+0x200>)
 8008b64:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	dc09      	bgt.n	8008b80 <__ieee754_pow+0x40>
 8008b6c:	d103      	bne.n	8008b76 <__ieee754_pow+0x36>
 8008b6e:	b938      	cbnz	r0, 8008b80 <__ieee754_pow+0x40>
 8008b70:	42a5      	cmp	r5, r4
 8008b72:	dc0d      	bgt.n	8008b90 <__ieee754_pow+0x50>
 8008b74:	e001      	b.n	8008b7a <__ieee754_pow+0x3a>
 8008b76:	429d      	cmp	r5, r3
 8008b78:	dc02      	bgt.n	8008b80 <__ieee754_pow+0x40>
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	d10e      	bne.n	8008b9c <__ieee754_pow+0x5c>
 8008b7e:	b16a      	cbz	r2, 8008b9c <__ieee754_pow+0x5c>
 8008b80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008b84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b88:	ea54 030a 	orrs.w	r3, r4, sl
 8008b8c:	f000 8487 	beq.w	800949e <__ieee754_pow+0x95e>
 8008b90:	486c      	ldr	r0, [pc, #432]	; (8008d44 <__ieee754_pow+0x204>)
 8008b92:	b013      	add	sp, #76	; 0x4c
 8008b94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	f000 bd7c 	b.w	8009694 <nan>
 8008b9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ba0:	da4f      	bge.n	8008c42 <__ieee754_pow+0x102>
 8008ba2:	4b69      	ldr	r3, [pc, #420]	; (8008d48 <__ieee754_pow+0x208>)
 8008ba4:	429d      	cmp	r5, r3
 8008ba6:	dc4a      	bgt.n	8008c3e <__ieee754_pow+0xfe>
 8008ba8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008bac:	429d      	cmp	r5, r3
 8008bae:	dd48      	ble.n	8008c42 <__ieee754_pow+0x102>
 8008bb0:	152b      	asrs	r3, r5, #20
 8008bb2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008bb6:	2b14      	cmp	r3, #20
 8008bb8:	dd24      	ble.n	8008c04 <__ieee754_pow+0xc4>
 8008bba:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008bbe:	fa22 f103 	lsr.w	r1, r2, r3
 8008bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d13b      	bne.n	8008c42 <__ieee754_pow+0x102>
 8008bca:	f001 0101 	and.w	r1, r1, #1
 8008bce:	f1c1 0302 	rsb	r3, r1, #2
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	d156      	bne.n	8008c86 <__ieee754_pow+0x146>
 8008bd8:	4b59      	ldr	r3, [pc, #356]	; (8008d40 <__ieee754_pow+0x200>)
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	d122      	bne.n	8008c24 <__ieee754_pow+0xe4>
 8008bde:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008be2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008be6:	ea53 030a 	orrs.w	r3, r3, sl
 8008bea:	f000 8458 	beq.w	800949e <__ieee754_pow+0x95e>
 8008bee:	4b57      	ldr	r3, [pc, #348]	; (8008d4c <__ieee754_pow+0x20c>)
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	dd28      	ble.n	8008c46 <__ieee754_pow+0x106>
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	f280 8456 	bge.w	80094a6 <__ieee754_pow+0x966>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	b013      	add	sp, #76	; 0x4c
 8008c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	d13c      	bne.n	8008c82 <__ieee754_pow+0x142>
 8008c08:	f1c3 0314 	rsb	r3, r3, #20
 8008c0c:	fa45 f103 	asr.w	r1, r5, r3
 8008c10:	fa01 f303 	lsl.w	r3, r1, r3
 8008c14:	429d      	cmp	r5, r3
 8008c16:	f040 844e 	bne.w	80094b6 <__ieee754_pow+0x976>
 8008c1a:	f001 0101 	and.w	r1, r1, #1
 8008c1e:	f1c1 0302 	rsb	r3, r1, #2
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4b4a      	ldr	r3, [pc, #296]	; (8008d50 <__ieee754_pow+0x210>)
 8008c26:	429d      	cmp	r5, r3
 8008c28:	d114      	bne.n	8008c54 <__ieee754_pow+0x114>
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	f280 843f 	bge.w	80094ae <__ieee754_pow+0x96e>
 8008c30:	463a      	mov	r2, r7
 8008c32:	4643      	mov	r3, r8
 8008c34:	2000      	movs	r0, #0
 8008c36:	4946      	ldr	r1, [pc, #280]	; (8008d50 <__ieee754_pow+0x210>)
 8008c38:	f7f7 fd74 	bl	8000724 <__aeabi_ddiv>
 8008c3c:	e7df      	b.n	8008bfe <__ieee754_pow+0xbe>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e7c7      	b.n	8008bd2 <__ieee754_pow+0x92>
 8008c42:	2300      	movs	r3, #0
 8008c44:	e7c5      	b.n	8008bd2 <__ieee754_pow+0x92>
 8008c46:	2e00      	cmp	r6, #0
 8008c48:	dad7      	bge.n	8008bfa <__ieee754_pow+0xba>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	9802      	ldr	r0, [sp, #8]
 8008c4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c52:	e7d4      	b.n	8008bfe <__ieee754_pow+0xbe>
 8008c54:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8008c58:	d106      	bne.n	8008c68 <__ieee754_pow+0x128>
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4643      	mov	r3, r8
 8008c5e:	4638      	mov	r0, r7
 8008c60:	4641      	mov	r1, r8
 8008c62:	f7f7 fc35 	bl	80004d0 <__aeabi_dmul>
 8008c66:	e7ca      	b.n	8008bfe <__ieee754_pow+0xbe>
 8008c68:	4b3a      	ldr	r3, [pc, #232]	; (8008d54 <__ieee754_pow+0x214>)
 8008c6a:	429e      	cmp	r6, r3
 8008c6c:	d10b      	bne.n	8008c86 <__ieee754_pow+0x146>
 8008c6e:	f1b9 0f00 	cmp.w	r9, #0
 8008c72:	db08      	blt.n	8008c86 <__ieee754_pow+0x146>
 8008c74:	4638      	mov	r0, r7
 8008c76:	4641      	mov	r1, r8
 8008c78:	b013      	add	sp, #76	; 0x4c
 8008c7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7e:	f000 bc51 	b.w	8009524 <__ieee754_sqrt>
 8008c82:	2300      	movs	r3, #0
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	4638      	mov	r0, r7
 8008c88:	4641      	mov	r1, r8
 8008c8a:	f000 fcf7 	bl	800967c <fabs>
 8008c8e:	f1ba 0f00 	cmp.w	sl, #0
 8008c92:	d125      	bne.n	8008ce0 <__ieee754_pow+0x1a0>
 8008c94:	b124      	cbz	r4, 8008ca0 <__ieee754_pow+0x160>
 8008c96:	4b2e      	ldr	r3, [pc, #184]	; (8008d50 <__ieee754_pow+0x210>)
 8008c98:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d11f      	bne.n	8008ce0 <__ieee754_pow+0x1a0>
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	da05      	bge.n	8008cb0 <__ieee754_pow+0x170>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	2000      	movs	r0, #0
 8008caa:	4929      	ldr	r1, [pc, #164]	; (8008d50 <__ieee754_pow+0x210>)
 8008cac:	f7f7 fd3a 	bl	8000724 <__aeabi_ddiv>
 8008cb0:	f1b9 0f00 	cmp.w	r9, #0
 8008cb4:	daa3      	bge.n	8008bfe <__ieee754_pow+0xbe>
 8008cb6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008cc0:	4323      	orrs	r3, r4
 8008cc2:	d106      	bne.n	8008cd2 <__ieee754_pow+0x192>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	f7f7 fa4e 	bl	8000168 <__aeabi_dsub>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e7b2      	b.n	8008c38 <__ieee754_pow+0xf8>
 8008cd2:	9b00      	ldr	r3, [sp, #0]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d192      	bne.n	8008bfe <__ieee754_pow+0xbe>
 8008cd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cdc:	4619      	mov	r1, r3
 8008cde:	e78e      	b.n	8008bfe <__ieee754_pow+0xbe>
 8008ce0:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8008ce4:	f109 33ff 	add.w	r3, r9, #4294967295
 8008ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8008cea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cec:	9b00      	ldr	r3, [sp, #0]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	d104      	bne.n	8008cfc <__ieee754_pow+0x1bc>
 8008cf2:	463a      	mov	r2, r7
 8008cf4:	4643      	mov	r3, r8
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	e7e5      	b.n	8008cc8 <__ieee754_pow+0x188>
 8008cfc:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <__ieee754_pow+0x218>)
 8008cfe:	429d      	cmp	r5, r3
 8008d00:	f340 80fc 	ble.w	8008efc <__ieee754_pow+0x3bc>
 8008d04:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d08:	429d      	cmp	r5, r3
 8008d0a:	dd0b      	ble.n	8008d24 <__ieee754_pow+0x1e4>
 8008d0c:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <__ieee754_pow+0x20c>)
 8008d0e:	429c      	cmp	r4, r3
 8008d10:	dc0e      	bgt.n	8008d30 <__ieee754_pow+0x1f0>
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	f6bf af71 	bge.w	8008bfa <__ieee754_pow+0xba>
 8008d18:	a307      	add	r3, pc, #28	; (adr r3, 8008d38 <__ieee754_pow+0x1f8>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4619      	mov	r1, r3
 8008d22:	e79e      	b.n	8008c62 <__ieee754_pow+0x122>
 8008d24:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <__ieee754_pow+0x21c>)
 8008d26:	429c      	cmp	r4, r3
 8008d28:	ddf3      	ble.n	8008d12 <__ieee754_pow+0x1d2>
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <__ieee754_pow+0x210>)
 8008d2c:	429c      	cmp	r4, r3
 8008d2e:	dd17      	ble.n	8008d60 <__ieee754_pow+0x220>
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	dcf1      	bgt.n	8008d18 <__ieee754_pow+0x1d8>
 8008d34:	e761      	b.n	8008bfa <__ieee754_pow+0xba>
 8008d36:	bf00      	nop
 8008d38:	8800759c 	.word	0x8800759c
 8008d3c:	7e37e43c 	.word	0x7e37e43c
 8008d40:	7ff00000 	.word	0x7ff00000
 8008d44:	0800ce9d 	.word	0x0800ce9d
 8008d48:	433fffff 	.word	0x433fffff
 8008d4c:	3fefffff 	.word	0x3fefffff
 8008d50:	3ff00000 	.word	0x3ff00000
 8008d54:	3fe00000 	.word	0x3fe00000
 8008d58:	41e00000 	.word	0x41e00000
 8008d5c:	3feffffe 	.word	0x3feffffe
 8008d60:	2200      	movs	r2, #0
 8008d62:	4b61      	ldr	r3, [pc, #388]	; (8008ee8 <__ieee754_pow+0x3a8>)
 8008d64:	f7f7 fa00 	bl	8000168 <__aeabi_dsub>
 8008d68:	a355      	add	r3, pc, #340	; (adr r3, 8008ec0 <__ieee754_pow+0x380>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	f7f7 fbad 	bl	80004d0 <__aeabi_dmul>
 8008d76:	a354      	add	r3, pc, #336	; (adr r3, 8008ec8 <__ieee754_pow+0x388>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	460f      	mov	r7, r1
 8008d80:	4620      	mov	r0, r4
 8008d82:	4629      	mov	r1, r5
 8008d84:	f7f7 fba4 	bl	80004d0 <__aeabi_dmul>
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4682      	mov	sl, r0
 8008d8c:	468b      	mov	fp, r1
 8008d8e:	4b57      	ldr	r3, [pc, #348]	; (8008eec <__ieee754_pow+0x3ac>)
 8008d90:	4620      	mov	r0, r4
 8008d92:	4629      	mov	r1, r5
 8008d94:	f7f7 fb9c 	bl	80004d0 <__aeabi_dmul>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	a14c      	add	r1, pc, #304	; (adr r1, 8008ed0 <__ieee754_pow+0x390>)
 8008d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da2:	f7f7 f9e1 	bl	8000168 <__aeabi_dsub>
 8008da6:	4622      	mov	r2, r4
 8008da8:	462b      	mov	r3, r5
 8008daa:	f7f7 fb91 	bl	80004d0 <__aeabi_dmul>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	2000      	movs	r0, #0
 8008db4:	494e      	ldr	r1, [pc, #312]	; (8008ef0 <__ieee754_pow+0x3b0>)
 8008db6:	f7f7 f9d7 	bl	8000168 <__aeabi_dsub>
 8008dba:	4622      	mov	r2, r4
 8008dbc:	462b      	mov	r3, r5
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 fb83 	bl	80004d0 <__aeabi_dmul>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	f7f7 fb7d 	bl	80004d0 <__aeabi_dmul>
 8008dd6:	a340      	add	r3, pc, #256	; (adr r3, 8008ed8 <__ieee754_pow+0x398>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7f7 fb78 	bl	80004d0 <__aeabi_dmul>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4650      	mov	r0, sl
 8008de6:	4659      	mov	r1, fp
 8008de8:	f7f7 f9be 	bl	8000168 <__aeabi_dsub>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4604      	mov	r4, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	4630      	mov	r0, r6
 8008df6:	4639      	mov	r1, r7
 8008df8:	f7f7 f9b8 	bl	800016c <__adddf3>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	468b      	mov	fp, r1
 8008e00:	4682      	mov	sl, r0
 8008e02:	4632      	mov	r2, r6
 8008e04:	463b      	mov	r3, r7
 8008e06:	f7f7 f9af 	bl	8000168 <__aeabi_dsub>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 f9a9 	bl	8000168 <__aeabi_dsub>
 8008e16:	9b00      	ldr	r3, [sp, #0]
 8008e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	bf0c      	ite	eq
 8008e24:	4c33      	ldreq	r4, [pc, #204]	; (8008ef4 <__ieee754_pow+0x3b4>)
 8008e26:	4c30      	ldrne	r4, [pc, #192]	; (8008ee8 <__ieee754_pow+0x3a8>)
 8008e28:	4606      	mov	r6, r0
 8008e2a:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008e2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e32:	2400      	movs	r4, #0
 8008e34:	460f      	mov	r7, r1
 8008e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	f7f7 f993 	bl	8000168 <__aeabi_dsub>
 8008e42:	4652      	mov	r2, sl
 8008e44:	465b      	mov	r3, fp
 8008e46:	f7f7 fb43 	bl	80004d0 <__aeabi_dmul>
 8008e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e4e:	4680      	mov	r8, r0
 8008e50:	4689      	mov	r9, r1
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fb3b 	bl	80004d0 <__aeabi_dmul>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 f983 	bl	800016c <__adddf3>
 8008e66:	4622      	mov	r2, r4
 8008e68:	462b      	mov	r3, r5
 8008e6a:	4680      	mov	r8, r0
 8008e6c:	4689      	mov	r9, r1
 8008e6e:	4650      	mov	r0, sl
 8008e70:	4659      	mov	r1, fp
 8008e72:	f7f7 fb2d 	bl	80004d0 <__aeabi_dmul>
 8008e76:	4604      	mov	r4, r0
 8008e78:	460d      	mov	r5, r1
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008e86:	f7f7 f971 	bl	800016c <__adddf3>
 8008e8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ef8 <__ieee754_pow+0x3b8>)
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	460f      	mov	r7, r1
 8008e92:	460e      	mov	r6, r1
 8008e94:	f340 82da 	ble.w	800944c <__ieee754_pow+0x90c>
 8008e98:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008e9c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008ea0:	4303      	orrs	r3, r0
 8008ea2:	f000 81d5 	beq.w	8009250 <__ieee754_pow+0x710>
 8008ea6:	a30e      	add	r3, pc, #56	; (adr r3, 8008ee0 <__ieee754_pow+0x3a0>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eb0:	f7f7 fb0e 	bl	80004d0 <__aeabi_dmul>
 8008eb4:	a30a      	add	r3, pc, #40	; (adr r3, 8008ee0 <__ieee754_pow+0x3a0>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	e6d2      	b.n	8008c62 <__ieee754_pow+0x122>
 8008ebc:	f3af 8000 	nop.w
 8008ec0:	60000000 	.word	0x60000000
 8008ec4:	3ff71547 	.word	0x3ff71547
 8008ec8:	f85ddf44 	.word	0xf85ddf44
 8008ecc:	3e54ae0b 	.word	0x3e54ae0b
 8008ed0:	55555555 	.word	0x55555555
 8008ed4:	3fd55555 	.word	0x3fd55555
 8008ed8:	652b82fe 	.word	0x652b82fe
 8008edc:	3ff71547 	.word	0x3ff71547
 8008ee0:	8800759c 	.word	0x8800759c
 8008ee4:	7e37e43c 	.word	0x7e37e43c
 8008ee8:	3ff00000 	.word	0x3ff00000
 8008eec:	3fd00000 	.word	0x3fd00000
 8008ef0:	3fe00000 	.word	0x3fe00000
 8008ef4:	bff00000 	.word	0xbff00000
 8008ef8:	408fffff 	.word	0x408fffff
 8008efc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	da05      	bge.n	8008f12 <__ieee754_pow+0x3d2>
 8008f06:	4bca      	ldr	r3, [pc, #808]	; (8009230 <__ieee754_pow+0x6f0>)
 8008f08:	f7f7 fae2 	bl	80004d0 <__aeabi_dmul>
 8008f0c:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f10:	460c      	mov	r4, r1
 8008f12:	1523      	asrs	r3, r4, #20
 8008f14:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f18:	4413      	add	r3, r2
 8008f1a:	9307      	str	r3, [sp, #28]
 8008f1c:	4bc5      	ldr	r3, [pc, #788]	; (8009234 <__ieee754_pow+0x6f4>)
 8008f1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f22:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f26:	429c      	cmp	r4, r3
 8008f28:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f2c:	dd08      	ble.n	8008f40 <__ieee754_pow+0x400>
 8008f2e:	4bc2      	ldr	r3, [pc, #776]	; (8009238 <__ieee754_pow+0x6f8>)
 8008f30:	429c      	cmp	r4, r3
 8008f32:	f340 8154 	ble.w	80091de <__ieee754_pow+0x69e>
 8008f36:	9b07      	ldr	r3, [sp, #28]
 8008f38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	2600      	movs	r6, #0
 8008f42:	4629      	mov	r1, r5
 8008f44:	00f3      	lsls	r3, r6, #3
 8008f46:	930d      	str	r3, [sp, #52]	; 0x34
 8008f48:	4bbc      	ldr	r3, [pc, #752]	; (800923c <__ieee754_pow+0x6fc>)
 8008f4a:	00f2      	lsls	r2, r6, #3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	cb18      	ldmia	r3, {r3, r4}
 8008f50:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8008f54:	461a      	mov	r2, r3
 8008f56:	4623      	mov	r3, r4
 8008f58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f5c:	f7f7 f904 	bl	8000168 <__aeabi_dsub>
 8008f60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f64:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008f68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f6c:	f7f7 f8fe 	bl	800016c <__adddf3>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	2000      	movs	r0, #0
 8008f76:	49b2      	ldr	r1, [pc, #712]	; (8009240 <__ieee754_pow+0x700>)
 8008f78:	f7f7 fbd4 	bl	8000724 <__aeabi_ddiv>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008f88:	f7f7 faa2 	bl	80004d0 <__aeabi_dmul>
 8008f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f90:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008f94:	f04f 0a00 	mov.w	sl, #0
 8008f98:	2200      	movs	r2, #0
 8008f9a:	106d      	asrs	r5, r5, #1
 8008f9c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008fa0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008fa4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008fa8:	4659      	mov	r1, fp
 8008faa:	4650      	mov	r0, sl
 8008fac:	4614      	mov	r4, r2
 8008fae:	461d      	mov	r5, r3
 8008fb0:	f7f7 fa8e 	bl	80004d0 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fbc:	f7f7 f8d4 	bl	8000168 <__aeabi_dsub>
 8008fc0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	460f      	mov	r7, r1
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4629      	mov	r1, r5
 8008fcc:	f7f7 f8cc 	bl	8000168 <__aeabi_dsub>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fd8:	f7f7 f8c6 	bl	8000168 <__aeabi_dsub>
 8008fdc:	465b      	mov	r3, fp
 8008fde:	4652      	mov	r2, sl
 8008fe0:	f7f7 fa76 	bl	80004d0 <__aeabi_dmul>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 f8bc 	bl	8000168 <__aeabi_dsub>
 8008ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ff4:	f7f7 fa6c 	bl	80004d0 <__aeabi_dmul>
 8008ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ffc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009000:	4610      	mov	r0, r2
 8009002:	4619      	mov	r1, r3
 8009004:	f7f7 fa64 	bl	80004d0 <__aeabi_dmul>
 8009008:	a377      	add	r3, pc, #476	; (adr r3, 80091e8 <__ieee754_pow+0x6a8>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	4604      	mov	r4, r0
 8009010:	460d      	mov	r5, r1
 8009012:	f7f7 fa5d 	bl	80004d0 <__aeabi_dmul>
 8009016:	a376      	add	r3, pc, #472	; (adr r3, 80091f0 <__ieee754_pow+0x6b0>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 f8a6 	bl	800016c <__adddf3>
 8009020:	4622      	mov	r2, r4
 8009022:	462b      	mov	r3, r5
 8009024:	f7f7 fa54 	bl	80004d0 <__aeabi_dmul>
 8009028:	a373      	add	r3, pc, #460	; (adr r3, 80091f8 <__ieee754_pow+0x6b8>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f89d 	bl	800016c <__adddf3>
 8009032:	4622      	mov	r2, r4
 8009034:	462b      	mov	r3, r5
 8009036:	f7f7 fa4b 	bl	80004d0 <__aeabi_dmul>
 800903a:	a371      	add	r3, pc, #452	; (adr r3, 8009200 <__ieee754_pow+0x6c0>)
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f894 	bl	800016c <__adddf3>
 8009044:	4622      	mov	r2, r4
 8009046:	462b      	mov	r3, r5
 8009048:	f7f7 fa42 	bl	80004d0 <__aeabi_dmul>
 800904c:	a36e      	add	r3, pc, #440	; (adr r3, 8009208 <__ieee754_pow+0x6c8>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 f88b 	bl	800016c <__adddf3>
 8009056:	4622      	mov	r2, r4
 8009058:	462b      	mov	r3, r5
 800905a:	f7f7 fa39 	bl	80004d0 <__aeabi_dmul>
 800905e:	a36c      	add	r3, pc, #432	; (adr r3, 8009210 <__ieee754_pow+0x6d0>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 f882 	bl	800016c <__adddf3>
 8009068:	4622      	mov	r2, r4
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	462b      	mov	r3, r5
 8009070:	4620      	mov	r0, r4
 8009072:	4629      	mov	r1, r5
 8009074:	f7f7 fa2c 	bl	80004d0 <__aeabi_dmul>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	f7f7 fa26 	bl	80004d0 <__aeabi_dmul>
 8009084:	4604      	mov	r4, r0
 8009086:	460d      	mov	r5, r1
 8009088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800908c:	465b      	mov	r3, fp
 800908e:	4652      	mov	r2, sl
 8009090:	f7f7 f86c 	bl	800016c <__adddf3>
 8009094:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009098:	f7f7 fa1a 	bl	80004d0 <__aeabi_dmul>
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	f7f7 f864 	bl	800016c <__adddf3>
 80090a4:	465b      	mov	r3, fp
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	4652      	mov	r2, sl
 80090ac:	4659      	mov	r1, fp
 80090ae:	4650      	mov	r0, sl
 80090b0:	f7f7 fa0e 	bl	80004d0 <__aeabi_dmul>
 80090b4:	2200      	movs	r2, #0
 80090b6:	4b63      	ldr	r3, [pc, #396]	; (8009244 <__ieee754_pow+0x704>)
 80090b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80090bc:	f7f7 f856 	bl	800016c <__adddf3>
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	f7f7 f852 	bl	800016c <__adddf3>
 80090c8:	4650      	mov	r0, sl
 80090ca:	460d      	mov	r5, r1
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4650      	mov	r0, sl
 80090d2:	4659      	mov	r1, fp
 80090d4:	f7f7 f9fc 	bl	80004d0 <__aeabi_dmul>
 80090d8:	2200      	movs	r2, #0
 80090da:	4680      	mov	r8, r0
 80090dc:	4689      	mov	r9, r1
 80090de:	4b59      	ldr	r3, [pc, #356]	; (8009244 <__ieee754_pow+0x704>)
 80090e0:	4629      	mov	r1, r5
 80090e2:	4650      	mov	r0, sl
 80090e4:	f7f7 f840 	bl	8000168 <__aeabi_dsub>
 80090e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090ec:	f7f7 f83c 	bl	8000168 <__aeabi_dsub>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4630      	mov	r0, r6
 80090f6:	4639      	mov	r1, r7
 80090f8:	f7f7 f836 	bl	8000168 <__aeabi_dsub>
 80090fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009100:	f7f7 f9e6 	bl	80004d0 <__aeabi_dmul>
 8009104:	462b      	mov	r3, r5
 8009106:	4606      	mov	r6, r0
 8009108:	460f      	mov	r7, r1
 800910a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800910e:	4652      	mov	r2, sl
 8009110:	f7f7 f9de 	bl	80004d0 <__aeabi_dmul>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 f826 	bl	800016c <__adddf3>
 8009120:	4606      	mov	r6, r0
 8009122:	460f      	mov	r7, r1
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 f81e 	bl	800016c <__adddf3>
 8009130:	a339      	add	r3, pc, #228	; (adr r3, 8009218 <__ieee754_pow+0x6d8>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	4650      	mov	r0, sl
 8009138:	460d      	mov	r5, r1
 800913a:	f7f7 f9c9 	bl	80004d0 <__aeabi_dmul>
 800913e:	4642      	mov	r2, r8
 8009140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009144:	464b      	mov	r3, r9
 8009146:	4629      	mov	r1, r5
 8009148:	4650      	mov	r0, sl
 800914a:	f7f7 f80d 	bl	8000168 <__aeabi_dsub>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4630      	mov	r0, r6
 8009154:	4639      	mov	r1, r7
 8009156:	f7f7 f807 	bl	8000168 <__aeabi_dsub>
 800915a:	a331      	add	r3, pc, #196	; (adr r3, 8009220 <__ieee754_pow+0x6e0>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f7 f9b6 	bl	80004d0 <__aeabi_dmul>
 8009164:	a330      	add	r3, pc, #192	; (adr r3, 8009228 <__ieee754_pow+0x6e8>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	4606      	mov	r6, r0
 800916c:	460f      	mov	r7, r1
 800916e:	4650      	mov	r0, sl
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 f9ad 	bl	80004d0 <__aeabi_dmul>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4630      	mov	r0, r6
 800917c:	4639      	mov	r1, r7
 800917e:	f7f6 fff5 	bl	800016c <__adddf3>
 8009182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009184:	4b30      	ldr	r3, [pc, #192]	; (8009248 <__ieee754_pow+0x708>)
 8009186:	4413      	add	r3, r2
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	f7f6 ffee 	bl	800016c <__adddf3>
 8009190:	4604      	mov	r4, r0
 8009192:	9807      	ldr	r0, [sp, #28]
 8009194:	460d      	mov	r5, r1
 8009196:	f7f7 f935 	bl	8000404 <__aeabi_i2d>
 800919a:	4606      	mov	r6, r0
 800919c:	460f      	mov	r7, r1
 800919e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091a0:	4b2a      	ldr	r3, [pc, #168]	; (800924c <__ieee754_pow+0x70c>)
 80091a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a6:	4413      	add	r3, r2
 80091a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091ac:	4622      	mov	r2, r4
 80091ae:	462b      	mov	r3, r5
 80091b0:	f7f6 ffdc 	bl	800016c <__adddf3>
 80091b4:	4642      	mov	r2, r8
 80091b6:	464b      	mov	r3, r9
 80091b8:	f7f6 ffd8 	bl	800016c <__adddf3>
 80091bc:	4632      	mov	r2, r6
 80091be:	463b      	mov	r3, r7
 80091c0:	f7f6 ffd4 	bl	800016c <__adddf3>
 80091c4:	4632      	mov	r2, r6
 80091c6:	463b      	mov	r3, r7
 80091c8:	4650      	mov	r0, sl
 80091ca:	468b      	mov	fp, r1
 80091cc:	f7f6 ffcc 	bl	8000168 <__aeabi_dsub>
 80091d0:	4642      	mov	r2, r8
 80091d2:	464b      	mov	r3, r9
 80091d4:	f7f6 ffc8 	bl	8000168 <__aeabi_dsub>
 80091d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091dc:	e613      	b.n	8008e06 <__ieee754_pow+0x2c6>
 80091de:	2601      	movs	r6, #1
 80091e0:	e6af      	b.n	8008f42 <__ieee754_pow+0x402>
 80091e2:	bf00      	nop
 80091e4:	f3af 8000 	nop.w
 80091e8:	4a454eef 	.word	0x4a454eef
 80091ec:	3fca7e28 	.word	0x3fca7e28
 80091f0:	93c9db65 	.word	0x93c9db65
 80091f4:	3fcd864a 	.word	0x3fcd864a
 80091f8:	a91d4101 	.word	0xa91d4101
 80091fc:	3fd17460 	.word	0x3fd17460
 8009200:	518f264d 	.word	0x518f264d
 8009204:	3fd55555 	.word	0x3fd55555
 8009208:	db6fabff 	.word	0xdb6fabff
 800920c:	3fdb6db6 	.word	0x3fdb6db6
 8009210:	33333303 	.word	0x33333303
 8009214:	3fe33333 	.word	0x3fe33333
 8009218:	e0000000 	.word	0xe0000000
 800921c:	3feec709 	.word	0x3feec709
 8009220:	dc3a03fd 	.word	0xdc3a03fd
 8009224:	3feec709 	.word	0x3feec709
 8009228:	145b01f5 	.word	0x145b01f5
 800922c:	be3e2fe0 	.word	0xbe3e2fe0
 8009230:	43400000 	.word	0x43400000
 8009234:	0003988e 	.word	0x0003988e
 8009238:	000bb679 	.word	0x000bb679
 800923c:	0800d100 	.word	0x0800d100
 8009240:	3ff00000 	.word	0x3ff00000
 8009244:	40080000 	.word	0x40080000
 8009248:	0800d120 	.word	0x0800d120
 800924c:	0800d110 	.word	0x0800d110
 8009250:	a39b      	add	r3, pc, #620	; (adr r3, 80094c0 <__ieee754_pow+0x980>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	f7f6 ff87 	bl	800016c <__adddf3>
 800925e:	4622      	mov	r2, r4
 8009260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009264:	462b      	mov	r3, r5
 8009266:	4650      	mov	r0, sl
 8009268:	4639      	mov	r1, r7
 800926a:	f7f6 ff7d 	bl	8000168 <__aeabi_dsub>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009276:	f7f7 fbbb 	bl	80009f0 <__aeabi_dcmpgt>
 800927a:	2800      	cmp	r0, #0
 800927c:	f47f ae13 	bne.w	8008ea6 <__ieee754_pow+0x366>
 8009280:	4aa3      	ldr	r2, [pc, #652]	; (8009510 <__ieee754_pow+0x9d0>)
 8009282:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009286:	4293      	cmp	r3, r2
 8009288:	f340 8104 	ble.w	8009494 <__ieee754_pow+0x954>
 800928c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009290:	2000      	movs	r0, #0
 8009292:	151b      	asrs	r3, r3, #20
 8009294:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009298:	fa4a f303 	asr.w	r3, sl, r3
 800929c:	4433      	add	r3, r6
 800929e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80092a2:	4f9c      	ldr	r7, [pc, #624]	; (8009514 <__ieee754_pow+0x9d4>)
 80092a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80092a8:	4117      	asrs	r7, r2
 80092aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80092ae:	ea23 0107 	bic.w	r1, r3, r7
 80092b2:	f1c2 0214 	rsb	r2, r2, #20
 80092b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80092ba:	fa4a fa02 	asr.w	sl, sl, r2
 80092be:	2e00      	cmp	r6, #0
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	bfb8      	it	lt
 80092ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80092ce:	f7f6 ff4b 	bl	8000168 <__aeabi_dsub>
 80092d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092da:	4642      	mov	r2, r8
 80092dc:	464b      	mov	r3, r9
 80092de:	f7f6 ff45 	bl	800016c <__adddf3>
 80092e2:	a379      	add	r3, pc, #484	; (adr r3, 80094c8 <__ieee754_pow+0x988>)
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	2000      	movs	r0, #0
 80092ea:	460d      	mov	r5, r1
 80092ec:	4604      	mov	r4, r0
 80092ee:	f7f7 f8ef 	bl	80004d0 <__aeabi_dmul>
 80092f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	4620      	mov	r0, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f6 ff33 	bl	8000168 <__aeabi_dsub>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f6 ff2d 	bl	8000168 <__aeabi_dsub>
 800930e:	a370      	add	r3, pc, #448	; (adr r3, 80094d0 <__ieee754_pow+0x990>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f7 f8dc 	bl	80004d0 <__aeabi_dmul>
 8009318:	a36f      	add	r3, pc, #444	; (adr r3, 80094d8 <__ieee754_pow+0x998>)
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	4680      	mov	r8, r0
 8009320:	4689      	mov	r9, r1
 8009322:	4620      	mov	r0, r4
 8009324:	4629      	mov	r1, r5
 8009326:	f7f7 f8d3 	bl	80004d0 <__aeabi_dmul>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f6 ff1b 	bl	800016c <__adddf3>
 8009336:	4604      	mov	r4, r0
 8009338:	460d      	mov	r5, r1
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f6 ff13 	bl	800016c <__adddf3>
 8009346:	4632      	mov	r2, r6
 8009348:	463b      	mov	r3, r7
 800934a:	4680      	mov	r8, r0
 800934c:	4689      	mov	r9, r1
 800934e:	f7f6 ff0b 	bl	8000168 <__aeabi_dsub>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4620      	mov	r0, r4
 8009358:	4629      	mov	r1, r5
 800935a:	f7f6 ff05 	bl	8000168 <__aeabi_dsub>
 800935e:	4642      	mov	r2, r8
 8009360:	4606      	mov	r6, r0
 8009362:	460f      	mov	r7, r1
 8009364:	464b      	mov	r3, r9
 8009366:	4640      	mov	r0, r8
 8009368:	4649      	mov	r1, r9
 800936a:	f7f7 f8b1 	bl	80004d0 <__aeabi_dmul>
 800936e:	a35c      	add	r3, pc, #368	; (adr r3, 80094e0 <__ieee754_pow+0x9a0>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	f7f7 f8aa 	bl	80004d0 <__aeabi_dmul>
 800937c:	a35a      	add	r3, pc, #360	; (adr r3, 80094e8 <__ieee754_pow+0x9a8>)
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	f7f6 fef1 	bl	8000168 <__aeabi_dsub>
 8009386:	4622      	mov	r2, r4
 8009388:	462b      	mov	r3, r5
 800938a:	f7f7 f8a1 	bl	80004d0 <__aeabi_dmul>
 800938e:	a358      	add	r3, pc, #352	; (adr r3, 80094f0 <__ieee754_pow+0x9b0>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f7f6 feea 	bl	800016c <__adddf3>
 8009398:	4622      	mov	r2, r4
 800939a:	462b      	mov	r3, r5
 800939c:	f7f7 f898 	bl	80004d0 <__aeabi_dmul>
 80093a0:	a355      	add	r3, pc, #340	; (adr r3, 80094f8 <__ieee754_pow+0x9b8>)
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	f7f6 fedf 	bl	8000168 <__aeabi_dsub>
 80093aa:	4622      	mov	r2, r4
 80093ac:	462b      	mov	r3, r5
 80093ae:	f7f7 f88f 	bl	80004d0 <__aeabi_dmul>
 80093b2:	a353      	add	r3, pc, #332	; (adr r3, 8009500 <__ieee754_pow+0x9c0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7f6 fed8 	bl	800016c <__adddf3>
 80093bc:	4622      	mov	r2, r4
 80093be:	462b      	mov	r3, r5
 80093c0:	f7f7 f886 	bl	80004d0 <__aeabi_dmul>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	f7f6 fecc 	bl	8000168 <__aeabi_dsub>
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4640      	mov	r0, r8
 80093da:	4649      	mov	r1, r9
 80093dc:	f7f7 f878 	bl	80004d0 <__aeabi_dmul>
 80093e0:	2200      	movs	r2, #0
 80093e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093ea:	4620      	mov	r0, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	f7f6 febb 	bl	8000168 <__aeabi_dsub>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093fa:	f7f7 f993 	bl	8000724 <__aeabi_ddiv>
 80093fe:	4632      	mov	r2, r6
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	463b      	mov	r3, r7
 8009406:	4640      	mov	r0, r8
 8009408:	4649      	mov	r1, r9
 800940a:	f7f7 f861 	bl	80004d0 <__aeabi_dmul>
 800940e:	4632      	mov	r2, r6
 8009410:	463b      	mov	r3, r7
 8009412:	f7f6 feab 	bl	800016c <__adddf3>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4620      	mov	r0, r4
 800941c:	4629      	mov	r1, r5
 800941e:	f7f6 fea3 	bl	8000168 <__aeabi_dsub>
 8009422:	4642      	mov	r2, r8
 8009424:	464b      	mov	r3, r9
 8009426:	f7f6 fe9f 	bl	8000168 <__aeabi_dsub>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	2000      	movs	r0, #0
 8009430:	4939      	ldr	r1, [pc, #228]	; (8009518 <__ieee754_pow+0x9d8>)
 8009432:	f7f6 fe99 	bl	8000168 <__aeabi_dsub>
 8009436:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800943a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800943e:	da2c      	bge.n	800949a <__ieee754_pow+0x95a>
 8009440:	4652      	mov	r2, sl
 8009442:	f000 f9b5 	bl	80097b0 <scalbn>
 8009446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800944a:	e40a      	b.n	8008c62 <__ieee754_pow+0x122>
 800944c:	4b33      	ldr	r3, [pc, #204]	; (800951c <__ieee754_pow+0x9dc>)
 800944e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009452:	429f      	cmp	r7, r3
 8009454:	f77f af14 	ble.w	8009280 <__ieee754_pow+0x740>
 8009458:	4b31      	ldr	r3, [pc, #196]	; (8009520 <__ieee754_pow+0x9e0>)
 800945a:	440b      	add	r3, r1
 800945c:	4303      	orrs	r3, r0
 800945e:	d00b      	beq.n	8009478 <__ieee754_pow+0x938>
 8009460:	a329      	add	r3, pc, #164	; (adr r3, 8009508 <__ieee754_pow+0x9c8>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800946a:	f7f7 f831 	bl	80004d0 <__aeabi_dmul>
 800946e:	a326      	add	r3, pc, #152	; (adr r3, 8009508 <__ieee754_pow+0x9c8>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7ff bbf5 	b.w	8008c62 <__ieee754_pow+0x122>
 8009478:	4622      	mov	r2, r4
 800947a:	462b      	mov	r3, r5
 800947c:	f7f6 fe74 	bl	8000168 <__aeabi_dsub>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4640      	mov	r0, r8
 8009486:	4649      	mov	r1, r9
 8009488:	f7f7 fa9e 	bl	80009c8 <__aeabi_dcmple>
 800948c:	2800      	cmp	r0, #0
 800948e:	f43f aef7 	beq.w	8009280 <__ieee754_pow+0x740>
 8009492:	e7e5      	b.n	8009460 <__ieee754_pow+0x920>
 8009494:	f04f 0a00 	mov.w	sl, #0
 8009498:	e71d      	b.n	80092d6 <__ieee754_pow+0x796>
 800949a:	4621      	mov	r1, r4
 800949c:	e7d3      	b.n	8009446 <__ieee754_pow+0x906>
 800949e:	2000      	movs	r0, #0
 80094a0:	491d      	ldr	r1, [pc, #116]	; (8009518 <__ieee754_pow+0x9d8>)
 80094a2:	f7ff bbac 	b.w	8008bfe <__ieee754_pow+0xbe>
 80094a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094aa:	f7ff bba8 	b.w	8008bfe <__ieee754_pow+0xbe>
 80094ae:	4638      	mov	r0, r7
 80094b0:	4641      	mov	r1, r8
 80094b2:	f7ff bba4 	b.w	8008bfe <__ieee754_pow+0xbe>
 80094b6:	9200      	str	r2, [sp, #0]
 80094b8:	f7ff bbb4 	b.w	8008c24 <__ieee754_pow+0xe4>
 80094bc:	f3af 8000 	nop.w
 80094c0:	652b82fe 	.word	0x652b82fe
 80094c4:	3c971547 	.word	0x3c971547
 80094c8:	00000000 	.word	0x00000000
 80094cc:	3fe62e43 	.word	0x3fe62e43
 80094d0:	fefa39ef 	.word	0xfefa39ef
 80094d4:	3fe62e42 	.word	0x3fe62e42
 80094d8:	0ca86c39 	.word	0x0ca86c39
 80094dc:	be205c61 	.word	0xbe205c61
 80094e0:	72bea4d0 	.word	0x72bea4d0
 80094e4:	3e663769 	.word	0x3e663769
 80094e8:	c5d26bf1 	.word	0xc5d26bf1
 80094ec:	3ebbbd41 	.word	0x3ebbbd41
 80094f0:	af25de2c 	.word	0xaf25de2c
 80094f4:	3f11566a 	.word	0x3f11566a
 80094f8:	16bebd93 	.word	0x16bebd93
 80094fc:	3f66c16c 	.word	0x3f66c16c
 8009500:	5555553e 	.word	0x5555553e
 8009504:	3fc55555 	.word	0x3fc55555
 8009508:	c2f8f359 	.word	0xc2f8f359
 800950c:	01a56e1f 	.word	0x01a56e1f
 8009510:	3fe00000 	.word	0x3fe00000
 8009514:	000fffff 	.word	0x000fffff
 8009518:	3ff00000 	.word	0x3ff00000
 800951c:	4090cbff 	.word	0x4090cbff
 8009520:	3f6f3400 	.word	0x3f6f3400

08009524 <__ieee754_sqrt>:
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009678 <__ieee754_sqrt+0x154>
 800952c:	4606      	mov	r6, r0
 800952e:	ea3e 0e01 	bics.w	lr, lr, r1
 8009532:	460d      	mov	r5, r1
 8009534:	4607      	mov	r7, r0
 8009536:	460a      	mov	r2, r1
 8009538:	460c      	mov	r4, r1
 800953a:	4603      	mov	r3, r0
 800953c:	d10f      	bne.n	800955e <__ieee754_sqrt+0x3a>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	f7f6 ffc5 	bl	80004d0 <__aeabi_dmul>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4630      	mov	r0, r6
 800954c:	4629      	mov	r1, r5
 800954e:	f7f6 fe0d 	bl	800016c <__adddf3>
 8009552:	4606      	mov	r6, r0
 8009554:	460d      	mov	r5, r1
 8009556:	4630      	mov	r0, r6
 8009558:	4629      	mov	r1, r5
 800955a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955e:	2900      	cmp	r1, #0
 8009560:	dc0e      	bgt.n	8009580 <__ieee754_sqrt+0x5c>
 8009562:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8009566:	ea5e 0707 	orrs.w	r7, lr, r7
 800956a:	d0f4      	beq.n	8009556 <__ieee754_sqrt+0x32>
 800956c:	b141      	cbz	r1, 8009580 <__ieee754_sqrt+0x5c>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	f7f6 fdf9 	bl	8000168 <__aeabi_dsub>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	f7f7 f8d3 	bl	8000724 <__aeabi_ddiv>
 800957e:	e7e8      	b.n	8009552 <__ieee754_sqrt+0x2e>
 8009580:	1512      	asrs	r2, r2, #20
 8009582:	d10c      	bne.n	800959e <__ieee754_sqrt+0x7a>
 8009584:	2c00      	cmp	r4, #0
 8009586:	d06e      	beq.n	8009666 <__ieee754_sqrt+0x142>
 8009588:	2100      	movs	r1, #0
 800958a:	02e6      	lsls	r6, r4, #11
 800958c:	d56f      	bpl.n	800966e <__ieee754_sqrt+0x14a>
 800958e:	1e48      	subs	r0, r1, #1
 8009590:	1a12      	subs	r2, r2, r0
 8009592:	f1c1 0020 	rsb	r0, r1, #32
 8009596:	fa23 f000 	lsr.w	r0, r3, r0
 800959a:	4304      	orrs	r4, r0
 800959c:	408b      	lsls	r3, r1
 800959e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80095a2:	07d5      	lsls	r5, r2, #31
 80095a4:	f04f 0500 	mov.w	r5, #0
 80095a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80095ac:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80095b0:	bf42      	ittt	mi
 80095b2:	0064      	lslmi	r4, r4, #1
 80095b4:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80095b8:	005b      	lslmi	r3, r3, #1
 80095ba:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80095be:	1050      	asrs	r0, r2, #1
 80095c0:	4421      	add	r1, r4
 80095c2:	2216      	movs	r2, #22
 80095c4:	462c      	mov	r4, r5
 80095c6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	19a7      	adds	r7, r4, r6
 80095ce:	428f      	cmp	r7, r1
 80095d0:	bfde      	ittt	le
 80095d2:	1bc9      	suble	r1, r1, r7
 80095d4:	19bc      	addle	r4, r7, r6
 80095d6:	19ad      	addle	r5, r5, r6
 80095d8:	0049      	lsls	r1, r1, #1
 80095da:	3a01      	subs	r2, #1
 80095dc:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80095e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80095e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095e8:	d1f0      	bne.n	80095cc <__ieee754_sqrt+0xa8>
 80095ea:	f04f 0e20 	mov.w	lr, #32
 80095ee:	4694      	mov	ip, r2
 80095f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80095f4:	42a1      	cmp	r1, r4
 80095f6:	eb06 070c 	add.w	r7, r6, ip
 80095fa:	dc02      	bgt.n	8009602 <__ieee754_sqrt+0xde>
 80095fc:	d112      	bne.n	8009624 <__ieee754_sqrt+0x100>
 80095fe:	429f      	cmp	r7, r3
 8009600:	d810      	bhi.n	8009624 <__ieee754_sqrt+0x100>
 8009602:	2f00      	cmp	r7, #0
 8009604:	eb07 0c06 	add.w	ip, r7, r6
 8009608:	da34      	bge.n	8009674 <__ieee754_sqrt+0x150>
 800960a:	f1bc 0f00 	cmp.w	ip, #0
 800960e:	db31      	blt.n	8009674 <__ieee754_sqrt+0x150>
 8009610:	f104 0801 	add.w	r8, r4, #1
 8009614:	1b09      	subs	r1, r1, r4
 8009616:	4644      	mov	r4, r8
 8009618:	429f      	cmp	r7, r3
 800961a:	bf88      	it	hi
 800961c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009620:	1bdb      	subs	r3, r3, r7
 8009622:	4432      	add	r2, r6
 8009624:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8009628:	f1be 0e01 	subs.w	lr, lr, #1
 800962c:	4439      	add	r1, r7
 800962e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009632:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009636:	d1dd      	bne.n	80095f4 <__ieee754_sqrt+0xd0>
 8009638:	430b      	orrs	r3, r1
 800963a:	d006      	beq.n	800964a <__ieee754_sqrt+0x126>
 800963c:	1c54      	adds	r4, r2, #1
 800963e:	bf0b      	itete	eq
 8009640:	4672      	moveq	r2, lr
 8009642:	3201      	addne	r2, #1
 8009644:	3501      	addeq	r5, #1
 8009646:	f022 0201 	bicne.w	r2, r2, #1
 800964a:	106b      	asrs	r3, r5, #1
 800964c:	0852      	lsrs	r2, r2, #1
 800964e:	07e9      	lsls	r1, r5, #31
 8009650:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009654:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009658:	bf48      	it	mi
 800965a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800965e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8009662:	4616      	mov	r6, r2
 8009664:	e777      	b.n	8009556 <__ieee754_sqrt+0x32>
 8009666:	0adc      	lsrs	r4, r3, #11
 8009668:	3a15      	subs	r2, #21
 800966a:	055b      	lsls	r3, r3, #21
 800966c:	e78a      	b.n	8009584 <__ieee754_sqrt+0x60>
 800966e:	0064      	lsls	r4, r4, #1
 8009670:	3101      	adds	r1, #1
 8009672:	e78a      	b.n	800958a <__ieee754_sqrt+0x66>
 8009674:	46a0      	mov	r8, r4
 8009676:	e7cd      	b.n	8009614 <__ieee754_sqrt+0xf0>
 8009678:	7ff00000 	.word	0x7ff00000

0800967c <fabs>:
 800967c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009680:	4770      	bx	lr

08009682 <finite>:
 8009682:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009686:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800968a:	0fc0      	lsrs	r0, r0, #31
 800968c:	4770      	bx	lr

0800968e <matherr>:
 800968e:	2000      	movs	r0, #0
 8009690:	4770      	bx	lr
	...

08009694 <nan>:
 8009694:	2000      	movs	r0, #0
 8009696:	4901      	ldr	r1, [pc, #4]	; (800969c <nan+0x8>)
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	7ff80000 	.word	0x7ff80000

080096a0 <rint>:
 80096a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80096a6:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 80096aa:	2f13      	cmp	r7, #19
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4684      	mov	ip, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	4605      	mov	r5, r0
 80096b6:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80096ba:	dc56      	bgt.n	800976a <rint+0xca>
 80096bc:	2f00      	cmp	r7, #0
 80096be:	da29      	bge.n	8009714 <rint+0x74>
 80096c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80096c4:	4301      	orrs	r1, r0
 80096c6:	d021      	beq.n	800970c <rint+0x6c>
 80096c8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80096cc:	4305      	orrs	r5, r0
 80096ce:	426b      	negs	r3, r5
 80096d0:	432b      	orrs	r3, r5
 80096d2:	0b1b      	lsrs	r3, r3, #12
 80096d4:	0c64      	lsrs	r4, r4, #17
 80096d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096da:	0464      	lsls	r4, r4, #17
 80096dc:	ea43 0104 	orr.w	r1, r3, r4
 80096e0:	4b31      	ldr	r3, [pc, #196]	; (80097a8 <rint+0x108>)
 80096e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80096ea:	4622      	mov	r2, r4
 80096ec:	462b      	mov	r3, r5
 80096ee:	f7f6 fd3d 	bl	800016c <__adddf3>
 80096f2:	e9cd 0100 	strd	r0, r1, [sp]
 80096f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096fa:	4622      	mov	r2, r4
 80096fc:	462b      	mov	r3, r5
 80096fe:	f7f6 fd33 	bl	8000168 <__aeabi_dsub>
 8009702:	4602      	mov	r2, r0
 8009704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009708:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 800970c:	4610      	mov	r0, r2
 800970e:	4619      	mov	r1, r3
 8009710:	b003      	add	sp, #12
 8009712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009714:	4925      	ldr	r1, [pc, #148]	; (80097ac <rint+0x10c>)
 8009716:	4139      	asrs	r1, r7
 8009718:	ea03 0001 	and.w	r0, r3, r1
 800971c:	4310      	orrs	r0, r2
 800971e:	d0f5      	beq.n	800970c <rint+0x6c>
 8009720:	084b      	lsrs	r3, r1, #1
 8009722:	ea04 0203 	and.w	r2, r4, r3
 8009726:	ea52 050c 	orrs.w	r5, r2, ip
 800972a:	d00a      	beq.n	8009742 <rint+0xa2>
 800972c:	ea24 0303 	bic.w	r3, r4, r3
 8009730:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8009734:	2f13      	cmp	r7, #19
 8009736:	bf0c      	ite	eq
 8009738:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800973c:	2500      	movne	r5, #0
 800973e:	413c      	asrs	r4, r7
 8009740:	431c      	orrs	r4, r3
 8009742:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <rint+0x108>)
 8009744:	4621      	mov	r1, r4
 8009746:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800974a:	4628      	mov	r0, r5
 800974c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009750:	4622      	mov	r2, r4
 8009752:	462b      	mov	r3, r5
 8009754:	f7f6 fd0a 	bl	800016c <__adddf3>
 8009758:	e9cd 0100 	strd	r0, r1, [sp]
 800975c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009760:	4622      	mov	r2, r4
 8009762:	462b      	mov	r3, r5
 8009764:	f7f6 fd00 	bl	8000168 <__aeabi_dsub>
 8009768:	e006      	b.n	8009778 <rint+0xd8>
 800976a:	2f33      	cmp	r7, #51	; 0x33
 800976c:	dd07      	ble.n	800977e <rint+0xde>
 800976e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8009772:	d1cb      	bne.n	800970c <rint+0x6c>
 8009774:	f7f6 fcfa 	bl	800016c <__adddf3>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	e7c6      	b.n	800970c <rint+0x6c>
 800977e:	f04f 31ff 	mov.w	r1, #4294967295
 8009782:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 8009786:	fa21 f10e 	lsr.w	r1, r1, lr
 800978a:	4208      	tst	r0, r1
 800978c:	d0be      	beq.n	800970c <rint+0x6c>
 800978e:	084b      	lsrs	r3, r1, #1
 8009790:	4218      	tst	r0, r3
 8009792:	bf1f      	itttt	ne
 8009794:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8009798:	ea20 0303 	bicne.w	r3, r0, r3
 800979c:	fa45 fe0e 	asrne.w	lr, r5, lr
 80097a0:	ea4e 0503 	orrne.w	r5, lr, r3
 80097a4:	e7cd      	b.n	8009742 <rint+0xa2>
 80097a6:	bf00      	nop
 80097a8:	0800d130 	.word	0x0800d130
 80097ac:	000fffff 	.word	0x000fffff

080097b0 <scalbn>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	4616      	mov	r6, r2
 80097b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80097b8:	4604      	mov	r4, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	460b      	mov	r3, r1
 80097be:	b98a      	cbnz	r2, 80097e4 <scalbn+0x34>
 80097c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097c4:	4303      	orrs	r3, r0
 80097c6:	d035      	beq.n	8009834 <scalbn+0x84>
 80097c8:	2200      	movs	r2, #0
 80097ca:	4b2d      	ldr	r3, [pc, #180]	; (8009880 <scalbn+0xd0>)
 80097cc:	f7f6 fe80 	bl	80004d0 <__aeabi_dmul>
 80097d0:	4a2c      	ldr	r2, [pc, #176]	; (8009884 <scalbn+0xd4>)
 80097d2:	4604      	mov	r4, r0
 80097d4:	4296      	cmp	r6, r2
 80097d6:	460d      	mov	r5, r1
 80097d8:	460b      	mov	r3, r1
 80097da:	da0e      	bge.n	80097fa <scalbn+0x4a>
 80097dc:	a324      	add	r3, pc, #144	; (adr r3, 8009870 <scalbn+0xc0>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	e01c      	b.n	800981e <scalbn+0x6e>
 80097e4:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80097e8:	42ba      	cmp	r2, r7
 80097ea:	d109      	bne.n	8009800 <scalbn+0x50>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	f7f6 fcbc 	bl	800016c <__adddf3>
 80097f4:	4604      	mov	r4, r0
 80097f6:	460d      	mov	r5, r1
 80097f8:	e01c      	b.n	8009834 <scalbn+0x84>
 80097fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80097fe:	3a36      	subs	r2, #54	; 0x36
 8009800:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009804:	4432      	add	r2, r6
 8009806:	428a      	cmp	r2, r1
 8009808:	dd0c      	ble.n	8009824 <scalbn+0x74>
 800980a:	4622      	mov	r2, r4
 800980c:	462b      	mov	r3, r5
 800980e:	a11a      	add	r1, pc, #104	; (adr r1, 8009878 <scalbn+0xc8>)
 8009810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009814:	f000 f83a 	bl	800988c <copysign>
 8009818:	a317      	add	r3, pc, #92	; (adr r3, 8009878 <scalbn+0xc8>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	f7f6 fe57 	bl	80004d0 <__aeabi_dmul>
 8009822:	e7e7      	b.n	80097f4 <scalbn+0x44>
 8009824:	2a00      	cmp	r2, #0
 8009826:	dd08      	ble.n	800983a <scalbn+0x8a>
 8009828:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800982c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009830:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009834:	4620      	mov	r0, r4
 8009836:	4629      	mov	r1, r5
 8009838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800983e:	da0b      	bge.n	8009858 <scalbn+0xa8>
 8009840:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009844:	429e      	cmp	r6, r3
 8009846:	4622      	mov	r2, r4
 8009848:	462b      	mov	r3, r5
 800984a:	dce0      	bgt.n	800980e <scalbn+0x5e>
 800984c:	a108      	add	r1, pc, #32	; (adr r1, 8009870 <scalbn+0xc0>)
 800984e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009852:	f000 f81b 	bl	800988c <copysign>
 8009856:	e7c1      	b.n	80097dc <scalbn+0x2c>
 8009858:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800985c:	3236      	adds	r2, #54	; 0x36
 800985e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009862:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	2200      	movs	r2, #0
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <scalbn+0xd8>)
 800986e:	e7d6      	b.n	800981e <scalbn+0x6e>
 8009870:	c2f8f359 	.word	0xc2f8f359
 8009874:	01a56e1f 	.word	0x01a56e1f
 8009878:	8800759c 	.word	0x8800759c
 800987c:	7e37e43c 	.word	0x7e37e43c
 8009880:	43500000 	.word	0x43500000
 8009884:	ffff3cb0 	.word	0xffff3cb0
 8009888:	3c900000 	.word	0x3c900000

0800988c <copysign>:
 800988c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009894:	ea42 0103 	orr.w	r1, r2, r3
 8009898:	4770      	bx	lr
	...

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	; (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000194 	.word	0x20000194

080098a8 <_sbrk>:
 80098a8:	4b04      	ldr	r3, [pc, #16]	; (80098bc <_sbrk+0x14>)
 80098aa:	4602      	mov	r2, r0
 80098ac:	6819      	ldr	r1, [r3, #0]
 80098ae:	b909      	cbnz	r1, 80098b4 <_sbrk+0xc>
 80098b0:	4903      	ldr	r1, [pc, #12]	; (80098c0 <_sbrk+0x18>)
 80098b2:	6019      	str	r1, [r3, #0]
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	4402      	add	r2, r0
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	4770      	bx	lr
 80098bc:	20000b2c 	.word	0x20000b2c
 80098c0:	20001cd0 	.word	0x20001cd0

080098c4 <_init>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	bf00      	nop
 80098c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ca:	bc08      	pop	{r3}
 80098cc:	469e      	mov	lr, r3
 80098ce:	4770      	bx	lr

080098d0 <_fini>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr
